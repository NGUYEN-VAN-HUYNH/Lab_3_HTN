
Lab3_LCD_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005650  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030b4  080057e0  080057e0  000157e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008894  08008894  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08008894  08008894  00018894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800889c  0800889c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800889c  0800889c  0001889c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088a0  080088a0  000188a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080088a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000002ec  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000354  20000354  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f033  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ccb  00000000  00000000  0002f10e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f08  00000000  00000000  00031de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b6e  00000000  00000000  00032ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022b6b  00000000  00000000  00033856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001355e  00000000  00000000  000563c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd899  00000000  00000000  0006991f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000041e0  00000000  00000000  001371b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0013b398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080057c8 	.word	0x080057c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080057c8 	.word	0x080057c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <button_init>:
/**
 * @brief  	Init matrix button
 * @param  	None
 * @retval 	None
 */
void button_init() {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000580:	2201      	movs	r2, #1
 8000582:	2108      	movs	r1, #8
 8000584:	4802      	ldr	r0, [pc, #8]	; (8000590 <button_init+0x14>)
 8000586:	f002 fc91 	bl	8002eac <HAL_GPIO_WritePin>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40020c00 	.word	0x40020c00

08000594 <button_scan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void button_scan() {
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2108      	movs	r1, #8
 800059e:	482f      	ldr	r0, [pc, #188]	; (800065c <button_scan+0xc8>)
 80005a0:	f002 fc84 	bl	8002eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2108      	movs	r1, #8
 80005a8:	482c      	ldr	r0, [pc, #176]	; (800065c <button_scan+0xc8>)
 80005aa:	f002 fc7f 	bl	8002eac <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_spi_buffer, 2, 10);
 80005ae:	230a      	movs	r3, #10
 80005b0:	2202      	movs	r2, #2
 80005b2:	492b      	ldr	r1, [pc, #172]	; (8000660 <button_scan+0xcc>)
 80005b4:	482b      	ldr	r0, [pc, #172]	; (8000664 <button_scan+0xd0>)
 80005b6:	f003 fad6 	bl	8003b66 <HAL_SPI_Receive>

	int button_index = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
	uint16_t mask = 0x8000;
 80005be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005c2:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	e03f      	b.n	800064a <button_scan+0xb6>
		if (i >= 0 && i <= 3) {
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db06      	blt.n	80005de <button_scan+0x4a>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2b03      	cmp	r3, #3
 80005d4:	dc03      	bgt.n	80005de <button_scan+0x4a>
			button_index = i + 4;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	3304      	adds	r3, #4
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	e018      	b.n	8000610 <button_scan+0x7c>
		} else if (i >= 4 && i <= 7) {
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b03      	cmp	r3, #3
 80005e2:	dd07      	ble.n	80005f4 <button_scan+0x60>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b07      	cmp	r3, #7
 80005e8:	dc04      	bgt.n	80005f4 <button_scan+0x60>
			button_index = 7 - i;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f1c3 0307 	rsb	r3, r3, #7
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	e00d      	b.n	8000610 <button_scan+0x7c>
		} else if (i >= 8 && i <= 11) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2b07      	cmp	r3, #7
 80005f8:	dd06      	ble.n	8000608 <button_scan+0x74>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b0b      	cmp	r3, #11
 80005fe:	dc03      	bgt.n	8000608 <button_scan+0x74>
			button_index = i + 4;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3304      	adds	r3, #4
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	e003      	b.n	8000610 <button_scan+0x7c>
		} else {
			button_index = 23 - i;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f1c3 0317 	rsb	r3, r3, #23
 800060e:	60fb      	str	r3, [r7, #12]
		}
		if (button_spi_buffer & mask)
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <button_scan+0xcc>)
 8000612:	881a      	ldrh	r2, [r3, #0]
 8000614:	897b      	ldrh	r3, [r7, #10]
 8000616:	4013      	ands	r3, r2
 8000618:	b29b      	uxth	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d005      	beq.n	800062a <button_scan+0x96>
			button_count[button_index] = 0;
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <button_scan+0xd4>)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2100      	movs	r1, #0
 8000624:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000628:	e009      	b.n	800063e <button_scan+0xaa>
		else
			button_count[button_index]++;
 800062a:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <button_scan+0xd4>)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000632:	3301      	adds	r3, #1
 8000634:	b299      	uxth	r1, r3
 8000636:	4a0c      	ldr	r2, [pc, #48]	; (8000668 <button_scan+0xd4>)
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 800063e:	897b      	ldrh	r3, [r7, #10]
 8000640:	085b      	lsrs	r3, r3, #1
 8000642:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3301      	adds	r3, #1
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b0f      	cmp	r3, #15
 800064e:	ddbc      	ble.n	80005ca <button_scan+0x36>
	}
}
 8000650:	bf00      	nop
 8000652:	bf00      	nop
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40020c00 	.word	0x40020c00
 8000660:	200000a4 	.word	0x200000a4
 8000664:	2000011c 	.word	0x2000011c
 8000668:	20000084 	.word	0x20000084

0800066c <draw_lamps_off>:
#define LAMP_B_YELLOW_Y 240
#define STATUS_BAR_Y 20 // Vùng hiển thị số đếm và chế độ ở dưới cùng (giả định màn hình 320px cao)
#define STATUS_BAR_HEIGHT 40 // Chiều cao vùng status bar

// Function to draw all lamps off
void draw_lamps_off(void) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af02      	add	r7, sp, #8
    lcd_draw_circle(LAMP_A_RED_X, LAMP_A_RED_Y, BLACK, LAMP_RADIUS, 1);
 8000672:	2301      	movs	r3, #1
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2319      	movs	r3, #25
 8000678:	2200      	movs	r2, #0
 800067a:	2150      	movs	r1, #80	; 0x50
 800067c:	205a      	movs	r0, #90	; 0x5a
 800067e:	f001 fbb6 	bl	8001dee <lcd_draw_circle>
    lcd_draw_circle(LAMP_A_GREEN_X, LAMP_A_GREEN_Y, BLACK, LAMP_RADIUS, 1);
 8000682:	2301      	movs	r3, #1
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	2319      	movs	r3, #25
 8000688:	2200      	movs	r2, #0
 800068a:	21a0      	movs	r1, #160	; 0xa0
 800068c:	205a      	movs	r0, #90	; 0x5a
 800068e:	f001 fbae 	bl	8001dee <lcd_draw_circle>
    lcd_draw_circle(LAMP_A_YELLOW_X, LAMP_A_YELLOW_Y, BLACK, LAMP_RADIUS, 1);
 8000692:	2301      	movs	r3, #1
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2319      	movs	r3, #25
 8000698:	2200      	movs	r2, #0
 800069a:	21f0      	movs	r1, #240	; 0xf0
 800069c:	205a      	movs	r0, #90	; 0x5a
 800069e:	f001 fba6 	bl	8001dee <lcd_draw_circle>
    lcd_draw_circle(LAMP_B_RED_X, LAMP_B_RED_Y, BLACK, LAMP_RADIUS, 1);
 80006a2:	2301      	movs	r3, #1
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2319      	movs	r3, #25
 80006a8:	2200      	movs	r2, #0
 80006aa:	2150      	movs	r1, #80	; 0x50
 80006ac:	2096      	movs	r0, #150	; 0x96
 80006ae:	f001 fb9e 	bl	8001dee <lcd_draw_circle>
    lcd_draw_circle(LAMP_B_GREEN_X, LAMP_B_GREEN_Y, BLACK, LAMP_RADIUS, 1);
 80006b2:	2301      	movs	r3, #1
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2319      	movs	r3, #25
 80006b8:	2200      	movs	r2, #0
 80006ba:	21a0      	movs	r1, #160	; 0xa0
 80006bc:	2096      	movs	r0, #150	; 0x96
 80006be:	f001 fb96 	bl	8001dee <lcd_draw_circle>
    lcd_draw_circle(LAMP_B_YELLOW_X, LAMP_B_YELLOW_Y, BLACK, LAMP_RADIUS, 1);
 80006c2:	2301      	movs	r3, #1
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2319      	movs	r3, #25
 80006c8:	2200      	movs	r2, #0
 80006ca:	21f0      	movs	r1, #240	; 0xf0
 80006cc:	2096      	movs	r0, #150	; 0x96
 80006ce:	f001 fb8e 	bl	8001dee <lcd_draw_circle>
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <set_lamps>:

// Function to set lamp colors with border
void set_lamps(State state) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af02      	add	r7, sp, #8
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	3b0c      	subs	r3, #12
 80006e6:	2b0b      	cmp	r3, #11
 80006e8:	f200 80b4 	bhi.w	8000854 <set_lamps+0x17c>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <set_lamps+0x1c>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	080007bd 	.word	0x080007bd
 80006f8:	080007e3 	.word	0x080007e3
 80006fc:	08000809 	.word	0x08000809
 8000700:	0800082f 	.word	0x0800082f
 8000704:	080007bd 	.word	0x080007bd
 8000708:	080007e3 	.word	0x080007e3
 800070c:	08000809 	.word	0x08000809
 8000710:	0800082f 	.word	0x0800082f
 8000714:	08000725 	.word	0x08000725
 8000718:	0800074b 	.word	0x0800074b
 800071c:	08000771 	.word	0x08000771
 8000720:	08000797 	.word	0x08000797
        case STATE_A_RED_B_GREEN:
            lcd_draw_circle(LAMP_A_RED_X, LAMP_A_RED_Y, RED, LAMP_RADIUS, 1);
 8000724:	2301      	movs	r3, #1
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	2319      	movs	r3, #25
 800072a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800072e:	2150      	movs	r1, #80	; 0x50
 8000730:	205a      	movs	r0, #90	; 0x5a
 8000732:	f001 fb5c 	bl	8001dee <lcd_draw_circle>
            lcd_draw_circle(LAMP_B_GREEN_X, LAMP_B_GREEN_Y, GREEN, LAMP_RADIUS, 1);
 8000736:	2301      	movs	r3, #1
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2319      	movs	r3, #25
 800073c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000740:	21a0      	movs	r1, #160	; 0xa0
 8000742:	2096      	movs	r0, #150	; 0x96
 8000744:	f001 fb53 	bl	8001dee <lcd_draw_circle>
            break;
 8000748:	e085      	b.n	8000856 <set_lamps+0x17e>
        case STATE_A_RED_B_YELLOW:
            lcd_draw_circle(LAMP_A_RED_X, LAMP_A_RED_Y, RED, LAMP_RADIUS, 1);
 800074a:	2301      	movs	r3, #1
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	2319      	movs	r3, #25
 8000750:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000754:	2150      	movs	r1, #80	; 0x50
 8000756:	205a      	movs	r0, #90	; 0x5a
 8000758:	f001 fb49 	bl	8001dee <lcd_draw_circle>
            lcd_draw_circle(LAMP_B_YELLOW_X, LAMP_B_YELLOW_Y, YELLOW, LAMP_RADIUS, 1);
 800075c:	2301      	movs	r3, #1
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2319      	movs	r3, #25
 8000762:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000766:	21f0      	movs	r1, #240	; 0xf0
 8000768:	2096      	movs	r0, #150	; 0x96
 800076a:	f001 fb40 	bl	8001dee <lcd_draw_circle>
            break;
 800076e:	e072      	b.n	8000856 <set_lamps+0x17e>
        case STATE_A_GREEN_B_RED:
            lcd_draw_circle(LAMP_A_GREEN_X, LAMP_A_GREEN_Y, GREEN, LAMP_RADIUS, 1);
 8000770:	2301      	movs	r3, #1
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	2319      	movs	r3, #25
 8000776:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800077a:	21a0      	movs	r1, #160	; 0xa0
 800077c:	205a      	movs	r0, #90	; 0x5a
 800077e:	f001 fb36 	bl	8001dee <lcd_draw_circle>
            lcd_draw_circle(LAMP_B_RED_X, LAMP_B_RED_Y, RED, LAMP_RADIUS, 1);
 8000782:	2301      	movs	r3, #1
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2319      	movs	r3, #25
 8000788:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800078c:	2150      	movs	r1, #80	; 0x50
 800078e:	2096      	movs	r0, #150	; 0x96
 8000790:	f001 fb2d 	bl	8001dee <lcd_draw_circle>
            break;
 8000794:	e05f      	b.n	8000856 <set_lamps+0x17e>
        case STATE_A_YELLOW_B_RED:
            lcd_draw_circle(LAMP_A_YELLOW_X, LAMP_A_YELLOW_Y, YELLOW, LAMP_RADIUS, 1);
 8000796:	2301      	movs	r3, #1
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2319      	movs	r3, #25
 800079c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80007a0:	21f0      	movs	r1, #240	; 0xf0
 80007a2:	205a      	movs	r0, #90	; 0x5a
 80007a4:	f001 fb23 	bl	8001dee <lcd_draw_circle>
            lcd_draw_circle(LAMP_B_RED_X, LAMP_B_RED_Y, RED, LAMP_RADIUS, 1);
 80007a8:	2301      	movs	r3, #1
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2319      	movs	r3, #25
 80007ae:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80007b2:	2150      	movs	r1, #80	; 0x50
 80007b4:	2096      	movs	r0, #150	; 0x96
 80007b6:	f001 fb1a 	bl	8001dee <lcd_draw_circle>
            break;
 80007ba:	e04c      	b.n	8000856 <set_lamps+0x17e>
        case STATE_RED_GREEN:
        case STATE_RED_GREEN_MAN:
            lcd_draw_circle(LAMP_A_RED_X, LAMP_A_RED_Y, RED, LAMP_RADIUS, 1);
 80007bc:	2301      	movs	r3, #1
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2319      	movs	r3, #25
 80007c2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80007c6:	2150      	movs	r1, #80	; 0x50
 80007c8:	205a      	movs	r0, #90	; 0x5a
 80007ca:	f001 fb10 	bl	8001dee <lcd_draw_circle>
            lcd_draw_circle(LAMP_B_GREEN_X, LAMP_B_GREEN_Y, GREEN, LAMP_RADIUS, 1);
 80007ce:	2301      	movs	r3, #1
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	2319      	movs	r3, #25
 80007d4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80007d8:	21a0      	movs	r1, #160	; 0xa0
 80007da:	2096      	movs	r0, #150	; 0x96
 80007dc:	f001 fb07 	bl	8001dee <lcd_draw_circle>
            break;
 80007e0:	e039      	b.n	8000856 <set_lamps+0x17e>
        case STATE_RED_YELLOW:
        case STATE_RED_YELLOW_MAN:
            lcd_draw_circle(LAMP_A_RED_X, LAMP_A_RED_Y, RED, LAMP_RADIUS, 1);
 80007e2:	2301      	movs	r3, #1
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2319      	movs	r3, #25
 80007e8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80007ec:	2150      	movs	r1, #80	; 0x50
 80007ee:	205a      	movs	r0, #90	; 0x5a
 80007f0:	f001 fafd 	bl	8001dee <lcd_draw_circle>
            lcd_draw_circle(LAMP_B_YELLOW_X, LAMP_B_YELLOW_Y, YELLOW, LAMP_RADIUS, 1);
 80007f4:	2301      	movs	r3, #1
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2319      	movs	r3, #25
 80007fa:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80007fe:	21f0      	movs	r1, #240	; 0xf0
 8000800:	2096      	movs	r0, #150	; 0x96
 8000802:	f001 faf4 	bl	8001dee <lcd_draw_circle>
            break;
 8000806:	e026      	b.n	8000856 <set_lamps+0x17e>
        case STATE_GREEN_RED:
        case STATE_GREEN_RED_MAN:
            lcd_draw_circle(LAMP_A_GREEN_X, LAMP_A_GREEN_Y, GREEN, LAMP_RADIUS, 1);
 8000808:	2301      	movs	r3, #1
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	2319      	movs	r3, #25
 800080e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000812:	21a0      	movs	r1, #160	; 0xa0
 8000814:	205a      	movs	r0, #90	; 0x5a
 8000816:	f001 faea 	bl	8001dee <lcd_draw_circle>
            lcd_draw_circle(LAMP_B_RED_X, LAMP_B_RED_Y, RED, LAMP_RADIUS, 1);
 800081a:	2301      	movs	r3, #1
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2319      	movs	r3, #25
 8000820:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000824:	2150      	movs	r1, #80	; 0x50
 8000826:	2096      	movs	r0, #150	; 0x96
 8000828:	f001 fae1 	bl	8001dee <lcd_draw_circle>
            break;
 800082c:	e013      	b.n	8000856 <set_lamps+0x17e>
        case STATE_YELLOW_RED:
        case STATE_YELLOW_RED_MAN:
            lcd_draw_circle(LAMP_A_YELLOW_X, LAMP_A_YELLOW_Y, YELLOW, LAMP_RADIUS, 1);
 800082e:	2301      	movs	r3, #1
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2319      	movs	r3, #25
 8000834:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000838:	21f0      	movs	r1, #240	; 0xf0
 800083a:	205a      	movs	r0, #90	; 0x5a
 800083c:	f001 fad7 	bl	8001dee <lcd_draw_circle>
            lcd_draw_circle(LAMP_B_RED_X, LAMP_B_RED_Y, RED, LAMP_RADIUS, 1);
 8000840:	2301      	movs	r3, #1
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2319      	movs	r3, #25
 8000846:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800084a:	2150      	movs	r1, #80	; 0x50
 800084c:	2096      	movs	r0, #150	; 0x96
 800084e:	f001 face 	bl	8001dee <lcd_draw_circle>
            break;
 8000852:	e000      	b.n	8000856 <set_lamps+0x17e>
        default:
            break;
 8000854:	bf00      	nop
    }
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop

08000860 <blink_editing_lamp>:

// Blink function for EDIT states only
void blink_editing_lamp(uint16_t color) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af02      	add	r7, sp, #8
 8000866:	4603      	mov	r3, r0
 8000868:	80fb      	strh	r3, [r7, #6]
    if (current_state == STATE_MODE2 || current_state == STATE_RED_EDIT ||
 800086a:	4b37      	ldr	r3, [pc, #220]	; (8000948 <blink_editing_lamp+0xe8>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b02      	cmp	r3, #2
 8000870:	d013      	beq.n	800089a <blink_editing_lamp+0x3a>
 8000872:	4b35      	ldr	r3, [pc, #212]	; (8000948 <blink_editing_lamp+0xe8>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b06      	cmp	r3, #6
 8000878:	d00f      	beq.n	800089a <blink_editing_lamp+0x3a>
        current_state == STATE_MODE3 || current_state == STATE_GREEN_EDIT ||
 800087a:	4b33      	ldr	r3, [pc, #204]	; (8000948 <blink_editing_lamp+0xe8>)
 800087c:	781b      	ldrb	r3, [r3, #0]
    if (current_state == STATE_MODE2 || current_state == STATE_RED_EDIT ||
 800087e:	2b03      	cmp	r3, #3
 8000880:	d00b      	beq.n	800089a <blink_editing_lamp+0x3a>
        current_state == STATE_MODE3 || current_state == STATE_GREEN_EDIT ||
 8000882:	4b31      	ldr	r3, [pc, #196]	; (8000948 <blink_editing_lamp+0xe8>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b08      	cmp	r3, #8
 8000888:	d007      	beq.n	800089a <blink_editing_lamp+0x3a>
        current_state == STATE_MODE4 || current_state == STATE_YELLOW_EDIT) {
 800088a:	4b2f      	ldr	r3, [pc, #188]	; (8000948 <blink_editing_lamp+0xe8>)
 800088c:	781b      	ldrb	r3, [r3, #0]
        current_state == STATE_MODE3 || current_state == STATE_GREEN_EDIT ||
 800088e:	2b04      	cmp	r3, #4
 8000890:	d003      	beq.n	800089a <blink_editing_lamp+0x3a>
        current_state == STATE_MODE4 || current_state == STATE_YELLOW_EDIT) {
 8000892:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <blink_editing_lamp+0xe8>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b0a      	cmp	r3, #10
 8000898:	d152      	bne.n	8000940 <blink_editing_lamp+0xe0>
        uint16_t blink_color = blink_flag ? color : BLACK;
 800089a:	4b2c      	ldr	r3, [pc, #176]	; (800094c <blink_editing_lamp+0xec>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <blink_editing_lamp+0x46>
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	e000      	b.n	80008a8 <blink_editing_lamp+0x48>
 80008a6:	2300      	movs	r3, #0
 80008a8:	81fb      	strh	r3, [r7, #14]
        if (current_state == STATE_MODE2 || current_state == STATE_RED_EDIT) {
 80008aa:	4b27      	ldr	r3, [pc, #156]	; (8000948 <blink_editing_lamp+0xe8>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d003      	beq.n	80008ba <blink_editing_lamp+0x5a>
 80008b2:	4b25      	ldr	r3, [pc, #148]	; (8000948 <blink_editing_lamp+0xe8>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b06      	cmp	r3, #6
 80008b8:	d110      	bne.n	80008dc <blink_editing_lamp+0x7c>
            lcd_draw_circle(LAMP_A_RED_X, LAMP_A_RED_Y, blink_color, LAMP_RADIUS, 1);
 80008ba:	89fa      	ldrh	r2, [r7, #14]
 80008bc:	2301      	movs	r3, #1
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2319      	movs	r3, #25
 80008c2:	2150      	movs	r1, #80	; 0x50
 80008c4:	205a      	movs	r0, #90	; 0x5a
 80008c6:	f001 fa92 	bl	8001dee <lcd_draw_circle>
            lcd_draw_circle(LAMP_B_RED_X, LAMP_B_RED_Y, blink_color, LAMP_RADIUS, 1);
 80008ca:	89fa      	ldrh	r2, [r7, #14]
 80008cc:	2301      	movs	r3, #1
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2319      	movs	r3, #25
 80008d2:	2150      	movs	r1, #80	; 0x50
 80008d4:	2096      	movs	r0, #150	; 0x96
 80008d6:	f001 fa8a 	bl	8001dee <lcd_draw_circle>
 80008da:	e031      	b.n	8000940 <blink_editing_lamp+0xe0>
        } else if (current_state == STATE_MODE3 || current_state == STATE_GREEN_EDIT) {
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <blink_editing_lamp+0xe8>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b03      	cmp	r3, #3
 80008e2:	d003      	beq.n	80008ec <blink_editing_lamp+0x8c>
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <blink_editing_lamp+0xe8>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b08      	cmp	r3, #8
 80008ea:	d110      	bne.n	800090e <blink_editing_lamp+0xae>
            lcd_draw_circle(LAMP_A_GREEN_X, LAMP_A_GREEN_Y, blink_color, LAMP_RADIUS, 1);
 80008ec:	89fa      	ldrh	r2, [r7, #14]
 80008ee:	2301      	movs	r3, #1
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2319      	movs	r3, #25
 80008f4:	21a0      	movs	r1, #160	; 0xa0
 80008f6:	205a      	movs	r0, #90	; 0x5a
 80008f8:	f001 fa79 	bl	8001dee <lcd_draw_circle>
            lcd_draw_circle(LAMP_B_GREEN_X, LAMP_B_GREEN_Y, blink_color, LAMP_RADIUS, 1);
 80008fc:	89fa      	ldrh	r2, [r7, #14]
 80008fe:	2301      	movs	r3, #1
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	2319      	movs	r3, #25
 8000904:	21a0      	movs	r1, #160	; 0xa0
 8000906:	2096      	movs	r0, #150	; 0x96
 8000908:	f001 fa71 	bl	8001dee <lcd_draw_circle>
 800090c:	e018      	b.n	8000940 <blink_editing_lamp+0xe0>
        } else if (current_state == STATE_MODE4 || current_state == STATE_YELLOW_EDIT) {
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <blink_editing_lamp+0xe8>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b04      	cmp	r3, #4
 8000914:	d003      	beq.n	800091e <blink_editing_lamp+0xbe>
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <blink_editing_lamp+0xe8>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b0a      	cmp	r3, #10
 800091c:	d110      	bne.n	8000940 <blink_editing_lamp+0xe0>
            lcd_draw_circle(LAMP_A_YELLOW_X, LAMP_A_YELLOW_Y, blink_color, LAMP_RADIUS, 1);
 800091e:	89fa      	ldrh	r2, [r7, #14]
 8000920:	2301      	movs	r3, #1
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2319      	movs	r3, #25
 8000926:	21f0      	movs	r1, #240	; 0xf0
 8000928:	205a      	movs	r0, #90	; 0x5a
 800092a:	f001 fa60 	bl	8001dee <lcd_draw_circle>
            lcd_draw_circle(LAMP_B_YELLOW_X, LAMP_B_YELLOW_Y, blink_color, LAMP_RADIUS, 1);
 800092e:	89fa      	ldrh	r2, [r7, #14]
 8000930:	2301      	movs	r3, #1
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2319      	movs	r3, #25
 8000936:	21f0      	movs	r1, #240	; 0xf0
 8000938:	2096      	movs	r0, #150	; 0x96
 800093a:	f001 fa58 	bl	8001dee <lcd_draw_circle>
        }
    }
}
 800093e:	e7ff      	b.n	8000940 <blink_editing_lamp+0xe0>
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000a6 	.word	0x200000a6
 800094c:	200000ae 	.word	0x200000ae

08000950 <show_mode_and_value>:

// Show mode and value on LCD
void show_mode_and_value(const char* mode_str, uint8_t value_A, uint8_t value_B) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af04      	add	r7, sp, #16
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	70fb      	strb	r3, [r7, #3]
 800095c:	4613      	mov	r3, r2
 800095e:	70bb      	strb	r3, [r7, #2]
    // Không xóa vùng, giữ nguyên cách cũ
    // Hiển thị mode ở trên
    lcd_show_string_center(75, STATUS_BAR_Y + 5, (char*)mode_str, WHITE, BLUE, 16, 0);
 8000960:	2300      	movs	r3, #0
 8000962:	9302      	str	r3, [sp, #8]
 8000964:	2310      	movs	r3, #16
 8000966:	9301      	str	r3, [sp, #4]
 8000968:	231f      	movs	r3, #31
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	2119      	movs	r1, #25
 8000974:	204b      	movs	r0, #75	; 0x4b
 8000976:	f001 fb0b 	bl	8001f90 <lcd_show_string_center>

    // Hiển thị hai số đếm A và B ở dưới
    char buffer[16];
    snprintf(buffer, sizeof(buffer), "A:%u s B:%u s", value_A, value_B);
 800097a:	78fa      	ldrb	r2, [r7, #3]
 800097c:	78bb      	ldrb	r3, [r7, #2]
 800097e:	f107 0008 	add.w	r0, r7, #8
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	4613      	mov	r3, r2
 8000986:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <show_mode_and_value+0x64>)
 8000988:	2110      	movs	r1, #16
 800098a:	f004 fa65 	bl	8004e58 <sniprintf>
    lcd_show_string_center(2, 290, buffer, WHITE, BLACK, 16, 0); // Sử dụng BLACK làm nền để nổi bật
 800098e:	f107 0208 	add.w	r2, r7, #8
 8000992:	2300      	movs	r3, #0
 8000994:	9302      	str	r3, [sp, #8]
 8000996:	2310      	movs	r3, #16
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	2300      	movs	r3, #0
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009a2:	f44f 7191 	mov.w	r1, #290	; 0x122
 80009a6:	2002      	movs	r0, #2
 80009a8:	f001 faf2 	bl	8001f90 <lcd_show_string_center>
}
 80009ac:	bf00      	nop
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	080057e0 	.word	0x080057e0

080009b8 <show_mode_and_value_edit>:
// Show mode and value on LCD in edit mode
void show_mode_and_value_edit(const char* mode_str, uint8_t value_A) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af04      	add	r7, sp, #16
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
    // Không xóa vùng, giữ nguyên cách cũ
    // Hiển thị mode ở trên
    lcd_show_string_center(75, STATUS_BAR_Y + 5, (char*)mode_str, WHITE, BLUE, 16, 0);
 80009c4:	2300      	movs	r3, #0
 80009c6:	9302      	str	r3, [sp, #8]
 80009c8:	2310      	movs	r3, #16
 80009ca:	9301      	str	r3, [sp, #4]
 80009cc:	231f      	movs	r3, #31
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	2119      	movs	r1, #25
 80009d8:	204b      	movs	r0, #75	; 0x4b
 80009da:	f001 fad9 	bl	8001f90 <lcd_show_string_center>

    // Hiển thị hai số đếm A và B ở dưới
    char buffer[16];
    snprintf(buffer, sizeof(buffer), "Edit time:%u s", value_A);
 80009de:	78fb      	ldrb	r3, [r7, #3]
 80009e0:	f107 0008 	add.w	r0, r7, #8
 80009e4:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <show_mode_and_value_edit+0x5c>)
 80009e6:	2110      	movs	r1, #16
 80009e8:	f004 fa36 	bl	8004e58 <sniprintf>
    lcd_show_string_center(2, 290, buffer, WHITE, BLACK, 16, 0); // Sử dụng BLACK làm nền để nổi bật
 80009ec:	f107 0208 	add.w	r2, r7, #8
 80009f0:	2300      	movs	r3, #0
 80009f2:	9302      	str	r3, [sp, #8]
 80009f4:	2310      	movs	r3, #16
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	2300      	movs	r3, #0
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a00:	f44f 7191 	mov.w	r1, #290	; 0x122
 8000a04:	2002      	movs	r0, #2
 8000a06:	f001 fac3 	bl	8001f90 <lcd_show_string_center>
}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	080057f0 	.word	0x080057f0

08000a18 <FSM_process>:
//        }
//    }
//}

// Main FSM process
void FSM_process(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
    // Get button flags (using first 3 buttons: 0, 1, 2)
    button1_flag = (button_count[0] == 1);
 8000a1e:	4b90      	ldr	r3, [pc, #576]	; (8000c60 <FSM_process+0x248>)
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	bf0c      	ite	eq
 8000a26:	2301      	moveq	r3, #1
 8000a28:	2300      	movne	r3, #0
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b8d      	ldr	r3, [pc, #564]	; (8000c64 <FSM_process+0x24c>)
 8000a30:	701a      	strb	r2, [r3, #0]
    button2_flag = (button_count[1] == 1 || (button_count[1] > 20 && button_count[1] % 2 == 0));
 8000a32:	4b8b      	ldr	r3, [pc, #556]	; (8000c60 <FSM_process+0x248>)
 8000a34:	885b      	ldrh	r3, [r3, #2]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d00a      	beq.n	8000a50 <FSM_process+0x38>
 8000a3a:	4b89      	ldr	r3, [pc, #548]	; (8000c60 <FSM_process+0x248>)
 8000a3c:	885b      	ldrh	r3, [r3, #2]
 8000a3e:	2b14      	cmp	r3, #20
 8000a40:	d908      	bls.n	8000a54 <FSM_process+0x3c>
 8000a42:	4b87      	ldr	r3, [pc, #540]	; (8000c60 <FSM_process+0x248>)
 8000a44:	885b      	ldrh	r3, [r3, #2]
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d101      	bne.n	8000a54 <FSM_process+0x3c>
 8000a50:	2301      	movs	r3, #1
 8000a52:	e000      	b.n	8000a56 <FSM_process+0x3e>
 8000a54:	2300      	movs	r3, #0
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	4b83      	ldr	r3, [pc, #524]	; (8000c68 <FSM_process+0x250>)
 8000a5a:	701a      	strb	r2, [r3, #0]
    button3_flag = (button_count[2] == 1);
 8000a5c:	4b80      	ldr	r3, [pc, #512]	; (8000c60 <FSM_process+0x248>)
 8000a5e:	889b      	ldrh	r3, [r3, #4]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	bf0c      	ite	eq
 8000a64:	2301      	moveq	r3, #1
 8000a66:	2300      	movne	r3, #0
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b7f      	ldr	r3, [pc, #508]	; (8000c6c <FSM_process+0x254>)
 8000a6e:	701a      	strb	r2, [r3, #0]

    // Accumulate ticks
    tick_count = (tick_count + 1) % 20; // 20*50ms = 1s
 8000a70:	4b7f      	ldr	r3, [pc, #508]	; (8000c70 <FSM_process+0x258>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	1c5a      	adds	r2, r3, #1
 8000a76:	4b7f      	ldr	r3, [pc, #508]	; (8000c74 <FSM_process+0x25c>)
 8000a78:	fb83 1302 	smull	r1, r3, r3, r2
 8000a7c:	10d9      	asrs	r1, r3, #3
 8000a7e:	17d3      	asrs	r3, r2, #31
 8000a80:	1ac9      	subs	r1, r1, r3
 8000a82:	460b      	mov	r3, r1
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	440b      	add	r3, r1
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	1ad1      	subs	r1, r2, r3
 8000a8c:	b2ca      	uxtb	r2, r1
 8000a8e:	4b78      	ldr	r3, [pc, #480]	; (8000c70 <FSM_process+0x258>)
 8000a90:	701a      	strb	r2, [r3, #0]
    blink_count = (blink_count + 1) % 10; // 10*50ms = 0.5s blink
 8000a92:	4b79      	ldr	r3, [pc, #484]	; (8000c78 <FSM_process+0x260>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	4b76      	ldr	r3, [pc, #472]	; (8000c74 <FSM_process+0x25c>)
 8000a9a:	fb83 1302 	smull	r1, r3, r3, r2
 8000a9e:	1099      	asrs	r1, r3, #2
 8000aa0:	17d3      	asrs	r3, r2, #31
 8000aa2:	1ac9      	subs	r1, r1, r3
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	1ad1      	subs	r1, r2, r3
 8000aae:	b2ca      	uxtb	r2, r1
 8000ab0:	4b71      	ldr	r3, [pc, #452]	; (8000c78 <FSM_process+0x260>)
 8000ab2:	701a      	strb	r2, [r3, #0]
    if (blink_count == 0) blink_flag ^= 1;
 8000ab4:	4b70      	ldr	r3, [pc, #448]	; (8000c78 <FSM_process+0x260>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d106      	bne.n	8000aca <FSM_process+0xb2>
 8000abc:	4b6f      	ldr	r3, [pc, #444]	; (8000c7c <FSM_process+0x264>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	f083 0301 	eor.w	r3, r3, #1
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4b6d      	ldr	r3, [pc, #436]	; (8000c7c <FSM_process+0x264>)
 8000ac8:	701a      	strb	r2, [r3, #0]

    // 1s flag for sch_counter decrement
    uint8_t second_flag = (tick_count == 0);
 8000aca:	4b69      	ldr	r3, [pc, #420]	; (8000c70 <FSM_process+0x258>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2301      	moveq	r3, #1
 8000ad4:	2300      	movne	r3, #0
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	71fb      	strb	r3, [r7, #7]

    switch (current_state) {
 8000ada:	4b69      	ldr	r3, [pc, #420]	; (8000c80 <FSM_process+0x268>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b17      	cmp	r3, #23
 8000ae0:	f200 8406 	bhi.w	80012f0 <FSM_process+0x8d8>
 8000ae4:	a201      	add	r2, pc, #4	; (adr r2, 8000aec <FSM_process+0xd4>)
 8000ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aea:	bf00      	nop
 8000aec:	08000b4d 	.word	0x08000b4d
 8000af0:	08000b79 	.word	0x08000b79
 8000af4:	08000e65 	.word	0x08000e65
 8000af8:	08000f85 	.word	0x08000f85
 8000afc:	08001067 	.word	0x08001067
 8000b00:	08001143 	.word	0x08001143
 8000b04:	08000eb3 	.word	0x08000eb3
 8000b08:	08000f3d 	.word	0x08000f3d
 8000b0c:	08000fcb 	.word	0x08000fcb
 8000b10:	0800101f 	.word	0x0800101f
 8000b14:	080010ad 	.word	0x080010ad
 8000b18:	08001101 	.word	0x08001101
 8000b1c:	08001191 	.word	0x08001191
 8000b20:	0800120d 	.word	0x0800120d
 8000b24:	08001243 	.word	0x08001243
 8000b28:	08001279 	.word	0x08001279
 8000b2c:	080012f1 	.word	0x080012f1
 8000b30:	080012f1 	.word	0x080012f1
 8000b34:	080012f1 	.word	0x080012f1
 8000b38:	080012f1 	.word	0x080012f1
 8000b3c:	08000bcd 	.word	0x08000bcd
 8000b40:	08000ca1 	.word	0x08000ca1
 8000b44:	08000d3d 	.word	0x08000d3d
 8000b48:	08000dd1 	.word	0x08000dd1
        case STATE_INIT:
            show_mode_and_value("INIT       ", 0, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	484c      	ldr	r0, [pc, #304]	; (8000c84 <FSM_process+0x26c>)
 8000b52:	f7ff fefd 	bl	8000950 <show_mode_and_value>
            draw_lamps_off(); // Only draw lamps off, no blinking
 8000b56:	f7ff fd89 	bl	800066c <draw_lamps_off>
            sch_counter_A = 0; // Start with 3s for both
 8000b5a:	4b4b      	ldr	r3, [pc, #300]	; (8000c88 <FSM_process+0x270>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	801a      	strh	r2, [r3, #0]
            sch_counter_B = 0;
 8000b60:	4b4a      	ldr	r3, [pc, #296]	; (8000c8c <FSM_process+0x274>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	801a      	strh	r2, [r3, #0]
            if (button1_flag) {
 8000b66:	4b3f      	ldr	r3, [pc, #252]	; (8000c64 <FSM_process+0x24c>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f000 839f 	beq.w	80012ae <FSM_process+0x896>
                current_state = STATE_MODE1;
 8000b70:	4b43      	ldr	r3, [pc, #268]	; (8000c80 <FSM_process+0x268>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000b76:	e39a      	b.n	80012ae <FSM_process+0x896>

        case STATE_MODE1:
            if (sch_counter_A == 0 && sch_counter_B == 0) {
 8000b78:	4b43      	ldr	r3, [pc, #268]	; (8000c88 <FSM_process+0x270>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d112      	bne.n	8000ba6 <FSM_process+0x18e>
 8000b80:	4b42      	ldr	r3, [pc, #264]	; (8000c8c <FSM_process+0x274>)
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d10e      	bne.n	8000ba6 <FSM_process+0x18e>
                current_state = STATE_A_RED_B_GREEN;
 8000b88:	4b3d      	ldr	r3, [pc, #244]	; (8000c80 <FSM_process+0x268>)
 8000b8a:	2214      	movs	r2, #20
 8000b8c:	701a      	strb	r2, [r3, #0]
                sch_counter_A = red_duration;   // 5s for A
 8000b8e:	4b40      	ldr	r3, [pc, #256]	; (8000c90 <FSM_process+0x278>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	4b3c      	ldr	r3, [pc, #240]	; (8000c88 <FSM_process+0x270>)
 8000b96:	801a      	strh	r2, [r3, #0]
                sch_counter_B = green_duration; // 3s for B
 8000b98:	4b3e      	ldr	r3, [pc, #248]	; (8000c94 <FSM_process+0x27c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	4b3b      	ldr	r3, [pc, #236]	; (8000c8c <FSM_process+0x274>)
 8000ba0:	801a      	strh	r2, [r3, #0]
                draw_lamps_off();
 8000ba2:	f7ff fd63 	bl	800066c <draw_lamps_off>
            }
            show_mode_and_value("MODE 1     ", sch_counter_A, sch_counter_B);
 8000ba6:	4b38      	ldr	r3, [pc, #224]	; (8000c88 <FSM_process+0x270>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	4a37      	ldr	r2, [pc, #220]	; (8000c8c <FSM_process+0x274>)
 8000bae:	8812      	ldrh	r2, [r2, #0]
 8000bb0:	b2d2      	uxtb	r2, r2
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4838      	ldr	r0, [pc, #224]	; (8000c98 <FSM_process+0x280>)
 8000bb6:	f7ff fecb 	bl	8000950 <show_mode_and_value>
            if (button1_flag) current_state = STATE_MODE2;
 8000bba:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <FSM_process+0x24c>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f000 8377 	beq.w	80012b2 <FSM_process+0x89a>
 8000bc4:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <FSM_process+0x268>)
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	701a      	strb	r2, [r3, #0]
            break;
 8000bca:	e372      	b.n	80012b2 <FSM_process+0x89a>

        case STATE_A_RED_B_GREEN:
            set_lamps(STATE_A_RED_B_GREEN);
 8000bcc:	2014      	movs	r0, #20
 8000bce:	f7ff fd83 	bl	80006d8 <set_lamps>
            show_mode_and_value("MODE 1     ", sch_counter_A, sch_counter_B);
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <FSM_process+0x270>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	4a2c      	ldr	r2, [pc, #176]	; (8000c8c <FSM_process+0x274>)
 8000bda:	8812      	ldrh	r2, [r2, #0]
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	4619      	mov	r1, r3
 8000be0:	482d      	ldr	r0, [pc, #180]	; (8000c98 <FSM_process+0x280>)
 8000be2:	f7ff feb5 	bl	8000950 <show_mode_and_value>
            if (second_flag && sch_counter_A > 0) sch_counter_A--;
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d009      	beq.n	8000c00 <FSM_process+0x1e8>
 8000bec:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <FSM_process+0x270>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d005      	beq.n	8000c00 <FSM_process+0x1e8>
 8000bf4:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <FSM_process+0x270>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <FSM_process+0x270>)
 8000bfe:	801a      	strh	r2, [r3, #0]
            if (second_flag && sch_counter_B > 0) sch_counter_B--;
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d009      	beq.n	8000c1a <FSM_process+0x202>
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <FSM_process+0x274>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d005      	beq.n	8000c1a <FSM_process+0x202>
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <FSM_process+0x274>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <FSM_process+0x274>)
 8000c18:	801a      	strh	r2, [r3, #0]
            if (sch_counter_B == 0) {
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <FSM_process+0x274>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d10f      	bne.n	8000c42 <FSM_process+0x22a>
                current_state = STATE_A_RED_B_YELLOW;
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <FSM_process+0x268>)
 8000c24:	2215      	movs	r2, #21
 8000c26:	701a      	strb	r2, [r3, #0]
                sch_counter_A = yellow_duration;
 8000c28:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <FSM_process+0x284>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <FSM_process+0x270>)
 8000c30:	801a      	strh	r2, [r3, #0]
                sch_counter_B = yellow_duration; // 2s for B
 8000c32:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <FSM_process+0x284>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <FSM_process+0x274>)
 8000c3a:	801a      	strh	r2, [r3, #0]
                draw_lamps_off();
 8000c3c:	f7ff fd16 	bl	800066c <draw_lamps_off>
            } else if (button1_flag) {
                current_state = STATE_MODE2;
                lcd_clear(WHITE);
                draw_lamps_off();
            }
            break;
 8000c40:	e339      	b.n	80012b6 <FSM_process+0x89e>
            } else if (button1_flag) {
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <FSM_process+0x24c>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f000 8335 	beq.w	80012b6 <FSM_process+0x89e>
                current_state = STATE_MODE2;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <FSM_process+0x268>)
 8000c4e:	2202      	movs	r2, #2
 8000c50:	701a      	strb	r2, [r3, #0]
                lcd_clear(WHITE);
 8000c52:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c56:	f000 fda1 	bl	800179c <lcd_clear>
                draw_lamps_off();
 8000c5a:	f7ff fd07 	bl	800066c <draw_lamps_off>
            break;
 8000c5e:	e32a      	b.n	80012b6 <FSM_process+0x89e>
 8000c60:	20000084 	.word	0x20000084
 8000c64:	200000af 	.word	0x200000af
 8000c68:	200000b0 	.word	0x200000b0
 8000c6c:	200000b1 	.word	0x200000b1
 8000c70:	200000ac 	.word	0x200000ac
 8000c74:	66666667 	.word	0x66666667
 8000c78:	200000ad 	.word	0x200000ad
 8000c7c:	200000ae 	.word	0x200000ae
 8000c80:	200000a6 	.word	0x200000a6
 8000c84:	08005800 	.word	0x08005800
 8000c88:	200000a8 	.word	0x200000a8
 8000c8c:	200000aa 	.word	0x200000aa
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000001 	.word	0x20000001
 8000c98:	0800580c 	.word	0x0800580c
 8000c9c:	20000002 	.word	0x20000002

        case STATE_A_RED_B_YELLOW:
            set_lamps(STATE_A_RED_B_YELLOW);
 8000ca0:	2015      	movs	r0, #21
 8000ca2:	f7ff fd19 	bl	80006d8 <set_lamps>
            show_mode_and_value("MODE 1     ", sch_counter_A, sch_counter_B);
 8000ca6:	4b98      	ldr	r3, [pc, #608]	; (8000f08 <FSM_process+0x4f0>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	4a97      	ldr	r2, [pc, #604]	; (8000f0c <FSM_process+0x4f4>)
 8000cae:	8812      	ldrh	r2, [r2, #0]
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4896      	ldr	r0, [pc, #600]	; (8000f10 <FSM_process+0x4f8>)
 8000cb6:	f7ff fe4b 	bl	8000950 <show_mode_and_value>
            if (second_flag && sch_counter_A > 0) sch_counter_A--;
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d009      	beq.n	8000cd4 <FSM_process+0x2bc>
 8000cc0:	4b91      	ldr	r3, [pc, #580]	; (8000f08 <FSM_process+0x4f0>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d005      	beq.n	8000cd4 <FSM_process+0x2bc>
 8000cc8:	4b8f      	ldr	r3, [pc, #572]	; (8000f08 <FSM_process+0x4f0>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	4b8d      	ldr	r3, [pc, #564]	; (8000f08 <FSM_process+0x4f0>)
 8000cd2:	801a      	strh	r2, [r3, #0]
            if (second_flag && sch_counter_B > 0) sch_counter_B--;
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d009      	beq.n	8000cee <FSM_process+0x2d6>
 8000cda:	4b8c      	ldr	r3, [pc, #560]	; (8000f0c <FSM_process+0x4f4>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d005      	beq.n	8000cee <FSM_process+0x2d6>
 8000ce2:	4b8a      	ldr	r3, [pc, #552]	; (8000f0c <FSM_process+0x4f4>)
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	4b88      	ldr	r3, [pc, #544]	; (8000f0c <FSM_process+0x4f4>)
 8000cec:	801a      	strh	r2, [r3, #0]
            if (sch_counter_B == 0 && sch_counter_B == 0) {
 8000cee:	4b87      	ldr	r3, [pc, #540]	; (8000f0c <FSM_process+0x4f4>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d113      	bne.n	8000d1e <FSM_process+0x306>
 8000cf6:	4b85      	ldr	r3, [pc, #532]	; (8000f0c <FSM_process+0x4f4>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d10f      	bne.n	8000d1e <FSM_process+0x306>
                sch_counter_A = green_duration;   // 5s for A
 8000cfe:	4b85      	ldr	r3, [pc, #532]	; (8000f14 <FSM_process+0x4fc>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	4b80      	ldr	r3, [pc, #512]	; (8000f08 <FSM_process+0x4f0>)
 8000d06:	801a      	strh	r2, [r3, #0]
                sch_counter_B = red_duration;   // 3s for B (reset)
 8000d08:	4b83      	ldr	r3, [pc, #524]	; (8000f18 <FSM_process+0x500>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	4b7f      	ldr	r3, [pc, #508]	; (8000f0c <FSM_process+0x4f4>)
 8000d10:	801a      	strh	r2, [r3, #0]
                current_state = STATE_A_GREEN_B_RED;
 8000d12:	4b82      	ldr	r3, [pc, #520]	; (8000f1c <FSM_process+0x504>)
 8000d14:	2216      	movs	r2, #22
 8000d16:	701a      	strb	r2, [r3, #0]
                draw_lamps_off();
 8000d18:	f7ff fca8 	bl	800066c <draw_lamps_off>
            } else if (button1_flag) {
                current_state = STATE_MODE2;
                lcd_clear(WHITE);
                draw_lamps_off();
            }
            break;
 8000d1c:	e2cd      	b.n	80012ba <FSM_process+0x8a2>
            } else if (button1_flag) {
 8000d1e:	4b80      	ldr	r3, [pc, #512]	; (8000f20 <FSM_process+0x508>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f000 82c9 	beq.w	80012ba <FSM_process+0x8a2>
                current_state = STATE_MODE2;
 8000d28:	4b7c      	ldr	r3, [pc, #496]	; (8000f1c <FSM_process+0x504>)
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	701a      	strb	r2, [r3, #0]
                lcd_clear(WHITE);
 8000d2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d32:	f000 fd33 	bl	800179c <lcd_clear>
                draw_lamps_off();
 8000d36:	f7ff fc99 	bl	800066c <draw_lamps_off>
            break;
 8000d3a:	e2be      	b.n	80012ba <FSM_process+0x8a2>

        case STATE_A_GREEN_B_RED:
            set_lamps(STATE_A_GREEN_B_RED);
 8000d3c:	2016      	movs	r0, #22
 8000d3e:	f7ff fccb 	bl	80006d8 <set_lamps>
            show_mode_and_value("MODE 1     ", sch_counter_A, sch_counter_B);
 8000d42:	4b71      	ldr	r3, [pc, #452]	; (8000f08 <FSM_process+0x4f0>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	4a70      	ldr	r2, [pc, #448]	; (8000f0c <FSM_process+0x4f4>)
 8000d4a:	8812      	ldrh	r2, [r2, #0]
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	4619      	mov	r1, r3
 8000d50:	486f      	ldr	r0, [pc, #444]	; (8000f10 <FSM_process+0x4f8>)
 8000d52:	f7ff fdfd 	bl	8000950 <show_mode_and_value>
            if (second_flag && sch_counter_A > 0) sch_counter_A--;
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d009      	beq.n	8000d70 <FSM_process+0x358>
 8000d5c:	4b6a      	ldr	r3, [pc, #424]	; (8000f08 <FSM_process+0x4f0>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d005      	beq.n	8000d70 <FSM_process+0x358>
 8000d64:	4b68      	ldr	r3, [pc, #416]	; (8000f08 <FSM_process+0x4f0>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	4b66      	ldr	r3, [pc, #408]	; (8000f08 <FSM_process+0x4f0>)
 8000d6e:	801a      	strh	r2, [r3, #0]
            if (second_flag && sch_counter_B > 0) sch_counter_B--;
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d009      	beq.n	8000d8a <FSM_process+0x372>
 8000d76:	4b65      	ldr	r3, [pc, #404]	; (8000f0c <FSM_process+0x4f4>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d005      	beq.n	8000d8a <FSM_process+0x372>
 8000d7e:	4b63      	ldr	r3, [pc, #396]	; (8000f0c <FSM_process+0x4f4>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	4b61      	ldr	r3, [pc, #388]	; (8000f0c <FSM_process+0x4f4>)
 8000d88:	801a      	strh	r2, [r3, #0]
            if (sch_counter_A == 0) {
 8000d8a:	4b5f      	ldr	r3, [pc, #380]	; (8000f08 <FSM_process+0x4f0>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10f      	bne.n	8000db2 <FSM_process+0x39a>
                current_state = STATE_A_YELLOW_B_RED;
 8000d92:	4b62      	ldr	r3, [pc, #392]	; (8000f1c <FSM_process+0x504>)
 8000d94:	2217      	movs	r2, #23
 8000d96:	701a      	strb	r2, [r3, #0]
                sch_counter_A = yellow_duration;
 8000d98:	4b62      	ldr	r3, [pc, #392]	; (8000f24 <FSM_process+0x50c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	4b5a      	ldr	r3, [pc, #360]	; (8000f08 <FSM_process+0x4f0>)
 8000da0:	801a      	strh	r2, [r3, #0]
                sch_counter_B = yellow_duration;
 8000da2:	4b60      	ldr	r3, [pc, #384]	; (8000f24 <FSM_process+0x50c>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	4b58      	ldr	r3, [pc, #352]	; (8000f0c <FSM_process+0x4f4>)
 8000daa:	801a      	strh	r2, [r3, #0]
                draw_lamps_off();
 8000dac:	f7ff fc5e 	bl	800066c <draw_lamps_off>
            } else if (button1_flag) {
                current_state = STATE_MODE2;
                lcd_clear(WHITE);
                draw_lamps_off();
            }
            break;
 8000db0:	e285      	b.n	80012be <FSM_process+0x8a6>
            } else if (button1_flag) {
 8000db2:	4b5b      	ldr	r3, [pc, #364]	; (8000f20 <FSM_process+0x508>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f000 8281 	beq.w	80012be <FSM_process+0x8a6>
                current_state = STATE_MODE2;
 8000dbc:	4b57      	ldr	r3, [pc, #348]	; (8000f1c <FSM_process+0x504>)
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	701a      	strb	r2, [r3, #0]
                lcd_clear(WHITE);
 8000dc2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000dc6:	f000 fce9 	bl	800179c <lcd_clear>
                draw_lamps_off();
 8000dca:	f7ff fc4f 	bl	800066c <draw_lamps_off>
            break;
 8000dce:	e276      	b.n	80012be <FSM_process+0x8a6>

        case STATE_A_YELLOW_B_RED:
            set_lamps(STATE_A_YELLOW_B_RED);
 8000dd0:	2017      	movs	r0, #23
 8000dd2:	f7ff fc81 	bl	80006d8 <set_lamps>
            show_mode_and_value("MODE 1      ", sch_counter_A, sch_counter_B);
 8000dd6:	4b4c      	ldr	r3, [pc, #304]	; (8000f08 <FSM_process+0x4f0>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	4a4b      	ldr	r2, [pc, #300]	; (8000f0c <FSM_process+0x4f4>)
 8000dde:	8812      	ldrh	r2, [r2, #0]
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	4619      	mov	r1, r3
 8000de4:	4850      	ldr	r0, [pc, #320]	; (8000f28 <FSM_process+0x510>)
 8000de6:	f7ff fdb3 	bl	8000950 <show_mode_and_value>
            if (second_flag && sch_counter_A > 0) sch_counter_A--;
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d009      	beq.n	8000e04 <FSM_process+0x3ec>
 8000df0:	4b45      	ldr	r3, [pc, #276]	; (8000f08 <FSM_process+0x4f0>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d005      	beq.n	8000e04 <FSM_process+0x3ec>
 8000df8:	4b43      	ldr	r3, [pc, #268]	; (8000f08 <FSM_process+0x4f0>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	4b41      	ldr	r3, [pc, #260]	; (8000f08 <FSM_process+0x4f0>)
 8000e02:	801a      	strh	r2, [r3, #0]
            if (second_flag && sch_counter_B > 0) sch_counter_B--;
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d009      	beq.n	8000e1e <FSM_process+0x406>
 8000e0a:	4b40      	ldr	r3, [pc, #256]	; (8000f0c <FSM_process+0x4f4>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d005      	beq.n	8000e1e <FSM_process+0x406>
 8000e12:	4b3e      	ldr	r3, [pc, #248]	; (8000f0c <FSM_process+0x4f4>)
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	4b3c      	ldr	r3, [pc, #240]	; (8000f0c <FSM_process+0x4f4>)
 8000e1c:	801a      	strh	r2, [r3, #0]
            if (sch_counter_A == 0) {
 8000e1e:	4b3a      	ldr	r3, [pc, #232]	; (8000f08 <FSM_process+0x4f0>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10f      	bne.n	8000e46 <FSM_process+0x42e>
                sch_counter_A = red_duration;
 8000e26:	4b3c      	ldr	r3, [pc, #240]	; (8000f18 <FSM_process+0x500>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	4b36      	ldr	r3, [pc, #216]	; (8000f08 <FSM_process+0x4f0>)
 8000e2e:	801a      	strh	r2, [r3, #0]
                sch_counter_B = green_duration;
 8000e30:	4b38      	ldr	r3, [pc, #224]	; (8000f14 <FSM_process+0x4fc>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	4b35      	ldr	r3, [pc, #212]	; (8000f0c <FSM_process+0x4f4>)
 8000e38:	801a      	strh	r2, [r3, #0]
                current_state = STATE_A_RED_B_GREEN;
 8000e3a:	4b38      	ldr	r3, [pc, #224]	; (8000f1c <FSM_process+0x504>)
 8000e3c:	2214      	movs	r2, #20
 8000e3e:	701a      	strb	r2, [r3, #0]
                draw_lamps_off();
 8000e40:	f7ff fc14 	bl	800066c <draw_lamps_off>
                current_state = STATE_MODE2;
                lcd_clear(WHITE);
                draw_lamps_off();

            }
            break;
 8000e44:	e23d      	b.n	80012c2 <FSM_process+0x8aa>
            } else if (button1_flag) {
 8000e46:	4b36      	ldr	r3, [pc, #216]	; (8000f20 <FSM_process+0x508>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 8239 	beq.w	80012c2 <FSM_process+0x8aa>
                current_state = STATE_MODE2;
 8000e50:	4b32      	ldr	r3, [pc, #200]	; (8000f1c <FSM_process+0x504>)
 8000e52:	2202      	movs	r2, #2
 8000e54:	701a      	strb	r2, [r3, #0]
                lcd_clear(WHITE);
 8000e56:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e5a:	f000 fc9f 	bl	800179c <lcd_clear>
                draw_lamps_off();
 8000e5e:	f7ff fc05 	bl	800066c <draw_lamps_off>
            break;
 8000e62:	e22e      	b.n	80012c2 <FSM_process+0x8aa>

        case STATE_MODE2:
            show_mode_and_value_edit("MODE 2      ", red_duration);
 8000e64:	4b2c      	ldr	r3, [pc, #176]	; (8000f18 <FSM_process+0x500>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4830      	ldr	r0, [pc, #192]	; (8000f2c <FSM_process+0x514>)
 8000e6c:	f7ff fda4 	bl	80009b8 <show_mode_and_value_edit>
            blink_editing_lamp(RED); // Blink red lamps 0.5s
 8000e70:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000e74:	f7ff fcf4 	bl	8000860 <blink_editing_lamp>
            if (button1_flag) {
 8000e78:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <FSM_process+0x508>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d009      	beq.n	8000e94 <FSM_process+0x47c>
                current_state = STATE_MODE3;
 8000e80:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <FSM_process+0x504>)
 8000e82:	2203      	movs	r2, #3
 8000e84:	701a      	strb	r2, [r3, #0]
                lcd_clear(WHITE);
 8000e86:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e8a:	f000 fc87 	bl	800179c <lcd_clear>
                draw_lamps_off();
 8000e8e:	f7ff fbed 	bl	800066c <draw_lamps_off>
            } else if (button2_flag) {
                current_state = STATE_RED_EDIT;
                lcd_clear(WHITE);
                draw_lamps_off();
            }
            break;
 8000e92:	e218      	b.n	80012c6 <FSM_process+0x8ae>
            } else if (button2_flag) {
 8000e94:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <FSM_process+0x518>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f000 8214 	beq.w	80012c6 <FSM_process+0x8ae>
                current_state = STATE_RED_EDIT;
 8000e9e:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <FSM_process+0x504>)
 8000ea0:	2206      	movs	r2, #6
 8000ea2:	701a      	strb	r2, [r3, #0]
                lcd_clear(WHITE);
 8000ea4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ea8:	f000 fc78 	bl	800179c <lcd_clear>
                draw_lamps_off();
 8000eac:	f7ff fbde 	bl	800066c <draw_lamps_off>
            break;
 8000eb0:	e209      	b.n	80012c6 <FSM_process+0x8ae>

        case STATE_RED_EDIT:
            show_mode_and_value_edit("MODE 2      ", red_duration);
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <FSM_process+0x500>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	481c      	ldr	r0, [pc, #112]	; (8000f2c <FSM_process+0x514>)
 8000eba:	f7ff fd7d 	bl	80009b8 <show_mode_and_value_edit>
            if (button2_flag) red_duration = (red_duration % 99) + 1;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <FSM_process+0x518>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d010      	beq.n	8000ee8 <FSM_process+0x4d0>
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <FSM_process+0x500>)
 8000ec8:	781a      	ldrb	r2, [r3, #0]
 8000eca:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <FSM_process+0x51c>)
 8000ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8000ed0:	0999      	lsrs	r1, r3, #6
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	440b      	add	r3, r1
 8000ed8:	0159      	lsls	r1, r3, #5
 8000eda:	440b      	add	r3, r1
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <FSM_process+0x500>)
 8000ee6:	701a      	strb	r2, [r3, #0]
            if (button3_flag) current_state = STATE_RED_SAVE;
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <FSM_process+0x520>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <FSM_process+0x4de>
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <FSM_process+0x504>)
 8000ef2:	2207      	movs	r2, #7
 8000ef4:	701a      	strb	r2, [r3, #0]
            blink_editing_lamp(RED); // Continue blinking red lamps
 8000ef6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000efa:	f7ff fcb1 	bl	8000860 <blink_editing_lamp>
            sch_counter_A = 3;
 8000efe:	4b02      	ldr	r3, [pc, #8]	; (8000f08 <FSM_process+0x4f0>)
 8000f00:	2203      	movs	r2, #3
 8000f02:	801a      	strh	r2, [r3, #0]
            break;
 8000f04:	e1f4      	b.n	80012f0 <FSM_process+0x8d8>
 8000f06:	bf00      	nop
 8000f08:	200000a8 	.word	0x200000a8
 8000f0c:	200000aa 	.word	0x200000aa
 8000f10:	0800580c 	.word	0x0800580c
 8000f14:	20000001 	.word	0x20000001
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	200000a6 	.word	0x200000a6
 8000f20:	200000af 	.word	0x200000af
 8000f24:	20000002 	.word	0x20000002
 8000f28:	08005818 	.word	0x08005818
 8000f2c:	08005828 	.word	0x08005828
 8000f30:	200000b0 	.word	0x200000b0
 8000f34:	a57eb503 	.word	0xa57eb503
 8000f38:	200000b1 	.word	0x200000b1

        case STATE_RED_SAVE:
            show_mode_and_value_edit("MODE 2-SAVE      ", red_duration);
 8000f3c:	4ba2      	ldr	r3, [pc, #648]	; (80011c8 <FSM_process+0x7b0>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	48a2      	ldr	r0, [pc, #648]	; (80011cc <FSM_process+0x7b4>)
 8000f44:	f7ff fd38 	bl	80009b8 <show_mode_and_value_edit>
            if (second_flag && sch_counter_A > 0) sch_counter_A--;
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d009      	beq.n	8000f62 <FSM_process+0x54a>
 8000f4e:	4ba0      	ldr	r3, [pc, #640]	; (80011d0 <FSM_process+0x7b8>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d005      	beq.n	8000f62 <FSM_process+0x54a>
 8000f56:	4b9e      	ldr	r3, [pc, #632]	; (80011d0 <FSM_process+0x7b8>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	4b9c      	ldr	r3, [pc, #624]	; (80011d0 <FSM_process+0x7b8>)
 8000f60:	801a      	strh	r2, [r3, #0]
            if (second_flag && sch_counter_A == 0) {
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f000 81b0 	beq.w	80012ca <FSM_process+0x8b2>
 8000f6a:	4b99      	ldr	r3, [pc, #612]	; (80011d0 <FSM_process+0x7b8>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f040 81ab 	bne.w	80012ca <FSM_process+0x8b2>
            	current_state = STATE_INIT;
 8000f74:	4b97      	ldr	r3, [pc, #604]	; (80011d4 <FSM_process+0x7bc>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
            	lcd_clear(WHITE);
 8000f7a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f7e:	f000 fc0d 	bl	800179c <lcd_clear>
            }
            break;
 8000f82:	e1a2      	b.n	80012ca <FSM_process+0x8b2>

        case STATE_MODE3:
            show_mode_and_value_edit("MODE 3      ", green_duration);
 8000f84:	4b94      	ldr	r3, [pc, #592]	; (80011d8 <FSM_process+0x7c0>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4894      	ldr	r0, [pc, #592]	; (80011dc <FSM_process+0x7c4>)
 8000f8c:	f7ff fd14 	bl	80009b8 <show_mode_and_value_edit>
            blink_editing_lamp(GREEN); // Blink green lamps 0.5s
 8000f90:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000f94:	f7ff fc64 	bl	8000860 <blink_editing_lamp>
            if (button1_flag) {
 8000f98:	4b91      	ldr	r3, [pc, #580]	; (80011e0 <FSM_process+0x7c8>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d009      	beq.n	8000fb4 <FSM_process+0x59c>
                current_state = STATE_MODE4;
 8000fa0:	4b8c      	ldr	r3, [pc, #560]	; (80011d4 <FSM_process+0x7bc>)
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	701a      	strb	r2, [r3, #0]
                lcd_clear(WHITE);
 8000fa6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000faa:	f000 fbf7 	bl	800179c <lcd_clear>
                draw_lamps_off();
 8000fae:	f7ff fb5d 	bl	800066c <draw_lamps_off>
            } else if (button2_flag) {
                current_state = STATE_GREEN_EDIT;
                draw_lamps_off();
            }
            break;
 8000fb2:	e18c      	b.n	80012ce <FSM_process+0x8b6>
            } else if (button2_flag) {
 8000fb4:	4b8b      	ldr	r3, [pc, #556]	; (80011e4 <FSM_process+0x7cc>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 8188 	beq.w	80012ce <FSM_process+0x8b6>
                current_state = STATE_GREEN_EDIT;
 8000fbe:	4b85      	ldr	r3, [pc, #532]	; (80011d4 <FSM_process+0x7bc>)
 8000fc0:	2208      	movs	r2, #8
 8000fc2:	701a      	strb	r2, [r3, #0]
                draw_lamps_off();
 8000fc4:	f7ff fb52 	bl	800066c <draw_lamps_off>
            break;
 8000fc8:	e181      	b.n	80012ce <FSM_process+0x8b6>

        case STATE_GREEN_EDIT:
        	show_mode_and_value_edit("MODE 3      ", green_duration);
 8000fca:	4b83      	ldr	r3, [pc, #524]	; (80011d8 <FSM_process+0x7c0>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4882      	ldr	r0, [pc, #520]	; (80011dc <FSM_process+0x7c4>)
 8000fd2:	f7ff fcf1 	bl	80009b8 <show_mode_and_value_edit>
            if (button2_flag) green_duration = (green_duration % 99) + 1;
 8000fd6:	4b83      	ldr	r3, [pc, #524]	; (80011e4 <FSM_process+0x7cc>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d010      	beq.n	8001000 <FSM_process+0x5e8>
 8000fde:	4b7e      	ldr	r3, [pc, #504]	; (80011d8 <FSM_process+0x7c0>)
 8000fe0:	781a      	ldrb	r2, [r3, #0]
 8000fe2:	4b81      	ldr	r3, [pc, #516]	; (80011e8 <FSM_process+0x7d0>)
 8000fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8000fe8:	0999      	lsrs	r1, r3, #6
 8000fea:	460b      	mov	r3, r1
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	440b      	add	r3, r1
 8000ff0:	0159      	lsls	r1, r3, #5
 8000ff2:	440b      	add	r3, r1
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	4b76      	ldr	r3, [pc, #472]	; (80011d8 <FSM_process+0x7c0>)
 8000ffe:	701a      	strb	r2, [r3, #0]
            if (button3_flag) current_state = STATE_GREEN_SAVE;
 8001000:	4b7a      	ldr	r3, [pc, #488]	; (80011ec <FSM_process+0x7d4>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d002      	beq.n	800100e <FSM_process+0x5f6>
 8001008:	4b72      	ldr	r3, [pc, #456]	; (80011d4 <FSM_process+0x7bc>)
 800100a:	2209      	movs	r2, #9
 800100c:	701a      	strb	r2, [r3, #0]
            blink_editing_lamp(GREEN); // Continue blinking green lamps
 800100e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001012:	f7ff fc25 	bl	8000860 <blink_editing_lamp>
            sch_counter_B = 3;
 8001016:	4b76      	ldr	r3, [pc, #472]	; (80011f0 <FSM_process+0x7d8>)
 8001018:	2203      	movs	r2, #3
 800101a:	801a      	strh	r2, [r3, #0]
            break;
 800101c:	e168      	b.n	80012f0 <FSM_process+0x8d8>

        case STATE_GREEN_SAVE:
            show_mode_and_value_edit("MODE 3-SAVE      ", green_duration);
 800101e:	4b6e      	ldr	r3, [pc, #440]	; (80011d8 <FSM_process+0x7c0>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	4619      	mov	r1, r3
 8001024:	4873      	ldr	r0, [pc, #460]	; (80011f4 <FSM_process+0x7dc>)
 8001026:	f7ff fcc7 	bl	80009b8 <show_mode_and_value_edit>
            if (second_flag && sch_counter_B > 0) sch_counter_B--;
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d009      	beq.n	8001044 <FSM_process+0x62c>
 8001030:	4b6f      	ldr	r3, [pc, #444]	; (80011f0 <FSM_process+0x7d8>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d005      	beq.n	8001044 <FSM_process+0x62c>
 8001038:	4b6d      	ldr	r3, [pc, #436]	; (80011f0 <FSM_process+0x7d8>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	3b01      	subs	r3, #1
 800103e:	b29a      	uxth	r2, r3
 8001040:	4b6b      	ldr	r3, [pc, #428]	; (80011f0 <FSM_process+0x7d8>)
 8001042:	801a      	strh	r2, [r3, #0]
            if (second_flag && sch_counter_B == 0) {
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 8143 	beq.w	80012d2 <FSM_process+0x8ba>
 800104c:	4b68      	ldr	r3, [pc, #416]	; (80011f0 <FSM_process+0x7d8>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	f040 813e 	bne.w	80012d2 <FSM_process+0x8ba>
            	current_state = STATE_INIT;
 8001056:	4b5f      	ldr	r3, [pc, #380]	; (80011d4 <FSM_process+0x7bc>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
                lcd_clear(WHITE);
 800105c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001060:	f000 fb9c 	bl	800179c <lcd_clear>
            }
            break;
 8001064:	e135      	b.n	80012d2 <FSM_process+0x8ba>

        case STATE_MODE4:
        	show_mode_and_value_edit("MODE 4      ", yellow_duration);
 8001066:	4b64      	ldr	r3, [pc, #400]	; (80011f8 <FSM_process+0x7e0>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	4619      	mov	r1, r3
 800106c:	4863      	ldr	r0, [pc, #396]	; (80011fc <FSM_process+0x7e4>)
 800106e:	f7ff fca3 	bl	80009b8 <show_mode_and_value_edit>
            blink_editing_lamp(YELLOW); // Blink yellow lamps 0.5s
 8001072:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001076:	f7ff fbf3 	bl	8000860 <blink_editing_lamp>
            if (button1_flag) {
 800107a:	4b59      	ldr	r3, [pc, #356]	; (80011e0 <FSM_process+0x7c8>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d009      	beq.n	8001096 <FSM_process+0x67e>
                current_state = STATE_MODE5;
 8001082:	4b54      	ldr	r3, [pc, #336]	; (80011d4 <FSM_process+0x7bc>)
 8001084:	2205      	movs	r2, #5
 8001086:	701a      	strb	r2, [r3, #0]
                lcd_clear(WHITE);
 8001088:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800108c:	f000 fb86 	bl	800179c <lcd_clear>
                draw_lamps_off();
 8001090:	f7ff faec 	bl	800066c <draw_lamps_off>
            } else if (button2_flag) {
                current_state = STATE_YELLOW_EDIT;
                draw_lamps_off();
            }
            break;
 8001094:	e11f      	b.n	80012d6 <FSM_process+0x8be>
            } else if (button2_flag) {
 8001096:	4b53      	ldr	r3, [pc, #332]	; (80011e4 <FSM_process+0x7cc>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 811b 	beq.w	80012d6 <FSM_process+0x8be>
                current_state = STATE_YELLOW_EDIT;
 80010a0:	4b4c      	ldr	r3, [pc, #304]	; (80011d4 <FSM_process+0x7bc>)
 80010a2:	220a      	movs	r2, #10
 80010a4:	701a      	strb	r2, [r3, #0]
                draw_lamps_off();
 80010a6:	f7ff fae1 	bl	800066c <draw_lamps_off>
            break;
 80010aa:	e114      	b.n	80012d6 <FSM_process+0x8be>

        case STATE_YELLOW_EDIT:
        	show_mode_and_value_edit("MODE 4      ", yellow_duration);
 80010ac:	4b52      	ldr	r3, [pc, #328]	; (80011f8 <FSM_process+0x7e0>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	4852      	ldr	r0, [pc, #328]	; (80011fc <FSM_process+0x7e4>)
 80010b4:	f7ff fc80 	bl	80009b8 <show_mode_and_value_edit>
            if (button2_flag) yellow_duration = (yellow_duration % 99) + 1;
 80010b8:	4b4a      	ldr	r3, [pc, #296]	; (80011e4 <FSM_process+0x7cc>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d010      	beq.n	80010e2 <FSM_process+0x6ca>
 80010c0:	4b4d      	ldr	r3, [pc, #308]	; (80011f8 <FSM_process+0x7e0>)
 80010c2:	781a      	ldrb	r2, [r3, #0]
 80010c4:	4b48      	ldr	r3, [pc, #288]	; (80011e8 <FSM_process+0x7d0>)
 80010c6:	fba3 1302 	umull	r1, r3, r3, r2
 80010ca:	0999      	lsrs	r1, r3, #6
 80010cc:	460b      	mov	r3, r1
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	440b      	add	r3, r1
 80010d2:	0159      	lsls	r1, r3, #5
 80010d4:	440b      	add	r3, r1
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b46      	ldr	r3, [pc, #280]	; (80011f8 <FSM_process+0x7e0>)
 80010e0:	701a      	strb	r2, [r3, #0]
            if (button3_flag) current_state = STATE_YELLOW_SAVE;
 80010e2:	4b42      	ldr	r3, [pc, #264]	; (80011ec <FSM_process+0x7d4>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d002      	beq.n	80010f0 <FSM_process+0x6d8>
 80010ea:	4b3a      	ldr	r3, [pc, #232]	; (80011d4 <FSM_process+0x7bc>)
 80010ec:	220b      	movs	r2, #11
 80010ee:	701a      	strb	r2, [r3, #0]
            blink_editing_lamp(YELLOW); // Continue blinking yellow lamps
 80010f0:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80010f4:	f7ff fbb4 	bl	8000860 <blink_editing_lamp>
            sch_counter_B = 3;
 80010f8:	4b3d      	ldr	r3, [pc, #244]	; (80011f0 <FSM_process+0x7d8>)
 80010fa:	2203      	movs	r2, #3
 80010fc:	801a      	strh	r2, [r3, #0]
            break;
 80010fe:	e0f7      	b.n	80012f0 <FSM_process+0x8d8>

        case STATE_YELLOW_SAVE:
        	show_mode_and_value_edit("MODE 4-SAVE     ", yellow_duration);
 8001100:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <FSM_process+0x7e0>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	483e      	ldr	r0, [pc, #248]	; (8001200 <FSM_process+0x7e8>)
 8001108:	f7ff fc56 	bl	80009b8 <show_mode_and_value_edit>
            if (sch_counter_B > 0) sch_counter_B--;
 800110c:	4b38      	ldr	r3, [pc, #224]	; (80011f0 <FSM_process+0x7d8>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <FSM_process+0x708>
 8001114:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <FSM_process+0x7d8>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	3b01      	subs	r3, #1
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b34      	ldr	r3, [pc, #208]	; (80011f0 <FSM_process+0x7d8>)
 800111e:	801a      	strh	r2, [r3, #0]
            if (second_flag && sch_counter_B == 0) {
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 80d9 	beq.w	80012da <FSM_process+0x8c2>
 8001128:	4b31      	ldr	r3, [pc, #196]	; (80011f0 <FSM_process+0x7d8>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	f040 80d4 	bne.w	80012da <FSM_process+0x8c2>
            	current_state = STATE_INIT;
 8001132:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <FSM_process+0x7bc>)
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
                lcd_clear(WHITE);
 8001138:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800113c:	f000 fb2e 	bl	800179c <lcd_clear>
            }
            break;
 8001140:	e0cb      	b.n	80012da <FSM_process+0x8c2>

        case STATE_MODE5:
            draw_lamps_off();
 8001142:	f7ff fa93 	bl	800066c <draw_lamps_off>
            show_mode_and_value("MODE 5     ", 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	482e      	ldr	r0, [pc, #184]	; (8001204 <FSM_process+0x7ec>)
 800114c:	f7ff fc00 	bl	8000950 <show_mode_and_value>
            sch_counter_A = 0;
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <FSM_process+0x7b8>)
 8001152:	2200      	movs	r2, #0
 8001154:	801a      	strh	r2, [r3, #0]
            sch_counter_B = 0;
 8001156:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <FSM_process+0x7d8>)
 8001158:	2200      	movs	r2, #0
 800115a:	801a      	strh	r2, [r3, #0]
            if (button1_flag) {
 800115c:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <FSM_process+0x7c8>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <FSM_process+0x758>
                current_state = STATE_MODE1;
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <FSM_process+0x7bc>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
                draw_lamps_off();
 800116a:	f7ff fa7f 	bl	800066c <draw_lamps_off>
            } else if (sch_counter_A == 0 && sch_counter_B == 0) {
                current_state = STATE_RED_GREEN_MAN;
                draw_lamps_off();
            }
            break;
 800116e:	e0b6      	b.n	80012de <FSM_process+0x8c6>
            } else if (sch_counter_A == 0 && sch_counter_B == 0) {
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <FSM_process+0x7b8>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	f040 80b2 	bne.w	80012de <FSM_process+0x8c6>
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <FSM_process+0x7d8>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	f040 80ad 	bne.w	80012de <FSM_process+0x8c6>
                current_state = STATE_RED_GREEN_MAN;
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <FSM_process+0x7bc>)
 8001186:	220c      	movs	r2, #12
 8001188:	701a      	strb	r2, [r3, #0]
                draw_lamps_off();
 800118a:	f7ff fa6f 	bl	800066c <draw_lamps_off>
            break;
 800118e:	e0a6      	b.n	80012de <FSM_process+0x8c6>

        case STATE_RED_GREEN_MAN:
            set_lamps(STATE_RED_GREEN_MAN);
 8001190:	200c      	movs	r0, #12
 8001192:	f7ff faa1 	bl	80006d8 <set_lamps>
            show_mode_and_value("MAN RED-GRN", 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	481b      	ldr	r0, [pc, #108]	; (8001208 <FSM_process+0x7f0>)
 800119c:	f7ff fbd8 	bl	8000950 <show_mode_and_value>
            if (button1_flag) {
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <FSM_process+0x7c8>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <FSM_process+0x79a>
                current_state = STATE_MODE1;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <FSM_process+0x7bc>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
                draw_lamps_off();
 80011ae:	f7ff fa5d 	bl	800066c <draw_lamps_off>
            }
            if (button3_flag) {
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <FSM_process+0x7d4>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 8093 	beq.w	80012e2 <FSM_process+0x8ca>
                current_state = STATE_RED_YELLOW_MAN;
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <FSM_process+0x7bc>)
 80011be:	220d      	movs	r2, #13
 80011c0:	701a      	strb	r2, [r3, #0]
                draw_lamps_off();
 80011c2:	f7ff fa53 	bl	800066c <draw_lamps_off>
            }
            break;
 80011c6:	e08c      	b.n	80012e2 <FSM_process+0x8ca>
 80011c8:	20000000 	.word	0x20000000
 80011cc:	08005838 	.word	0x08005838
 80011d0:	200000a8 	.word	0x200000a8
 80011d4:	200000a6 	.word	0x200000a6
 80011d8:	20000001 	.word	0x20000001
 80011dc:	0800584c 	.word	0x0800584c
 80011e0:	200000af 	.word	0x200000af
 80011e4:	200000b0 	.word	0x200000b0
 80011e8:	a57eb503 	.word	0xa57eb503
 80011ec:	200000b1 	.word	0x200000b1
 80011f0:	200000aa 	.word	0x200000aa
 80011f4:	0800585c 	.word	0x0800585c
 80011f8:	20000002 	.word	0x20000002
 80011fc:	08005870 	.word	0x08005870
 8001200:	08005880 	.word	0x08005880
 8001204:	08005894 	.word	0x08005894
 8001208:	080058a0 	.word	0x080058a0

        case STATE_RED_YELLOW_MAN:
            set_lamps(STATE_RED_YELLOW_MAN);
 800120c:	200d      	movs	r0, #13
 800120e:	f7ff fa63 	bl	80006d8 <set_lamps>
            show_mode_and_value("MAN RED-YEL", 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	4838      	ldr	r0, [pc, #224]	; (80012f8 <FSM_process+0x8e0>)
 8001218:	f7ff fb9a 	bl	8000950 <show_mode_and_value>
            if (button1_flag) {
 800121c:	4b37      	ldr	r3, [pc, #220]	; (80012fc <FSM_process+0x8e4>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d004      	beq.n	800122e <FSM_process+0x816>
                current_state = STATE_MODE1;
 8001224:	4b36      	ldr	r3, [pc, #216]	; (8001300 <FSM_process+0x8e8>)
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
                draw_lamps_off();
 800122a:	f7ff fa1f 	bl	800066c <draw_lamps_off>
            }
            if (button3_flag) {
 800122e:	4b35      	ldr	r3, [pc, #212]	; (8001304 <FSM_process+0x8ec>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d057      	beq.n	80012e6 <FSM_process+0x8ce>
                current_state = STATE_GREEN_RED_MAN;
 8001236:	4b32      	ldr	r3, [pc, #200]	; (8001300 <FSM_process+0x8e8>)
 8001238:	220e      	movs	r2, #14
 800123a:	701a      	strb	r2, [r3, #0]
                draw_lamps_off();
 800123c:	f7ff fa16 	bl	800066c <draw_lamps_off>
            }
            break;
 8001240:	e051      	b.n	80012e6 <FSM_process+0x8ce>

        case STATE_GREEN_RED_MAN:
            set_lamps(STATE_GREEN_RED_MAN);
 8001242:	200e      	movs	r0, #14
 8001244:	f7ff fa48 	bl	80006d8 <set_lamps>
            show_mode_and_value("MAN GRN-RED", 0, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2100      	movs	r1, #0
 800124c:	482e      	ldr	r0, [pc, #184]	; (8001308 <FSM_process+0x8f0>)
 800124e:	f7ff fb7f 	bl	8000950 <show_mode_and_value>
            if (button1_flag) {
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <FSM_process+0x8e4>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d004      	beq.n	8001264 <FSM_process+0x84c>
                current_state = STATE_MODE1;
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <FSM_process+0x8e8>)
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
                draw_lamps_off();
 8001260:	f7ff fa04 	bl	800066c <draw_lamps_off>
            }
            if (button3_flag) {
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <FSM_process+0x8ec>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d03e      	beq.n	80012ea <FSM_process+0x8d2>
                current_state = STATE_YELLOW_RED_MAN;
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <FSM_process+0x8e8>)
 800126e:	220f      	movs	r2, #15
 8001270:	701a      	strb	r2, [r3, #0]
                draw_lamps_off();
 8001272:	f7ff f9fb 	bl	800066c <draw_lamps_off>
            }
            break;
 8001276:	e038      	b.n	80012ea <FSM_process+0x8d2>

        case STATE_YELLOW_RED_MAN:
            set_lamps(STATE_YELLOW_RED_MAN);
 8001278:	200f      	movs	r0, #15
 800127a:	f7ff fa2d 	bl	80006d8 <set_lamps>
            show_mode_and_value("MAN YEL-RED", 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	4822      	ldr	r0, [pc, #136]	; (800130c <FSM_process+0x8f4>)
 8001284:	f7ff fb64 	bl	8000950 <show_mode_and_value>
            if (button1_flag) {
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <FSM_process+0x8e4>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d004      	beq.n	800129a <FSM_process+0x882>
                current_state = STATE_MODE1;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <FSM_process+0x8e8>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
                draw_lamps_off();
 8001296:	f7ff f9e9 	bl	800066c <draw_lamps_off>
            }
            if (button3_flag) {
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <FSM_process+0x8ec>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d025      	beq.n	80012ee <FSM_process+0x8d6>
                current_state = STATE_RED_GREEN_MAN;
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <FSM_process+0x8e8>)
 80012a4:	220c      	movs	r2, #12
 80012a6:	701a      	strb	r2, [r3, #0]
                draw_lamps_off();
 80012a8:	f7ff f9e0 	bl	800066c <draw_lamps_off>
            }
            break;
 80012ac:	e01f      	b.n	80012ee <FSM_process+0x8d6>
            break;
 80012ae:	bf00      	nop
 80012b0:	e01e      	b.n	80012f0 <FSM_process+0x8d8>
            break;
 80012b2:	bf00      	nop
 80012b4:	e01c      	b.n	80012f0 <FSM_process+0x8d8>
            break;
 80012b6:	bf00      	nop
 80012b8:	e01a      	b.n	80012f0 <FSM_process+0x8d8>
            break;
 80012ba:	bf00      	nop
 80012bc:	e018      	b.n	80012f0 <FSM_process+0x8d8>
            break;
 80012be:	bf00      	nop
 80012c0:	e016      	b.n	80012f0 <FSM_process+0x8d8>
            break;
 80012c2:	bf00      	nop
 80012c4:	e014      	b.n	80012f0 <FSM_process+0x8d8>
            break;
 80012c6:	bf00      	nop
 80012c8:	e012      	b.n	80012f0 <FSM_process+0x8d8>
            break;
 80012ca:	bf00      	nop
 80012cc:	e010      	b.n	80012f0 <FSM_process+0x8d8>
            break;
 80012ce:	bf00      	nop
 80012d0:	e00e      	b.n	80012f0 <FSM_process+0x8d8>
            break;
 80012d2:	bf00      	nop
 80012d4:	e00c      	b.n	80012f0 <FSM_process+0x8d8>
            break;
 80012d6:	bf00      	nop
 80012d8:	e00a      	b.n	80012f0 <FSM_process+0x8d8>
            break;
 80012da:	bf00      	nop
 80012dc:	e008      	b.n	80012f0 <FSM_process+0x8d8>
            break;
 80012de:	bf00      	nop
 80012e0:	e006      	b.n	80012f0 <FSM_process+0x8d8>
            break;
 80012e2:	bf00      	nop
 80012e4:	e004      	b.n	80012f0 <FSM_process+0x8d8>
            break;
 80012e6:	bf00      	nop
 80012e8:	e002      	b.n	80012f0 <FSM_process+0x8d8>
            break;
 80012ea:	bf00      	nop
 80012ec:	e000      	b.n	80012f0 <FSM_process+0x8d8>
            break;
 80012ee:	bf00      	nop
    }

    // Reset flags if needed (handled by button_scan debouncing)
    //show_button_debug(); // Show which button is pressed
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	080058ac 	.word	0x080058ac
 80012fc:	200000af 	.word	0x200000af
 8001300:	200000a6 	.word	0x200000a6
 8001304:	200000b1 	.word	0x200000b1
 8001308:	080058b8 	.word	0x080058b8
 800130c:	080058c4 	.word	0x080058c4

08001310 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08e      	sub	sp, #56	; 0x38
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]
 8001326:	615a      	str	r2, [r3, #20]
 8001328:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800132a:	463b      	mov	r3, r7
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
 8001338:	615a      	str	r2, [r3, #20]
 800133a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800133c:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <MX_FSMC_Init+0xec>)
 800133e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001342:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001344:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <MX_FSMC_Init+0xec>)
 8001346:	4a2e      	ldr	r2, [pc, #184]	; (8001400 <MX_FSMC_Init+0xf0>)
 8001348:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800134a:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <MX_FSMC_Init+0xec>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001350:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <MX_FSMC_Init+0xec>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001356:	4b29      	ldr	r3, [pc, #164]	; (80013fc <MX_FSMC_Init+0xec>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800135c:	4b27      	ldr	r3, [pc, #156]	; (80013fc <MX_FSMC_Init+0xec>)
 800135e:	2210      	movs	r2, #16
 8001360:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001362:	4b26      	ldr	r3, [pc, #152]	; (80013fc <MX_FSMC_Init+0xec>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001368:	4b24      	ldr	r3, [pc, #144]	; (80013fc <MX_FSMC_Init+0xec>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800136e:	4b23      	ldr	r3, [pc, #140]	; (80013fc <MX_FSMC_Init+0xec>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001374:	4b21      	ldr	r3, [pc, #132]	; (80013fc <MX_FSMC_Init+0xec>)
 8001376:	2200      	movs	r2, #0
 8001378:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800137a:	4b20      	ldr	r3, [pc, #128]	; (80013fc <MX_FSMC_Init+0xec>)
 800137c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001380:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001382:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <MX_FSMC_Init+0xec>)
 8001384:	2200      	movs	r2, #0
 8001386:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <MX_FSMC_Init+0xec>)
 800138a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800138e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <MX_FSMC_Init+0xec>)
 8001392:	2200      	movs	r2, #0
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001396:	4b19      	ldr	r3, [pc, #100]	; (80013fc <MX_FSMC_Init+0xec>)
 8001398:	2200      	movs	r2, #0
 800139a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <MX_FSMC_Init+0xec>)
 800139e:	2200      	movs	r2, #0
 80013a0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80013a2:	230f      	movs	r3, #15
 80013a4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80013a6:	230f      	movs	r3, #15
 80013a8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80013aa:	233c      	movs	r3, #60	; 0x3c
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80013b2:	2310      	movs	r3, #16
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80013b6:	2311      	movs	r3, #17
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80013ba:	2300      	movs	r3, #0
 80013bc:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80013be:	2308      	movs	r3, #8
 80013c0:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80013c2:	230f      	movs	r3, #15
 80013c4:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80013c6:	2309      	movs	r3, #9
 80013c8:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80013ce:	2310      	movs	r3, #16
 80013d0:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80013d2:	2311      	movs	r3, #17
 80013d4:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80013da:	463a      	mov	r2, r7
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <MX_FSMC_Init+0xec>)
 80013e4:	f002 ffa2 	bl	800432c <HAL_SRAM_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80013ee:	f000 ff47 	bl	8002280 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80013f2:	bf00      	nop
 80013f4:	3738      	adds	r7, #56	; 0x38
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200000b4 	.word	0x200000b4
 8001400:	a0000104 	.word	0xa0000104

08001404 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001418:	4b1c      	ldr	r3, [pc, #112]	; (800148c <HAL_FSMC_MspInit+0x88>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d131      	bne.n	8001484 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <HAL_FSMC_MspInit+0x88>)
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_FSMC_MspInit+0x8c>)
 800142c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142e:	4a18      	ldr	r2, [pc, #96]	; (8001490 <HAL_FSMC_MspInit+0x8c>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6393      	str	r3, [r2, #56]	; 0x38
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <HAL_FSMC_MspInit+0x8c>)
 8001438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001442:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001446:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001454:	230c      	movs	r3, #12
 8001456:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	4619      	mov	r1, r3
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <HAL_FSMC_MspInit+0x90>)
 800145e:	f001 fb89 	bl	8002b74 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001462:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001466:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001474:	230c      	movs	r3, #12
 8001476:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	4619      	mov	r1, r3
 800147c:	4806      	ldr	r0, [pc, #24]	; (8001498 <HAL_FSMC_MspInit+0x94>)
 800147e:	f001 fb79 	bl	8002b74 <HAL_GPIO_Init>
 8001482:	e000      	b.n	8001486 <HAL_FSMC_MspInit+0x82>
    return;
 8001484:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000104 	.word	0x20000104
 8001490:	40023800 	.word	0x40023800
 8001494:	40021000 	.word	0x40021000
 8001498:	40020c00 	.word	0x40020c00

0800149c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80014a4:	f7ff ffae 	bl	8001404 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	; 0x30
 80014b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
 80014ca:	4b6f      	ldr	r3, [pc, #444]	; (8001688 <MX_GPIO_Init+0x1d8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a6e      	ldr	r2, [pc, #440]	; (8001688 <MX_GPIO_Init+0x1d8>)
 80014d0:	f043 0310 	orr.w	r3, r3, #16
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b6c      	ldr	r3, [pc, #432]	; (8001688 <MX_GPIO_Init+0x1d8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	4b68      	ldr	r3, [pc, #416]	; (8001688 <MX_GPIO_Init+0x1d8>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a67      	ldr	r2, [pc, #412]	; (8001688 <MX_GPIO_Init+0x1d8>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b65      	ldr	r3, [pc, #404]	; (8001688 <MX_GPIO_Init+0x1d8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	4b61      	ldr	r3, [pc, #388]	; (8001688 <MX_GPIO_Init+0x1d8>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a60      	ldr	r2, [pc, #384]	; (8001688 <MX_GPIO_Init+0x1d8>)
 8001508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b5e      	ldr	r3, [pc, #376]	; (8001688 <MX_GPIO_Init+0x1d8>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b5a      	ldr	r3, [pc, #360]	; (8001688 <MX_GPIO_Init+0x1d8>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a59      	ldr	r2, [pc, #356]	; (8001688 <MX_GPIO_Init+0x1d8>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b57      	ldr	r3, [pc, #348]	; (8001688 <MX_GPIO_Init+0x1d8>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	4b53      	ldr	r3, [pc, #332]	; (8001688 <MX_GPIO_Init+0x1d8>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a52      	ldr	r2, [pc, #328]	; (8001688 <MX_GPIO_Init+0x1d8>)
 8001540:	f043 0308 	orr.w	r3, r3, #8
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b50      	ldr	r3, [pc, #320]	; (8001688 <MX_GPIO_Init+0x1d8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	4b4c      	ldr	r3, [pc, #304]	; (8001688 <MX_GPIO_Init+0x1d8>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a4b      	ldr	r2, [pc, #300]	; (8001688 <MX_GPIO_Init+0x1d8>)
 800155c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b49      	ldr	r3, [pc, #292]	; (8001688 <MX_GPIO_Init+0x1d8>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	4b45      	ldr	r3, [pc, #276]	; (8001688 <MX_GPIO_Init+0x1d8>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a44      	ldr	r2, [pc, #272]	; (8001688 <MX_GPIO_Init+0x1d8>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b42      	ldr	r3, [pc, #264]	; (8001688 <MX_GPIO_Init+0x1d8>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	2170      	movs	r1, #112	; 0x70
 800158e:	483f      	ldr	r0, [pc, #252]	; (800168c <MX_GPIO_Init+0x1dc>)
 8001590:	f001 fc8c 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800159a:	483d      	ldr	r0, [pc, #244]	; (8001690 <MX_GPIO_Init+0x1e0>)
 800159c:	f001 fc86 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2140      	movs	r1, #64	; 0x40
 80015a4:	483b      	ldr	r0, [pc, #236]	; (8001694 <MX_GPIO_Init+0x1e4>)
 80015a6:	f001 fc81 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b0:	4839      	ldr	r0, [pc, #228]	; (8001698 <MX_GPIO_Init+0x1e8>)
 80015b2:	f001 fc7b 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2108      	movs	r1, #8
 80015ba:	4838      	ldr	r0, [pc, #224]	; (800169c <MX_GPIO_Init+0x1ec>)
 80015bc:	f001 fc76 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80015c0:	2370      	movs	r3, #112	; 0x70
 80015c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4619      	mov	r1, r3
 80015d6:	482d      	ldr	r0, [pc, #180]	; (800168c <MX_GPIO_Init+0x1dc>)
 80015d8:	f001 facc 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80015dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	4826      	ldr	r0, [pc, #152]	; (8001690 <MX_GPIO_Init+0x1e0>)
 80015f6:	f001 fabd 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80015fa:	23c0      	movs	r3, #192	; 0xc0
 80015fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	4822      	ldr	r0, [pc, #136]	; (8001698 <MX_GPIO_Init+0x1e8>)
 800160e:	f001 fab1 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001612:	2330      	movs	r3, #48	; 0x30
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	4619      	mov	r1, r3
 8001624:	481a      	ldr	r0, [pc, #104]	; (8001690 <MX_GPIO_Init+0x1e0>)
 8001626:	f001 faa5 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800162a:	2340      	movs	r3, #64	; 0x40
 800162c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	4814      	ldr	r0, [pc, #80]	; (8001694 <MX_GPIO_Init+0x1e4>)
 8001642:	f001 fa97 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	480e      	ldr	r0, [pc, #56]	; (8001698 <MX_GPIO_Init+0x1e8>)
 8001660:	f001 fa88 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001664:	2308      	movs	r3, #8
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	4619      	mov	r1, r3
 800167a:	4808      	ldr	r0, [pc, #32]	; (800169c <MX_GPIO_Init+0x1ec>)
 800167c:	f001 fa7a 	bl	8002b74 <HAL_GPIO_Init>

}
 8001680:	bf00      	nop
 8001682:	3730      	adds	r7, #48	; 0x30
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40023800 	.word	0x40023800
 800168c:	40021000 	.word	0x40021000
 8001690:	40020800 	.word	0x40020800
 8001694:	40021800 	.word	0x40021800
 8001698:	40020000 	.word	0x40020000
 800169c:	40020c00 	.word	0x40020c00

080016a0 <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 80016aa:	4a04      	ldr	r2, [pc, #16]	; (80016bc <LCD_WR_REG+0x1c>)
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	8013      	strh	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	600ffffe 	.word	0x600ffffe

080016c0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 80016ca:	4a04      	ldr	r2, [pc, #16]	; (80016dc <LCD_WR_DATA+0x1c>)
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	8053      	strh	r3, [r2, #2]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	600ffffe 	.word	0x600ffffe

080016e0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <LCD_RD_DATA+0x20>)
 80016e8:	885b      	ldrh	r3, [r3, #2]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	80fb      	strh	r3, [r7, #6]
	return ram;
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	b29b      	uxth	r3, r3
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	600ffffe 	.word	0x600ffffe

08001704 <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4604      	mov	r4, r0
 800170c:	4608      	mov	r0, r1
 800170e:	4611      	mov	r1, r2
 8001710:	461a      	mov	r2, r3
 8001712:	4623      	mov	r3, r4
 8001714:	80fb      	strh	r3, [r7, #6]
 8001716:	4603      	mov	r3, r0
 8001718:	80bb      	strh	r3, [r7, #4]
 800171a:	460b      	mov	r3, r1
 800171c:	807b      	strh	r3, [r7, #2]
 800171e:	4613      	mov	r3, r2
 8001720:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 8001722:	202a      	movs	r0, #42	; 0x2a
 8001724:	f7ff ffbc 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	0a1b      	lsrs	r3, r3, #8
 800172c:	b29b      	uxth	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ffc6 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	b29b      	uxth	r3, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ffc0 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 8001740:	887b      	ldrh	r3, [r7, #2]
 8001742:	0a1b      	lsrs	r3, r3, #8
 8001744:	b29b      	uxth	r3, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ffba 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 800174c:	887b      	ldrh	r3, [r7, #2]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	b29b      	uxth	r3, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff ffb4 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 8001758:	202b      	movs	r0, #43	; 0x2b
 800175a:	f7ff ffa1 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 800175e:	88bb      	ldrh	r3, [r7, #4]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	b29b      	uxth	r3, r3
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ffab 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 800176a:	88bb      	ldrh	r3, [r7, #4]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	b29b      	uxth	r3, r3
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ffa5 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 8001776:	883b      	ldrh	r3, [r7, #0]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	b29b      	uxth	r3, r3
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff9f 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 8001782:	883b      	ldrh	r3, [r7, #0]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	b29b      	uxth	r3, r3
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff99 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 800178e:	202c      	movs	r0, #44	; 0x2c
 8001790:	f7ff ff86 	bl	80016a0 <LCD_WR_REG>
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bd90      	pop	{r4, r7, pc}

0800179c <lcd_clear>:
/**
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcd_clear(uint16_t color) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcd_set_address(0, 0, lcddev.width - 1, lcddev.height - 1);
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <lcd_clear+0x60>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <lcd_clear+0x60>)
 80017b0:	885b      	ldrh	r3, [r3, #2]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	2100      	movs	r1, #0
 80017b8:	2000      	movs	r0, #0
 80017ba:	f7ff ffa3 	bl	8001704 <lcd_set_address>
	for (i = 0; i < lcddev.width; i++) {
 80017be:	2300      	movs	r3, #0
 80017c0:	81fb      	strh	r3, [r7, #14]
 80017c2:	e011      	b.n	80017e8 <lcd_clear+0x4c>
		for (j = 0; j < lcddev.height; j++) {
 80017c4:	2300      	movs	r3, #0
 80017c6:	81bb      	strh	r3, [r7, #12]
 80017c8:	e006      	b.n	80017d8 <lcd_clear+0x3c>
			LCD_WR_DATA(color);
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff77 	bl	80016c0 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++) {
 80017d2:	89bb      	ldrh	r3, [r7, #12]
 80017d4:	3301      	adds	r3, #1
 80017d6:	81bb      	strh	r3, [r7, #12]
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <lcd_clear+0x60>)
 80017da:	885b      	ldrh	r3, [r3, #2]
 80017dc:	89ba      	ldrh	r2, [r7, #12]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d3f3      	bcc.n	80017ca <lcd_clear+0x2e>
	for (i = 0; i < lcddev.width; i++) {
 80017e2:	89fb      	ldrh	r3, [r7, #14]
 80017e4:	3301      	adds	r3, #1
 80017e6:	81fb      	strh	r3, [r7, #14]
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <lcd_clear+0x60>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	89fa      	ldrh	r2, [r7, #14]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d3e8      	bcc.n	80017c4 <lcd_clear+0x28>
		}
	}
}
 80017f2:	bf00      	nop
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000108 	.word	0x20000108

08001800 <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	80fb      	strh	r3, [r7, #6]
 800180a:	460b      	mov	r3, r1
 800180c:	80bb      	strh	r3, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 8001812:	88bb      	ldrh	r3, [r7, #4]
 8001814:	88fa      	ldrh	r2, [r7, #6]
 8001816:	88b9      	ldrh	r1, [r7, #4]
 8001818:	88f8      	ldrh	r0, [r7, #6]
 800181a:	f7ff ff73 	bl	8001704 <lcd_set_address>
	LCD_WR_DATA(color);
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff4d 	bl	80016c0 <LCD_WR_DATA>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <lcd_show_char>:
	lcd_draw_line(x1, y2, x2, y2, color);
	lcd_draw_line(x2, y1, x2, y2, color);
}

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
 8001836:	4604      	mov	r4, r0
 8001838:	4608      	mov	r0, r1
 800183a:	4611      	mov	r1, r2
 800183c:	461a      	mov	r2, r3
 800183e:	4623      	mov	r3, r4
 8001840:	80fb      	strh	r3, [r7, #6]
 8001842:	4603      	mov	r3, r0
 8001844:	80bb      	strh	r3, [r7, #4]
 8001846:	460b      	mov	r3, r1
 8001848:	70fb      	strb	r3, [r7, #3]
 800184a:	4613      	mov	r3, r2
 800184c:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 8001856:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800185a:	085b      	lsrs	r3, r3, #1
 800185c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	08db      	lsrs	r3, r3, #3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	bf14      	ite	ne
 8001872:	2301      	movne	r3, #1
 8001874:	2300      	moveq	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	4413      	add	r3, r2
 800187a:	b29a      	uxth	r2, r3
 800187c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001880:	b29b      	uxth	r3, r3
 8001882:	fb12 f303 	smulbb	r3, r2, r3
 8001886:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	3b20      	subs	r3, #32
 800188c:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	b29a      	uxth	r2, r3
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	4413      	add	r3, r2
 8001896:	b29b      	uxth	r3, r3
 8001898:	3b01      	subs	r3, #1
 800189a:	b29c      	uxth	r4, r3
 800189c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	88bb      	ldrh	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	88b9      	ldrh	r1, [r7, #4]
 80018ae:	88f8      	ldrh	r0, [r7, #6]
 80018b0:	4622      	mov	r2, r4
 80018b2:	f7ff ff27 	bl	8001704 <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 80018b6:	2300      	movs	r3, #0
 80018b8:	827b      	strh	r3, [r7, #18]
 80018ba:	e07a      	b.n	80019b2 <lcd_show_char+0x182>
		if (sizey == 12)
 80018bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018c0:	2b0c      	cmp	r3, #12
 80018c2:	d028      	beq.n	8001916 <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 80018c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018c8:	2b10      	cmp	r3, #16
 80018ca:	d108      	bne.n	80018de <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 80018cc:	78fa      	ldrb	r2, [r7, #3]
 80018ce:	8a7b      	ldrh	r3, [r7, #18]
 80018d0:	493c      	ldr	r1, [pc, #240]	; (80019c4 <lcd_show_char+0x194>)
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	440a      	add	r2, r1
 80018d6:	4413      	add	r3, r2
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	75fb      	strb	r3, [r7, #23]
 80018dc:	e01b      	b.n	8001916 <lcd_show_char+0xe6>
		else if (sizey == 24)
 80018de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018e2:	2b18      	cmp	r3, #24
 80018e4:	d10b      	bne.n	80018fe <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 80018e6:	78fa      	ldrb	r2, [r7, #3]
 80018e8:	8a79      	ldrh	r1, [r7, #18]
 80018ea:	4837      	ldr	r0, [pc, #220]	; (80019c8 <lcd_show_char+0x198>)
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	4403      	add	r3, r0
 80018f6:	440b      	add	r3, r1
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	75fb      	strb	r3, [r7, #23]
 80018fc:	e00b      	b.n	8001916 <lcd_show_char+0xe6>
		else if (sizey == 32)
 80018fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001902:	2b20      	cmp	r3, #32
 8001904:	d15a      	bne.n	80019bc <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 8001906:	78fa      	ldrb	r2, [r7, #3]
 8001908:	8a7b      	ldrh	r3, [r7, #18]
 800190a:	4930      	ldr	r1, [pc, #192]	; (80019cc <lcd_show_char+0x19c>)
 800190c:	0192      	lsls	r2, r2, #6
 800190e:	440a      	add	r2, r1
 8001910:	4413      	add	r3, r2
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 8001916:	2300      	movs	r3, #0
 8001918:	75bb      	strb	r3, [r7, #22]
 800191a:	e044      	b.n	80019a6 <lcd_show_char+0x176>
			if (!mode) {
 800191c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001920:	2b00      	cmp	r3, #0
 8001922:	d120      	bne.n	8001966 <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 8001924:	7dfa      	ldrb	r2, [r7, #23]
 8001926:	7dbb      	ldrb	r3, [r7, #22]
 8001928:	fa42 f303 	asr.w	r3, r2, r3
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d004      	beq.n	800193e <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 8001934:	883b      	ldrh	r3, [r7, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fec2 	bl	80016c0 <LCD_WR_DATA>
 800193c:	e003      	b.n	8001946 <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 800193e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff febd 	bl	80016c0 <LCD_WR_DATA>
				m++;
 8001946:	7d7b      	ldrb	r3, [r7, #21]
 8001948:	3301      	adds	r3, #1
 800194a:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 800194c:	7d7b      	ldrb	r3, [r7, #21]
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	fbb3 f1f2 	udiv	r1, r3, r2
 8001954:	fb01 f202 	mul.w	r2, r1, r2
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d11f      	bne.n	80019a0 <lcd_show_char+0x170>
					m = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	757b      	strb	r3, [r7, #21]
					break;
 8001964:	e022      	b.n	80019ac <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 8001966:	7dfa      	ldrb	r2, [r7, #23]
 8001968:	7dbb      	ldrb	r3, [r7, #22]
 800196a:	fa42 f303 	asr.w	r3, r2, r3
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 8001976:	883a      	ldrh	r2, [r7, #0]
 8001978:	88b9      	ldrh	r1, [r7, #4]
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff3f 	bl	8001800 <lcd_draw_point>
				x++;
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	3301      	adds	r3, #1
 8001986:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 8001988:	88fa      	ldrh	r2, [r7, #6]
 800198a:	8a3b      	ldrh	r3, [r7, #16]
 800198c:	1ad2      	subs	r2, r2, r3
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	429a      	cmp	r2, r3
 8001992:	d105      	bne.n	80019a0 <lcd_show_char+0x170>
					x = x0;
 8001994:	8a3b      	ldrh	r3, [r7, #16]
 8001996:	80fb      	strh	r3, [r7, #6]
					y++;
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	3301      	adds	r3, #1
 800199c:	80bb      	strh	r3, [r7, #4]
					break;
 800199e:	e005      	b.n	80019ac <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 80019a0:	7dbb      	ldrb	r3, [r7, #22]
 80019a2:	3301      	adds	r3, #1
 80019a4:	75bb      	strb	r3, [r7, #22]
 80019a6:	7dbb      	ldrb	r3, [r7, #22]
 80019a8:	2b07      	cmp	r3, #7
 80019aa:	d9b7      	bls.n	800191c <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 80019ac:	8a7b      	ldrh	r3, [r7, #18]
 80019ae:	3301      	adds	r3, #1
 80019b0:	827b      	strh	r3, [r7, #18]
 80019b2:	8a7a      	ldrh	r2, [r7, #18]
 80019b4:	89bb      	ldrh	r3, [r7, #12]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d380      	bcc.n	80018bc <lcd_show_char+0x8c>
 80019ba:	e000      	b.n	80019be <lcd_show_char+0x18e>
			return;
 80019bc:	bf00      	nop
				}
			}
		}
	}
}
 80019be:	371c      	adds	r7, #28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd90      	pop	{r4, r7, pc}
 80019c4:	080058d0 	.word	0x080058d0
 80019c8:	08005ec0 	.word	0x08005ec0
 80019cc:	08007090 	.word	0x08007090

080019d0 <lcd_set_direction>:
			k++;
		}
	}
}

void lcd_set_direction(uint8_t dir) {
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <lcd_set_direction+0x2a>
		lcddev.width = 320;
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <lcd_set_direction+0x44>)
 80019ec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019f0:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <lcd_set_direction+0x44>)
 80019f4:	22f0      	movs	r2, #240	; 0xf0
 80019f6:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 80019f8:	e006      	b.n	8001a08 <lcd_set_direction+0x38>
		lcddev.width = 240;
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <lcd_set_direction+0x44>)
 80019fc:	22f0      	movs	r2, #240	; 0xf0
 80019fe:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <lcd_set_direction+0x44>)
 8001a02:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a06:	805a      	strh	r2, [r3, #2]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	20000108 	.word	0x20000108

08001a18 <lcd_init>:

void lcd_init(void) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a22:	48aa      	ldr	r0, [pc, #680]	; (8001ccc <lcd_init+0x2b4>)
 8001a24:	f001 fa42 	bl	8002eac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001a28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a2c:	f000 ff6c 	bl	8002908 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001a30:	2201      	movs	r2, #1
 8001a32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a36:	48a5      	ldr	r0, [pc, #660]	; (8001ccc <lcd_init+0x2b4>)
 8001a38:	f001 fa38 	bl	8002eac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001a3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a40:	f000 ff62 	bl	8002908 <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 8001a44:	2000      	movs	r0, #0
 8001a46:	f7ff ffc3 	bl	80019d0 <lcd_set_direction>
	LCD_WR_REG(0XD3);
 8001a4a:	20d3      	movs	r0, #211	; 0xd3
 8001a4c:	f7ff fe28 	bl	80016a0 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8001a50:	f7ff fe46 	bl	80016e0 <LCD_RD_DATA>
 8001a54:	4603      	mov	r3, r0
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b9d      	ldr	r3, [pc, #628]	; (8001cd0 <lcd_init+0x2b8>)
 8001a5a:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001a5c:	f7ff fe40 	bl	80016e0 <LCD_RD_DATA>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b9a      	ldr	r3, [pc, #616]	; (8001cd0 <lcd_init+0x2b8>)
 8001a66:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001a68:	f7ff fe3a 	bl	80016e0 <LCD_RD_DATA>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4b97      	ldr	r3, [pc, #604]	; (8001cd0 <lcd_init+0x2b8>)
 8001a72:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8001a74:	4b96      	ldr	r3, [pc, #600]	; (8001cd0 <lcd_init+0x2b8>)
 8001a76:	889b      	ldrh	r3, [r3, #4]
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	4b94      	ldr	r3, [pc, #592]	; (8001cd0 <lcd_init+0x2b8>)
 8001a7e:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8001a80:	f7ff fe2e 	bl	80016e0 <LCD_RD_DATA>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b91      	ldr	r3, [pc, #580]	; (8001cd0 <lcd_init+0x2b8>)
 8001a8a:	889b      	ldrh	r3, [r3, #4]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	4b8f      	ldr	r3, [pc, #572]	; (8001cd0 <lcd_init+0x2b8>)
 8001a92:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001a94:	20cf      	movs	r0, #207	; 0xcf
 8001a96:	f7ff fe03 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff fe10 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001aa0:	20c1      	movs	r0, #193	; 0xc1
 8001aa2:	f7ff fe0d 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001aa6:	2030      	movs	r0, #48	; 0x30
 8001aa8:	f7ff fe0a 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001aac:	20ed      	movs	r0, #237	; 0xed
 8001aae:	f7ff fdf7 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001ab2:	2064      	movs	r0, #100	; 0x64
 8001ab4:	f7ff fe04 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001ab8:	2003      	movs	r0, #3
 8001aba:	f7ff fe01 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001abe:	2012      	movs	r0, #18
 8001ac0:	f7ff fdfe 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001ac4:	2081      	movs	r0, #129	; 0x81
 8001ac6:	f7ff fdfb 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001aca:	20e8      	movs	r0, #232	; 0xe8
 8001acc:	f7ff fde8 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001ad0:	2085      	movs	r0, #133	; 0x85
 8001ad2:	f7ff fdf5 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001ad6:	2010      	movs	r0, #16
 8001ad8:	f7ff fdf2 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001adc:	207a      	movs	r0, #122	; 0x7a
 8001ade:	f7ff fdef 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001ae2:	20cb      	movs	r0, #203	; 0xcb
 8001ae4:	f7ff fddc 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001ae8:	2039      	movs	r0, #57	; 0x39
 8001aea:	f7ff fde9 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001aee:	202c      	movs	r0, #44	; 0x2c
 8001af0:	f7ff fde6 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff fde3 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001afa:	2034      	movs	r0, #52	; 0x34
 8001afc:	f7ff fde0 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001b00:	2002      	movs	r0, #2
 8001b02:	f7ff fddd 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001b06:	20f7      	movs	r0, #247	; 0xf7
 8001b08:	f7ff fdca 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001b0c:	2020      	movs	r0, #32
 8001b0e:	f7ff fdd7 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001b12:	20ea      	movs	r0, #234	; 0xea
 8001b14:	f7ff fdc4 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f7ff fdd1 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f7ff fdce 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001b24:	20c0      	movs	r0, #192	; 0xc0
 8001b26:	f7ff fdbb 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001b2a:	201b      	movs	r0, #27
 8001b2c:	f7ff fdc8 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001b30:	20c1      	movs	r0, #193	; 0xc1
 8001b32:	f7ff fdb5 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001b36:	2001      	movs	r0, #1
 8001b38:	f7ff fdc2 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001b3c:	20c5      	movs	r0, #197	; 0xc5
 8001b3e:	f7ff fdaf 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001b42:	2030      	movs	r0, #48	; 0x30
 8001b44:	f7ff fdbc 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001b48:	2030      	movs	r0, #48	; 0x30
 8001b4a:	f7ff fdb9 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001b4e:	20c7      	movs	r0, #199	; 0xc7
 8001b50:	f7ff fda6 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001b54:	20b7      	movs	r0, #183	; 0xb7
 8001b56:	f7ff fdb3 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001b5a:	2036      	movs	r0, #54	; 0x36
 8001b5c:	f7ff fda0 	bl	80016a0 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8001b60:	2008      	movs	r0, #8
 8001b62:	f7ff fdad 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001b66:	203a      	movs	r0, #58	; 0x3a
 8001b68:	f7ff fd9a 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001b6c:	2055      	movs	r0, #85	; 0x55
 8001b6e:	f7ff fda7 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001b72:	20b1      	movs	r0, #177	; 0xb1
 8001b74:	f7ff fd94 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7ff fda1 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001b7e:	201a      	movs	r0, #26
 8001b80:	f7ff fd9e 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001b84:	20b6      	movs	r0, #182	; 0xb6
 8001b86:	f7ff fd8b 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001b8a:	200a      	movs	r0, #10
 8001b8c:	f7ff fd98 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001b90:	20a2      	movs	r0, #162	; 0xa2
 8001b92:	f7ff fd95 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001b96:	20f2      	movs	r0, #242	; 0xf2
 8001b98:	f7ff fd82 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f7ff fd8f 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001ba2:	2026      	movs	r0, #38	; 0x26
 8001ba4:	f7ff fd7c 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f7ff fd89 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001bae:	20e0      	movs	r0, #224	; 0xe0
 8001bb0:	f7ff fd76 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001bb4:	200f      	movs	r0, #15
 8001bb6:	f7ff fd83 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001bba:	202a      	movs	r0, #42	; 0x2a
 8001bbc:	f7ff fd80 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001bc0:	2028      	movs	r0, #40	; 0x28
 8001bc2:	f7ff fd7d 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001bc6:	2008      	movs	r0, #8
 8001bc8:	f7ff fd7a 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001bcc:	200e      	movs	r0, #14
 8001bce:	f7ff fd77 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001bd2:	2008      	movs	r0, #8
 8001bd4:	f7ff fd74 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001bd8:	2054      	movs	r0, #84	; 0x54
 8001bda:	f7ff fd71 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001bde:	20a9      	movs	r0, #169	; 0xa9
 8001be0:	f7ff fd6e 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001be4:	2043      	movs	r0, #67	; 0x43
 8001be6:	f7ff fd6b 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001bea:	200a      	movs	r0, #10
 8001bec:	f7ff fd68 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001bf0:	200f      	movs	r0, #15
 8001bf2:	f7ff fd65 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f7ff fd62 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f7ff fd5f 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001c02:	2000      	movs	r0, #0
 8001c04:	f7ff fd5c 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f7ff fd59 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001c0e:	20e1      	movs	r0, #225	; 0xe1
 8001c10:	f7ff fd46 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c14:	2000      	movs	r0, #0
 8001c16:	f7ff fd53 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001c1a:	2015      	movs	r0, #21
 8001c1c:	f7ff fd50 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001c20:	2017      	movs	r0, #23
 8001c22:	f7ff fd4d 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001c26:	2007      	movs	r0, #7
 8001c28:	f7ff fd4a 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001c2c:	2011      	movs	r0, #17
 8001c2e:	f7ff fd47 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001c32:	2006      	movs	r0, #6
 8001c34:	f7ff fd44 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001c38:	202b      	movs	r0, #43	; 0x2b
 8001c3a:	f7ff fd41 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001c3e:	2056      	movs	r0, #86	; 0x56
 8001c40:	f7ff fd3e 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001c44:	203c      	movs	r0, #60	; 0x3c
 8001c46:	f7ff fd3b 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001c4a:	2005      	movs	r0, #5
 8001c4c:	f7ff fd38 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001c50:	2010      	movs	r0, #16
 8001c52:	f7ff fd35 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001c56:	200f      	movs	r0, #15
 8001c58:	f7ff fd32 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001c5c:	203f      	movs	r0, #63	; 0x3f
 8001c5e:	f7ff fd2f 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001c62:	203f      	movs	r0, #63	; 0x3f
 8001c64:	f7ff fd2c 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001c68:	200f      	movs	r0, #15
 8001c6a:	f7ff fd29 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001c6e:	202b      	movs	r0, #43	; 0x2b
 8001c70:	f7ff fd16 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7ff fd23 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f7ff fd20 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001c80:	2001      	movs	r0, #1
 8001c82:	f7ff fd1d 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001c86:	203f      	movs	r0, #63	; 0x3f
 8001c88:	f7ff fd1a 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001c8c:	202a      	movs	r0, #42	; 0x2a
 8001c8e:	f7ff fd07 	bl	80016a0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c92:	2000      	movs	r0, #0
 8001c94:	f7ff fd14 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff fd11 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f7ff fd0e 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001ca4:	20ef      	movs	r0, #239	; 0xef
 8001ca6:	f7ff fd0b 	bl	80016c0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 8001caa:	2011      	movs	r0, #17
 8001cac:	f7ff fcf8 	bl	80016a0 <LCD_WR_REG>
	HAL_Delay(120);
 8001cb0:	2078      	movs	r0, #120	; 0x78
 8001cb2:	f000 fe29 	bl	8002908 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 8001cb6:	2029      	movs	r0, #41	; 0x29
 8001cb8:	f7ff fcf2 	bl	80016a0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cc2:	4804      	ldr	r0, [pc, #16]	; (8001cd4 <lcd_init+0x2bc>)
 8001cc4:	f001 f8f2 	bl	8002eac <HAL_GPIO_WritePin>
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	20000108 	.word	0x20000108
 8001cd4:	40020000 	.word	0x40020000

08001cd8 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	603b      	str	r3, [r7, #0]
	lcd_draw_point(xc + x, yc + y, c);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	4413      	add	r3, r2
 8001cf0:	b298      	uxth	r0, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	8b3a      	ldrh	r2, [r7, #24]
 8001d00:	4619      	mov	r1, r3
 8001d02:	f7ff fd7d 	bl	8001800 <lcd_draw_point>

	lcd_draw_point(xc - x, yc + y, c);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	b298      	uxth	r0, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	8b3a      	ldrh	r2, [r7, #24]
 8001d20:	4619      	mov	r1, r3
 8001d22:	f7ff fd6d 	bl	8001800 <lcd_draw_point>

	lcd_draw_point(xc + x, yc - y, c);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	4413      	add	r3, r2
 8001d30:	b298      	uxth	r0, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	8b3a      	ldrh	r2, [r7, #24]
 8001d40:	4619      	mov	r1, r3
 8001d42:	f7ff fd5d 	bl	8001800 <lcd_draw_point>

	lcd_draw_point(xc - x, yc - y, c);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	b298      	uxth	r0, r3
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	8b3a      	ldrh	r2, [r7, #24]
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7ff fd4d 	bl	8001800 <lcd_draw_point>

	lcd_draw_point(xc + y, yc + x, c);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	b298      	uxth	r0, r3
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	8b3a      	ldrh	r2, [r7, #24]
 8001d80:	4619      	mov	r1, r3
 8001d82:	f7ff fd3d 	bl	8001800 <lcd_draw_point>

	lcd_draw_point(xc - y, yc + x, c);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	b298      	uxth	r0, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	8b3a      	ldrh	r2, [r7, #24]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f7ff fd2d 	bl	8001800 <lcd_draw_point>

	lcd_draw_point(xc + y, yc - x, c);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	4413      	add	r3, r2
 8001db0:	b298      	uxth	r0, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	8b3a      	ldrh	r2, [r7, #24]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7ff fd1d 	bl	8001800 <lcd_draw_point>

	lcd_draw_point(xc - y, yc - x, c);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	b298      	uxth	r0, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	8b3a      	ldrh	r2, [r7, #24]
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7ff fd0d 	bl	8001800 <lcd_draw_point>
}
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <lcd_draw_circle>:

void lcd_draw_circle(int xc, int yc, uint16_t c, int r, int fill)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b08a      	sub	sp, #40	; 0x28
 8001df2:	af02      	add	r7, sp, #8
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	f1c3 0303 	rsb	r3, r3, #3
 8001e0e:	613b      	str	r3, [r7, #16]

	if (fill) {
 8001e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d04f      	beq.n	8001eb6 <lcd_draw_circle+0xc8>
		while (x <= y) {
 8001e16:	e029      	b.n	8001e6c <lcd_draw_circle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	e00a      	b.n	8001e34 <lcd_draw_circle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	69fa      	ldr	r2, [r7, #28]
 8001e26:	68b9      	ldr	r1, [r7, #8]
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f7ff ff55 	bl	8001cd8 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	3301      	adds	r3, #1
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	ddf0      	ble.n	8001e1e <lcd_draw_circle+0x30>

			if (d < 0) {
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	da06      	bge.n	8001e50 <lcd_draw_circle+0x62>
				d = d + 4 * x + 6;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	009a      	lsls	r2, r3, #2
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4413      	add	r3, r2
 8001e4a:	3306      	adds	r3, #6
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	e00a      	b.n	8001e66 <lcd_draw_circle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	009a      	lsls	r2, r3, #2
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	330a      	adds	r3, #10
 8001e5e:	613b      	str	r3, [r7, #16]
				y--;
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	ddd1      	ble.n	8001e18 <lcd_draw_circle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001e74:	e023      	b.n	8001ebe <lcd_draw_circle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8001e76:	88fb      	ldrh	r3, [r7, #6]
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	68b9      	ldr	r1, [r7, #8]
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f7ff ff29 	bl	8001cd8 <_draw_circle_8>
			if (d < 0) {
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	da06      	bge.n	8001e9a <lcd_draw_circle+0xac>
				d = d + 4 * x + 6;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	009a      	lsls	r2, r3, #2
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4413      	add	r3, r2
 8001e94:	3306      	adds	r3, #6
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	e00a      	b.n	8001eb0 <lcd_draw_circle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	009a      	lsls	r2, r3, #2
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	330a      	adds	r3, #10
 8001ea8:	613b      	str	r3, [r7, #16]
				y--;
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	61bb      	str	r3, [r7, #24]
			x++;
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	dddb      	ble.n	8001e76 <lcd_draw_circle+0x88>
}
 8001ebe:	bf00      	nop
 8001ec0:	3720      	adds	r7, #32
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <lcd_show_string>:

void lcd_show_string(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b08b      	sub	sp, #44	; 0x2c
 8001ecc:	af04      	add	r7, sp, #16
 8001ece:	60ba      	str	r2, [r7, #8]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	81fb      	strh	r3, [r7, #14]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	81bb      	strh	r3, [r7, #12]
 8001eda:	4613      	mov	r3, r2
 8001edc:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 8001ede:	89fb      	ldrh	r3, [r7, #14]
 8001ee0:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 8001ee6:	e048      	b.n	8001f7a <lcd_show_string+0xb2>
		if (!bHz) {
 8001ee8:	7dfb      	ldrb	r3, [r7, #23]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d145      	bne.n	8001f7a <lcd_show_string+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 8001eee:	89fa      	ldrh	r2, [r7, #14]
 8001ef0:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <lcd_show_string+0xc4>)
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001efa:	085b      	lsrs	r3, r3, #1
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	1acb      	subs	r3, r1, r3
 8001f00:	429a      	cmp	r2, r3
 8001f02:	dc3f      	bgt.n	8001f84 <lcd_show_string+0xbc>
 8001f04:	89ba      	ldrh	r2, [r7, #12]
 8001f06:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <lcd_show_string+0xc4>)
 8001f08:	885b      	ldrh	r3, [r3, #2]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f10:	1acb      	subs	r3, r1, r3
 8001f12:	429a      	cmp	r2, r3
 8001f14:	dc36      	bgt.n	8001f84 <lcd_show_string+0xbc>
				return;
			if (*str > 0x80)
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b80      	cmp	r3, #128	; 0x80
 8001f1c:	d902      	bls.n	8001f24 <lcd_show_string+0x5c>
				bHz = 1;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	75fb      	strb	r3, [r7, #23]
 8001f22:	e02a      	b.n	8001f7a <lcd_show_string+0xb2>
			else {
				if (*str == 0x0D) {
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b0d      	cmp	r3, #13
 8001f2a:	d10b      	bne.n	8001f44 <lcd_show_string+0x7c>
					y += sizey;
 8001f2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	89bb      	ldrh	r3, [r7, #12]
 8001f34:	4413      	add	r3, r2
 8001f36:	81bb      	strh	r3, [r7, #12]
					x = x0;
 8001f38:	8abb      	ldrh	r3, [r7, #20]
 8001f3a:	81fb      	strh	r3, [r7, #14]
					str++;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	e017      	b.n	8001f74 <lcd_show_string+0xac>
				} else {
					lcd_show_char(x, y, *str, fc, bc, sizey, mode);
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	781a      	ldrb	r2, [r3, #0]
 8001f48:	88fc      	ldrh	r4, [r7, #6]
 8001f4a:	89b9      	ldrh	r1, [r7, #12]
 8001f4c:	89f8      	ldrh	r0, [r7, #14]
 8001f4e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f52:	9302      	str	r3, [sp, #8]
 8001f54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	4623      	mov	r3, r4
 8001f60:	f7ff fc66 	bl	8001830 <lcd_show_char>
					x += sizey / 2;
 8001f64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f68:	085b      	lsrs	r3, r3, #1
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	89fb      	ldrh	r3, [r7, #14]
 8001f70:	4413      	add	r3, r2
 8001f72:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	3301      	adds	r3, #1
 8001f78:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1b2      	bne.n	8001ee8 <lcd_show_string+0x20>
 8001f82:	e000      	b.n	8001f86 <lcd_show_string+0xbe>
				return;
 8001f84:	bf00      	nop
			}
		}
	}
}
 8001f86:	371c      	adds	r7, #28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd90      	pop	{r4, r7, pc}
 8001f8c:	20000108 	.word	0x20000108

08001f90 <lcd_show_string_center>:

void lcd_show_string_center(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	; 0x28
 8001f94:	af04      	add	r7, sp, #16
 8001f96:	60ba      	str	r2, [r7, #8]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	81fb      	strh	r3, [r7, #14]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	81bb      	strh	r3, [r7, #12]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	80fb      	strh	r3, [r7, #6]
	uint16_t len = strlen((const char*) str);
 8001fa6:	68b8      	ldr	r0, [r7, #8]
 8001fa8:	f7fe f912 	bl	80001d0 <strlen>
 8001fac:	4603      	mov	r3, r0
 8001fae:	82fb      	strh	r3, [r7, #22]
	uint16_t x1 = (lcddev.width - len * 8) / 2;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <lcd_show_string_center+0x60>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	8afb      	ldrh	r3, [r7, #22]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	0fda      	lsrs	r2, r3, #31
 8001fbe:	4413      	add	r3, r2
 8001fc0:	105b      	asrs	r3, r3, #1
 8001fc2:	82bb      	strh	r3, [r7, #20]
	lcd_show_string(x + x1, y, str, fc, bc, sizey, mode);
 8001fc4:	89fa      	ldrh	r2, [r7, #14]
 8001fc6:	8abb      	ldrh	r3, [r7, #20]
 8001fc8:	4413      	add	r3, r2
 8001fca:	b298      	uxth	r0, r3
 8001fcc:	88fa      	ldrh	r2, [r7, #6]
 8001fce:	89b9      	ldrh	r1, [r7, #12]
 8001fd0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001fd4:	9302      	str	r3, [sp, #8]
 8001fd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	8c3b      	ldrh	r3, [r7, #32]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	f7ff ff70 	bl	8001ec8 <lcd_show_string>
}
 8001fe8:	bf00      	nop
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000108 	.word	0x20000108

08001ff4 <led_7seg_init>:
/**
 * @brief  	Init led 7 segment
 * @param  	None
 * @retval 	None
 */
void led_7seg_init() {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	2140      	movs	r1, #64	; 0x40
 8001ffc:	4802      	ldr	r0, [pc, #8]	; (8002008 <led_7seg_init+0x14>)
 8001ffe:	f000 ff55 	bl	8002eac <HAL_GPIO_WritePin>
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40021800 	.word	0x40021800

0800200c <led_7seg_display>:
 * @brief	Scan led 7 segment
 * @param	None
 * @note	Call in 1ms interrupt (Be called in default in Timer 4 callback function)
 * @retval 	None
 */
void led_7seg_display() {
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002010:	4b3f      	ldr	r3, [pc, #252]	; (8002110 <led_7seg_display+0x104>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	b29a      	uxth	r2, r3
 8002018:	4b3d      	ldr	r3, [pc, #244]	; (8002110 <led_7seg_display+0x104>)
 800201a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led_7seg[led_7seg_index] << 8;
 800201c:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <led_7seg_display+0x108>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <led_7seg_display+0x10c>)
 8002024:	5c9b      	ldrb	r3, [r3, r2]
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	b21a      	sxth	r2, r3
 800202a:	4b39      	ldr	r3, [pc, #228]	; (8002110 <led_7seg_display+0x104>)
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	b21b      	sxth	r3, r3
 8002030:	4313      	orrs	r3, r2
 8002032:	b21b      	sxth	r3, r3
 8002034:	b29a      	uxth	r2, r3
 8002036:	4b36      	ldr	r3, [pc, #216]	; (8002110 <led_7seg_display+0x104>)
 8002038:	801a      	strh	r2, [r3, #0]

	switch (led_7seg_index) {
 800203a:	4b36      	ldr	r3, [pc, #216]	; (8002114 <led_7seg_display+0x108>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d846      	bhi.n	80020d0 <led_7seg_display+0xc4>
 8002042:	a201      	add	r2, pc, #4	; (adr r2, 8002048 <led_7seg_display+0x3c>)
 8002044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002048:	08002059 	.word	0x08002059
 800204c:	08002077 	.word	0x08002077
 8002050:	08002095 	.word	0x08002095
 8002054:	080020b3 	.word	0x080020b3
	case 0:
		spi_buffer |= 0x00b0;
 8002058:	4b2d      	ldr	r3, [pc, #180]	; (8002110 <led_7seg_display+0x104>)
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002060:	b29a      	uxth	r2, r3
 8002062:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <led_7seg_display+0x104>)
 8002064:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8002066:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <led_7seg_display+0x104>)
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800206e:	b29a      	uxth	r2, r3
 8002070:	4b27      	ldr	r3, [pc, #156]	; (8002110 <led_7seg_display+0x104>)
 8002072:	801a      	strh	r2, [r3, #0]
		break;
 8002074:	e02d      	b.n	80020d2 <led_7seg_display+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002076:	4b26      	ldr	r3, [pc, #152]	; (8002110 <led_7seg_display+0x104>)
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800207e:	b29a      	uxth	r2, r3
 8002080:	4b23      	ldr	r3, [pc, #140]	; (8002110 <led_7seg_display+0x104>)
 8002082:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8002084:	4b22      	ldr	r3, [pc, #136]	; (8002110 <led_7seg_display+0x104>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	f023 0320 	bic.w	r3, r3, #32
 800208c:	b29a      	uxth	r2, r3
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <led_7seg_display+0x104>)
 8002090:	801a      	strh	r2, [r3, #0]
		break;
 8002092:	e01e      	b.n	80020d2 <led_7seg_display+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002094:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <led_7seg_display+0x104>)
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800209c:	b29a      	uxth	r2, r3
 800209e:	4b1c      	ldr	r3, [pc, #112]	; (8002110 <led_7seg_display+0x104>)
 80020a0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 80020a2:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <led_7seg_display+0x104>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	f023 0310 	bic.w	r3, r3, #16
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	4b18      	ldr	r3, [pc, #96]	; (8002110 <led_7seg_display+0x104>)
 80020ae:	801a      	strh	r2, [r3, #0]
		break;
 80020b0:	e00f      	b.n	80020d2 <led_7seg_display+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80020b2:	4b17      	ldr	r3, [pc, #92]	; (8002110 <led_7seg_display+0x104>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	4b14      	ldr	r3, [pc, #80]	; (8002110 <led_7seg_display+0x104>)
 80020be:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 80020c0:	4b13      	ldr	r3, [pc, #76]	; (8002110 <led_7seg_display+0x104>)
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <led_7seg_display+0x104>)
 80020cc:	801a      	strh	r2, [r3, #0]
		break;
 80020ce:	e000      	b.n	80020d2 <led_7seg_display+0xc6>
	default:
		break;
 80020d0:	bf00      	nop
	}

	led_7seg_index = (led_7seg_index + 1) % 4;
 80020d2:	4b10      	ldr	r3, [pc, #64]	; (8002114 <led_7seg_display+0x108>)
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	3301      	adds	r3, #1
 80020d8:	425a      	negs	r2, r3
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	f002 0203 	and.w	r2, r2, #3
 80020e2:	bf58      	it	pl
 80020e4:	4253      	negpl	r3, r2
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <led_7seg_display+0x108>)
 80020ea:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2140      	movs	r1, #64	; 0x40
 80020f0:	480a      	ldr	r0, [pc, #40]	; (800211c <led_7seg_display+0x110>)
 80020f2:	f000 fedb 	bl	8002eac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*) &spi_buffer, 2, 1);
 80020f6:	2301      	movs	r3, #1
 80020f8:	2202      	movs	r2, #2
 80020fa:	4905      	ldr	r1, [pc, #20]	; (8002110 <led_7seg_display+0x104>)
 80020fc:	4808      	ldr	r0, [pc, #32]	; (8002120 <led_7seg_display+0x114>)
 80020fe:	f001 fbf6 	bl	80038ee <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002102:	2201      	movs	r2, #1
 8002104:	2140      	movs	r1, #64	; 0x40
 8002106:	4805      	ldr	r0, [pc, #20]	; (800211c <led_7seg_display+0x110>)
 8002108:	f000 fed0 	bl	8002eac <HAL_GPIO_WritePin>
}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000008 	.word	0x20000008
 8002114:	2000010e 	.word	0x2000010e
 8002118:	20000004 	.word	0x20000004
 800211c:	40021800 	.word	0x40021800
 8002120:	2000011c 	.word	0x2000011c

08002124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002128:	f000 fb7c 	bl	8002824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800212c:	f000 f818 	bl	8002160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  init_system();
 8002130:	f000 f880 	bl	8002234 <init_system>
  /* USER CODE BEGIN 2 */
  // Debug: Toggle LED to confirm main loop runs
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12); // Green LED, adjust if needed
 8002134:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002138:	4807      	ldr	r0, [pc, #28]	; (8002158 <main+0x34>)
 800213a:	f000 fed0 	bl	8002ede <HAL_GPIO_TogglePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (timer2_flag == 1) {
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <main+0x38>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d1fb      	bne.n	800213e <main+0x1a>
        button_scan(); // Ensure button update
 8002146:	f7fe fa25 	bl	8000594 <button_scan>
        FSM_process();
 800214a:	f7fe fc65 	bl	8000a18 <FSM_process>
        timer2_set(50); // Reset timer
 800214e:	2032      	movs	r0, #50	; 0x32
 8002150:	f000 f8b0 	bl	80022b4 <timer2_set>
    if (timer2_flag == 1) {
 8002154:	e7f3      	b.n	800213e <main+0x1a>
 8002156:	bf00      	nop
 8002158:	40020c00 	.word	0x40020c00
 800215c:	20000110 	.word	0x20000110

08002160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b094      	sub	sp, #80	; 0x50
 8002164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002166:	f107 0320 	add.w	r3, r7, #32
 800216a:	2230      	movs	r2, #48	; 0x30
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f002 fea6 	bl	8004ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002174:	f107 030c 	add.w	r3, r7, #12
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002184:	2300      	movs	r3, #0
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	4b28      	ldr	r3, [pc, #160]	; (800222c <SystemClock_Config+0xcc>)
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	4a27      	ldr	r2, [pc, #156]	; (800222c <SystemClock_Config+0xcc>)
 800218e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002192:	6413      	str	r3, [r2, #64]	; 0x40
 8002194:	4b25      	ldr	r3, [pc, #148]	; (800222c <SystemClock_Config+0xcc>)
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021a0:	2300      	movs	r3, #0
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	4b22      	ldr	r3, [pc, #136]	; (8002230 <SystemClock_Config+0xd0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a21      	ldr	r2, [pc, #132]	; (8002230 <SystemClock_Config+0xd0>)
 80021aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	4b1f      	ldr	r3, [pc, #124]	; (8002230 <SystemClock_Config+0xd0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021bc:	2301      	movs	r3, #1
 80021be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c6:	2302      	movs	r3, #2
 80021c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021d0:	2308      	movs	r3, #8
 80021d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80021d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80021d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021da:	2302      	movs	r3, #2
 80021dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80021de:	2307      	movs	r3, #7
 80021e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021e2:	f107 0320 	add.w	r3, r7, #32
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 fe94 	bl	8002f14 <HAL_RCC_OscConfig>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80021f2:	f000 f845 	bl	8002280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021f6:	230f      	movs	r3, #15
 80021f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021fa:	2302      	movs	r3, #2
 80021fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002202:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002206:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800220c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	2105      	movs	r1, #5
 8002214:	4618      	mov	r0, r3
 8002216:	f001 f8f5 	bl	8003404 <HAL_RCC_ClockConfig>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002220:	f000 f82e 	bl	8002280 <Error_Handler>
  }
}
 8002224:	bf00      	nop
 8002226:	3750      	adds	r7, #80	; 0x50
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40023800 	.word	0x40023800
 8002230:	40007000 	.word	0x40007000

08002234 <init_system>:

/* USER CODE BEGIN 4 */
static void init_system(void) {
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
    MX_GPIO_Init();
 8002238:	f7ff f93a 	bl	80014b0 <MX_GPIO_Init>
    MX_SPI1_Init();
 800223c:	f000 f8be 	bl	80023bc <MX_SPI1_Init>
    MX_TIM2_Init();
 8002240:	f000 f9e8 	bl	8002614 <MX_TIM2_Init>
    MX_TIM4_Init();
 8002244:	f000 fa32 	bl	80026ac <MX_TIM4_Init>
    MX_FSMC_Init();
 8002248:	f7ff f862 	bl	8001310 <MX_FSMC_Init>

    timer2_init();
 800224c:	f000 f81e 	bl	800228c <timer2_init>
    timer4_init();
 8002250:	f000 f826 	bl	80022a0 <timer4_init>

    timer2_set(50);
 8002254:	2032      	movs	r0, #50	; 0x32
 8002256:	f000 f82d 	bl	80022b4 <timer2_set>
    timer4_set(1);
 800225a:	2001      	movs	r0, #1
 800225c:	f000 f846 	bl	80022ec <timer4_set>

    button_init();
 8002260:	f7fe f98c 	bl	800057c <button_init>
    led_7seg_init();
 8002264:	f7ff fec6 	bl	8001ff4 <led_7seg_init>
    lcd_init();
 8002268:	f7ff fbd6 	bl	8001a18 <lcd_init>

    HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1); // backlight on
 800226c:	2201      	movs	r2, #1
 800226e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002272:	4802      	ldr	r0, [pc, #8]	; (800227c <init_system+0x48>)
 8002274:	f000 fe1a 	bl	8002eac <HAL_GPIO_WritePin>
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40020000 	.word	0x40020000

08002280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002284:	b672      	cpsid	i
}
 8002286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8002288:	e7fe      	b.n	8002288 <Error_Handler+0x8>
	...

0800228c <timer2_init>:
/**
 * @brief  	Init timer interrupt
 * @param  	None
 * @retval 	None
 */
void timer2_init(void) {
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <timer2_init+0x10>)
 8002292:	f002 f8df 	bl	8004454 <HAL_TIM_Base_Start_IT>
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000178 	.word	0x20000178

080022a0 <timer4_init>:

void timer4_init(void) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 80022a4:	4802      	ldr	r0, [pc, #8]	; (80022b0 <timer4_init+0x10>)
 80022a6:	f002 f8d5 	bl	8004454 <HAL_TIM_Base_Start_IT>
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200001c0 	.word	0x200001c0

080022b4 <timer2_set>:
/**
 * @brief	Set duration of software timer interrupt
 * @param	duration Duration of software timer interrupt
 * @retval 	None
 */
void timer2_set(int ms) {
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	timer2_mul = ms / TIMER_CYCLE_2;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	b29a      	uxth	r2, r3
 80022c0:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <timer2_set+0x2c>)
 80022c2:	801a      	strh	r2, [r3, #0]
	timer2_counter = timer2_mul;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <timer2_set+0x2c>)
 80022c6:	881a      	ldrh	r2, [r3, #0]
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <timer2_set+0x30>)
 80022ca:	801a      	strh	r2, [r3, #0]
	timer2_flag = 0;
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <timer2_set+0x34>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20000114 	.word	0x20000114
 80022e4:	20000112 	.word	0x20000112
 80022e8:	20000110 	.word	0x20000110

080022ec <timer4_set>:

void timer4_set(int ms) {
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	timer4_mul = ms / TIMER_CYCLE_4;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <timer4_set+0x2c>)
 80022fa:	801a      	strh	r2, [r3, #0]
	timer4_counter = timer4_mul;
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <timer4_set+0x2c>)
 80022fe:	881a      	ldrh	r2, [r3, #0]
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <timer4_set+0x30>)
 8002302:	801a      	strh	r2, [r3, #0]
	timer4_flag = 0;
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <timer4_set+0x34>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	2000011a 	.word	0x2000011a
 800231c:	20000118 	.word	0x20000118
 8002320:	20000116 	.word	0x20000116

08002324 <HAL_TIM_PeriodElapsedCallback>:
 * @brief  	Timer interrupt routine
 * @param  	htim TIM Base handle
 * @note	This callback function is called by system
 * @retval 	None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002334:	d114      	bne.n	8002360 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (timer2_counter > 0) {
 8002336:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d010      	beq.n	8002360 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800233e:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002348:	801a      	strh	r2, [r3, #0]
			if (timer2_counter == 0) {
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_TIM_PeriodElapsedCallback+0x3c>
				timer2_flag = 1;
 8002352:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002354:	2201      	movs	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]
				timer2_counter = timer2_mul;
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800235a:	881a      	ldrh	r2, [r3, #0]
 800235c:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800235e:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	if (htim->Instance == TIM4) {
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a11      	ldr	r2, [pc, #68]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d116      	bne.n	8002398 <HAL_TIM_PeriodElapsedCallback+0x74>
		if (timer4_counter > 0) {
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d010      	beq.n	8002394 <HAL_TIM_PeriodElapsedCallback+0x70>
			timer4_counter--;
 8002372:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800237c:	801a      	strh	r2, [r3, #0]
			if (timer4_counter == 0) {
 800237e:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <HAL_TIM_PeriodElapsedCallback+0x70>
				timer4_flag = 1;
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]
				timer4_counter = timer4_mul;
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800238e:	881a      	ldrh	r2, [r3, #0]
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002392:	801a      	strh	r2, [r3, #0]
			}
		}

		led_7seg_display();
 8002394:	f7ff fe3a 	bl	800200c <led_7seg_display>
	}
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000112 	.word	0x20000112
 80023a4:	20000110 	.word	0x20000110
 80023a8:	20000114 	.word	0x20000114
 80023ac:	40000800 	.word	0x40000800
 80023b0:	20000118 	.word	0x20000118
 80023b4:	20000116 	.word	0x20000116
 80023b8:	2000011a 	.word	0x2000011a

080023bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80023c0:	4b17      	ldr	r3, [pc, #92]	; (8002420 <MX_SPI1_Init+0x64>)
 80023c2:	4a18      	ldr	r2, [pc, #96]	; (8002424 <MX_SPI1_Init+0x68>)
 80023c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023c6:	4b16      	ldr	r3, [pc, #88]	; (8002420 <MX_SPI1_Init+0x64>)
 80023c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023ce:	4b14      	ldr	r3, [pc, #80]	; (8002420 <MX_SPI1_Init+0x64>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <MX_SPI1_Init+0x64>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <MX_SPI1_Init+0x64>)
 80023dc:	2200      	movs	r2, #0
 80023de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <MX_SPI1_Init+0x64>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <MX_SPI1_Init+0x64>)
 80023e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <MX_SPI1_Init+0x64>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023f4:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <MX_SPI1_Init+0x64>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <MX_SPI1_Init+0x64>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002400:	4b07      	ldr	r3, [pc, #28]	; (8002420 <MX_SPI1_Init+0x64>)
 8002402:	2200      	movs	r2, #0
 8002404:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <MX_SPI1_Init+0x64>)
 8002408:	220a      	movs	r2, #10
 800240a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800240c:	4804      	ldr	r0, [pc, #16]	; (8002420 <MX_SPI1_Init+0x64>)
 800240e:	f001 f9e5 	bl	80037dc <HAL_SPI_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002418:	f7ff ff32 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	2000011c 	.word	0x2000011c
 8002424:	40013000 	.word	0x40013000

08002428 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a19      	ldr	r2, [pc, #100]	; (80024ac <HAL_SPI_MspInit+0x84>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d12b      	bne.n	80024a2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <HAL_SPI_MspInit+0x88>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	4a17      	ldr	r2, [pc, #92]	; (80024b0 <HAL_SPI_MspInit+0x88>)
 8002454:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002458:	6453      	str	r3, [r2, #68]	; 0x44
 800245a:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_SPI_MspInit+0x88>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_SPI_MspInit+0x88>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a10      	ldr	r2, [pc, #64]	; (80024b0 <HAL_SPI_MspInit+0x88>)
 8002470:	f043 0302 	orr.w	r3, r3, #2
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_SPI_MspInit+0x88>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002482:	2338      	movs	r3, #56	; 0x38
 8002484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248e:	2303      	movs	r3, #3
 8002490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002492:	2305      	movs	r3, #5
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	4619      	mov	r1, r3
 800249c:	4805      	ldr	r0, [pc, #20]	; (80024b4 <HAL_SPI_MspInit+0x8c>)
 800249e:	f000 fb69 	bl	8002b74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024a2:	bf00      	nop
 80024a4:	3728      	adds	r7, #40	; 0x28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40013000 	.word	0x40013000
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40020400 	.word	0x40020400

080024b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <HAL_MspInit+0x4c>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	4a0f      	ldr	r2, [pc, #60]	; (8002504 <HAL_MspInit+0x4c>)
 80024c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024cc:	6453      	str	r3, [r2, #68]	; 0x44
 80024ce:	4b0d      	ldr	r3, [pc, #52]	; (8002504 <HAL_MspInit+0x4c>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d6:	607b      	str	r3, [r7, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_MspInit+0x4c>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a08      	ldr	r2, [pc, #32]	; (8002504 <HAL_MspInit+0x4c>)
 80024e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_MspInit+0x4c>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800

08002508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800250c:	e7fe      	b.n	800250c <NMI_Handler+0x4>

0800250e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002512:	e7fe      	b.n	8002512 <HardFault_Handler+0x4>

08002514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002518:	e7fe      	b.n	8002518 <MemManage_Handler+0x4>

0800251a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800251e:	e7fe      	b.n	800251e <BusFault_Handler+0x4>

08002520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <UsageFault_Handler+0x4>

08002526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002554:	f000 f9b8 	bl	80028c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}

0800255c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <TIM2_IRQHandler+0x10>)
 8002562:	f001 ffe7 	bl	8004534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000178 	.word	0x20000178

08002570 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <TIM4_IRQHandler+0x10>)
 8002576:	f001 ffdd 	bl	8004534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200001c0 	.word	0x200001c0

08002584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800258c:	4a14      	ldr	r2, [pc, #80]	; (80025e0 <_sbrk+0x5c>)
 800258e:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <_sbrk+0x60>)
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002598:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <_sbrk+0x64>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <_sbrk+0x64>)
 80025a2:	4a12      	ldr	r2, [pc, #72]	; (80025ec <_sbrk+0x68>)
 80025a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <_sbrk+0x64>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d207      	bcs.n	80025c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025b4:	f002 fc8c 	bl	8004ed0 <__errno>
 80025b8:	4603      	mov	r3, r0
 80025ba:	220c      	movs	r2, #12
 80025bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025be:	f04f 33ff 	mov.w	r3, #4294967295
 80025c2:	e009      	b.n	80025d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025c4:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <_sbrk+0x64>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <_sbrk+0x64>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4413      	add	r3, r2
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <_sbrk+0x64>)
 80025d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025d6:	68fb      	ldr	r3, [r7, #12]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20020000 	.word	0x20020000
 80025e4:	00000400 	.word	0x00000400
 80025e8:	20000174 	.word	0x20000174
 80025ec:	20000358 	.word	0x20000358

080025f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <SystemInit+0x20>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	4a05      	ldr	r2, [pc, #20]	; (8002610 <SystemInit+0x20>)
 80025fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800261a:	f107 0308 	add.w	r3, r7, #8
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]
 8002624:	609a      	str	r2, [r3, #8]
 8002626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002628:	463b      	mov	r3, r7
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002630:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <MX_TIM2_Init+0x94>)
 8002632:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002636:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002638:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <MX_TIM2_Init+0x94>)
 800263a:	f240 3247 	movw	r2, #839	; 0x347
 800263e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002640:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <MX_TIM2_Init+0x94>)
 8002642:	2200      	movs	r2, #0
 8002644:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002646:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <MX_TIM2_Init+0x94>)
 8002648:	2263      	movs	r2, #99	; 0x63
 800264a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800264c:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <MX_TIM2_Init+0x94>)
 800264e:	2200      	movs	r2, #0
 8002650:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <MX_TIM2_Init+0x94>)
 8002654:	2200      	movs	r2, #0
 8002656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002658:	4813      	ldr	r0, [pc, #76]	; (80026a8 <MX_TIM2_Init+0x94>)
 800265a:	f001 feab 	bl	80043b4 <HAL_TIM_Base_Init>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002664:	f7ff fe0c 	bl	8002280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800266c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800266e:	f107 0308 	add.w	r3, r7, #8
 8002672:	4619      	mov	r1, r3
 8002674:	480c      	ldr	r0, [pc, #48]	; (80026a8 <MX_TIM2_Init+0x94>)
 8002676:	f002 f865 	bl	8004744 <HAL_TIM_ConfigClockSource>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002680:	f7ff fdfe 	bl	8002280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002684:	2300      	movs	r3, #0
 8002686:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002688:	2300      	movs	r3, #0
 800268a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800268c:	463b      	mov	r3, r7
 800268e:	4619      	mov	r1, r3
 8002690:	4805      	ldr	r0, [pc, #20]	; (80026a8 <MX_TIM2_Init+0x94>)
 8002692:	f002 fa81 	bl	8004b98 <HAL_TIMEx_MasterConfigSynchronization>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800269c:	f7ff fdf0 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026a0:	bf00      	nop
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000178 	.word	0x20000178

080026ac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026b2:	f107 0308 	add.w	r3, r7, #8
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c0:	463b      	mov	r3, r7
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <MX_TIM4_Init+0x94>)
 80026ca:	4a1e      	ldr	r2, [pc, #120]	; (8002744 <MX_TIM4_Init+0x98>)
 80026cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <MX_TIM4_Init+0x94>)
 80026d0:	f240 3247 	movw	r2, #839	; 0x347
 80026d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d6:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <MX_TIM4_Init+0x94>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <MX_TIM4_Init+0x94>)
 80026de:	2263      	movs	r2, #99	; 0x63
 80026e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e2:	4b17      	ldr	r3, [pc, #92]	; (8002740 <MX_TIM4_Init+0x94>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e8:	4b15      	ldr	r3, [pc, #84]	; (8002740 <MX_TIM4_Init+0x94>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80026ee:	4814      	ldr	r0, [pc, #80]	; (8002740 <MX_TIM4_Init+0x94>)
 80026f0:	f001 fe60 	bl	80043b4 <HAL_TIM_Base_Init>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80026fa:	f7ff fdc1 	bl	8002280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002702:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002704:	f107 0308 	add.w	r3, r7, #8
 8002708:	4619      	mov	r1, r3
 800270a:	480d      	ldr	r0, [pc, #52]	; (8002740 <MX_TIM4_Init+0x94>)
 800270c:	f002 f81a 	bl	8004744 <HAL_TIM_ConfigClockSource>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002716:	f7ff fdb3 	bl	8002280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002722:	463b      	mov	r3, r7
 8002724:	4619      	mov	r1, r3
 8002726:	4806      	ldr	r0, [pc, #24]	; (8002740 <MX_TIM4_Init+0x94>)
 8002728:	f002 fa36 	bl	8004b98 <HAL_TIMEx_MasterConfigSynchronization>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002732:	f7ff fda5 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	200001c0 	.word	0x200001c0
 8002744:	40000800 	.word	0x40000800

08002748 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002758:	d116      	bne.n	8002788 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <HAL_TIM_Base_MspInit+0x80>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	4a19      	ldr	r2, [pc, #100]	; (80027c8 <HAL_TIM_Base_MspInit+0x80>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6413      	str	r3, [r2, #64]	; 0x40
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <HAL_TIM_Base_MspInit+0x80>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002776:	2200      	movs	r2, #0
 8002778:	2100      	movs	r1, #0
 800277a:	201c      	movs	r0, #28
 800277c:	f000 f9c3 	bl	8002b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002780:	201c      	movs	r0, #28
 8002782:	f000 f9dc 	bl	8002b3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002786:	e01a      	b.n	80027be <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0f      	ldr	r2, [pc, #60]	; (80027cc <HAL_TIM_Base_MspInit+0x84>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d115      	bne.n	80027be <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <HAL_TIM_Base_MspInit+0x80>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a0b      	ldr	r2, [pc, #44]	; (80027c8 <HAL_TIM_Base_MspInit+0x80>)
 800279c:	f043 0304 	orr.w	r3, r3, #4
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <HAL_TIM_Base_MspInit+0x80>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	201e      	movs	r0, #30
 80027b4:	f000 f9a7 	bl	8002b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027b8:	201e      	movs	r0, #30
 80027ba:	f000 f9c0 	bl	8002b3e <HAL_NVIC_EnableIRQ>
}
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40000800 	.word	0x40000800

080027d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002808 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027d4:	480d      	ldr	r0, [pc, #52]	; (800280c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027d6:	490e      	ldr	r1, [pc, #56]	; (8002810 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027d8:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027dc:	e002      	b.n	80027e4 <LoopCopyDataInit>

080027de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027e2:	3304      	adds	r3, #4

080027e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e8:	d3f9      	bcc.n	80027de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ea:	4a0b      	ldr	r2, [pc, #44]	; (8002818 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027ec:	4c0b      	ldr	r4, [pc, #44]	; (800281c <LoopFillZerobss+0x26>)
  movs r3, #0
 80027ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f0:	e001      	b.n	80027f6 <LoopFillZerobss>

080027f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f4:	3204      	adds	r2, #4

080027f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f8:	d3fb      	bcc.n	80027f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027fa:	f7ff fef9 	bl	80025f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027fe:	f002 fb6d 	bl	8004edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002802:	f7ff fc8f 	bl	8002124 <main>
  bx  lr    
 8002806:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002808:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800280c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002810:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002814:	080088a4 	.word	0x080088a4
  ldr r2, =_sbss
 8002818:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800281c:	20000354 	.word	0x20000354

08002820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002820:	e7fe      	b.n	8002820 <ADC_IRQHandler>
	...

08002824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <HAL_Init+0x40>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0d      	ldr	r2, [pc, #52]	; (8002864 <HAL_Init+0x40>)
 800282e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002832:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_Init+0x40>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <HAL_Init+0x40>)
 800283a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800283e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002840:	4b08      	ldr	r3, [pc, #32]	; (8002864 <HAL_Init+0x40>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a07      	ldr	r2, [pc, #28]	; (8002864 <HAL_Init+0x40>)
 8002846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800284c:	2003      	movs	r0, #3
 800284e:	f000 f94f 	bl	8002af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002852:	200f      	movs	r0, #15
 8002854:	f000 f808 	bl	8002868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002858:	f7ff fe2e 	bl	80024b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023c00 	.word	0x40023c00

08002868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_InitTick+0x54>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_InitTick+0x58>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	4619      	mov	r1, r3
 800287a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800287e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002882:	fbb2 f3f3 	udiv	r3, r2, r3
 8002886:	4618      	mov	r0, r3
 8002888:	f000 f967 	bl	8002b5a <HAL_SYSTICK_Config>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e00e      	b.n	80028b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b0f      	cmp	r3, #15
 800289a:	d80a      	bhi.n	80028b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800289c:	2200      	movs	r2, #0
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
 80028a4:	f000 f92f 	bl	8002b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028a8:	4a06      	ldr	r2, [pc, #24]	; (80028c4 <HAL_InitTick+0x5c>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e000      	b.n	80028b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	2000000c 	.word	0x2000000c
 80028c0:	20000014 	.word	0x20000014
 80028c4:	20000010 	.word	0x20000010

080028c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_IncTick+0x20>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	4b06      	ldr	r3, [pc, #24]	; (80028ec <HAL_IncTick+0x24>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	4a04      	ldr	r2, [pc, #16]	; (80028ec <HAL_IncTick+0x24>)
 80028da:	6013      	str	r3, [r2, #0]
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000014 	.word	0x20000014
 80028ec:	20000208 	.word	0x20000208

080028f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return uwTick;
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <HAL_GetTick+0x14>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20000208 	.word	0x20000208

08002908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002910:	f7ff ffee 	bl	80028f0 <HAL_GetTick>
 8002914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d005      	beq.n	800292e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002922:	4b0a      	ldr	r3, [pc, #40]	; (800294c <HAL_Delay+0x44>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800292e:	bf00      	nop
 8002930:	f7ff ffde 	bl	80028f0 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	429a      	cmp	r2, r3
 800293e:	d8f7      	bhi.n	8002930 <HAL_Delay+0x28>
  {
  }
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000014 	.word	0x20000014

08002950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <__NVIC_SetPriorityGrouping+0x44>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800296c:	4013      	ands	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800297c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002982:	4a04      	ldr	r2, [pc, #16]	; (8002994 <__NVIC_SetPriorityGrouping+0x44>)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	60d3      	str	r3, [r2, #12]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <__NVIC_GetPriorityGrouping+0x18>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	f003 0307 	and.w	r3, r3, #7
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	db0b      	blt.n	80029de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	f003 021f 	and.w	r2, r3, #31
 80029cc:	4907      	ldr	r1, [pc, #28]	; (80029ec <__NVIC_EnableIRQ+0x38>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	2001      	movs	r0, #1
 80029d6:	fa00 f202 	lsl.w	r2, r0, r2
 80029da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000e100 	.word	0xe000e100

080029f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	6039      	str	r1, [r7, #0]
 80029fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	db0a      	blt.n	8002a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	490c      	ldr	r1, [pc, #48]	; (8002a3c <__NVIC_SetPriority+0x4c>)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	440b      	add	r3, r1
 8002a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a18:	e00a      	b.n	8002a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4908      	ldr	r1, [pc, #32]	; (8002a40 <__NVIC_SetPriority+0x50>)
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	3b04      	subs	r3, #4
 8002a28:	0112      	lsls	r2, r2, #4
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	761a      	strb	r2, [r3, #24]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000e100 	.word	0xe000e100
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f1c3 0307 	rsb	r3, r3, #7
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	bf28      	it	cs
 8002a62:	2304      	movcs	r3, #4
 8002a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d902      	bls.n	8002a74 <NVIC_EncodePriority+0x30>
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3b03      	subs	r3, #3
 8002a72:	e000      	b.n	8002a76 <NVIC_EncodePriority+0x32>
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43da      	mvns	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	401a      	ands	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	43d9      	mvns	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9c:	4313      	orrs	r3, r2
         );
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3724      	adds	r7, #36	; 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002abc:	d301      	bcc.n	8002ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00f      	b.n	8002ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <SysTick_Config+0x40>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aca:	210f      	movs	r1, #15
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	f7ff ff8e 	bl	80029f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <SysTick_Config+0x40>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ada:	4b04      	ldr	r3, [pc, #16]	; (8002aec <SysTick_Config+0x40>)
 8002adc:	2207      	movs	r2, #7
 8002ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	e000e010 	.word	0xe000e010

08002af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ff29 	bl	8002950 <__NVIC_SetPriorityGrouping>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b18:	f7ff ff3e 	bl	8002998 <__NVIC_GetPriorityGrouping>
 8002b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	6978      	ldr	r0, [r7, #20]
 8002b24:	f7ff ff8e 	bl	8002a44 <NVIC_EncodePriority>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff5d 	bl	80029f0 <__NVIC_SetPriority>
}
 8002b36:	bf00      	nop
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	4603      	mov	r3, r0
 8002b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff31 	bl	80029b4 <__NVIC_EnableIRQ>
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff ffa2 	bl	8002aac <SysTick_Config>
 8002b68:	4603      	mov	r3, r0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	; 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	e16b      	b.n	8002e68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b90:	2201      	movs	r2, #1
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	f040 815a 	bne.w	8002e62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d005      	beq.n	8002bc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d130      	bne.n	8002c28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 0201 	and.w	r2, r3, #1
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d017      	beq.n	8002c64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	2203      	movs	r2, #3
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d123      	bne.n	8002cb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	08da      	lsrs	r2, r3, #3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3208      	adds	r2, #8
 8002c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	220f      	movs	r2, #15
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	08da      	lsrs	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3208      	adds	r2, #8
 8002cb2:	69b9      	ldr	r1, [r7, #24]
 8002cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0203 	and.w	r2, r3, #3
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80b4 	beq.w	8002e62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	4b60      	ldr	r3, [pc, #384]	; (8002e80 <HAL_GPIO_Init+0x30c>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	4a5f      	ldr	r2, [pc, #380]	; (8002e80 <HAL_GPIO_Init+0x30c>)
 8002d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d08:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0a:	4b5d      	ldr	r3, [pc, #372]	; (8002e80 <HAL_GPIO_Init+0x30c>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d16:	4a5b      	ldr	r2, [pc, #364]	; (8002e84 <HAL_GPIO_Init+0x310>)
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	089b      	lsrs	r3, r3, #2
 8002d1c:	3302      	adds	r3, #2
 8002d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	220f      	movs	r2, #15
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a52      	ldr	r2, [pc, #328]	; (8002e88 <HAL_GPIO_Init+0x314>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d02b      	beq.n	8002d9a <HAL_GPIO_Init+0x226>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a51      	ldr	r2, [pc, #324]	; (8002e8c <HAL_GPIO_Init+0x318>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d025      	beq.n	8002d96 <HAL_GPIO_Init+0x222>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a50      	ldr	r2, [pc, #320]	; (8002e90 <HAL_GPIO_Init+0x31c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d01f      	beq.n	8002d92 <HAL_GPIO_Init+0x21e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a4f      	ldr	r2, [pc, #316]	; (8002e94 <HAL_GPIO_Init+0x320>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d019      	beq.n	8002d8e <HAL_GPIO_Init+0x21a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a4e      	ldr	r2, [pc, #312]	; (8002e98 <HAL_GPIO_Init+0x324>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d013      	beq.n	8002d8a <HAL_GPIO_Init+0x216>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a4d      	ldr	r2, [pc, #308]	; (8002e9c <HAL_GPIO_Init+0x328>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00d      	beq.n	8002d86 <HAL_GPIO_Init+0x212>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a4c      	ldr	r2, [pc, #304]	; (8002ea0 <HAL_GPIO_Init+0x32c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d007      	beq.n	8002d82 <HAL_GPIO_Init+0x20e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a4b      	ldr	r2, [pc, #300]	; (8002ea4 <HAL_GPIO_Init+0x330>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d101      	bne.n	8002d7e <HAL_GPIO_Init+0x20a>
 8002d7a:	2307      	movs	r3, #7
 8002d7c:	e00e      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d7e:	2308      	movs	r3, #8
 8002d80:	e00c      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d82:	2306      	movs	r3, #6
 8002d84:	e00a      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d86:	2305      	movs	r3, #5
 8002d88:	e008      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	e006      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e004      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e002      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	69fa      	ldr	r2, [r7, #28]
 8002d9e:	f002 0203 	and.w	r2, r2, #3
 8002da2:	0092      	lsls	r2, r2, #2
 8002da4:	4093      	lsls	r3, r2
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dac:	4935      	ldr	r1, [pc, #212]	; (8002e84 <HAL_GPIO_Init+0x310>)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	089b      	lsrs	r3, r3, #2
 8002db2:	3302      	adds	r3, #2
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dba:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dde:	4a32      	ldr	r2, [pc, #200]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002de4:	4b30      	ldr	r3, [pc, #192]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e08:	4a27      	ldr	r2, [pc, #156]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e0e:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e32:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e5c:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3301      	adds	r3, #1
 8002e66:	61fb      	str	r3, [r7, #28]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	2b0f      	cmp	r3, #15
 8002e6c:	f67f ae90 	bls.w	8002b90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	3724      	adds	r7, #36	; 0x24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40013800 	.word	0x40013800
 8002e88:	40020000 	.word	0x40020000
 8002e8c:	40020400 	.word	0x40020400
 8002e90:	40020800 	.word	0x40020800
 8002e94:	40020c00 	.word	0x40020c00
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40021400 	.word	0x40021400
 8002ea0:	40021800 	.word	0x40021800
 8002ea4:	40021c00 	.word	0x40021c00
 8002ea8:	40013c00 	.word	0x40013c00

08002eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	807b      	strh	r3, [r7, #2]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ebc:	787b      	ldrb	r3, [r7, #1]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ec8:	e003      	b.n	8002ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eca:	887b      	ldrh	r3, [r7, #2]
 8002ecc:	041a      	lsls	r2, r3, #16
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	619a      	str	r2, [r3, #24]
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ef0:	887a      	ldrh	r2, [r7, #2]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	041a      	lsls	r2, r3, #16
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	43d9      	mvns	r1, r3
 8002efc:	887b      	ldrh	r3, [r7, #2]
 8002efe:	400b      	ands	r3, r1
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	619a      	str	r2, [r3, #24]
}
 8002f06:	bf00      	nop
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
	...

08002f14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e267      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d075      	beq.n	800301e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f32:	4b88      	ldr	r3, [pc, #544]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d00c      	beq.n	8002f58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f3e:	4b85      	ldr	r3, [pc, #532]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d112      	bne.n	8002f70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f4a:	4b82      	ldr	r3, [pc, #520]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f56:	d10b      	bne.n	8002f70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f58:	4b7e      	ldr	r3, [pc, #504]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d05b      	beq.n	800301c <HAL_RCC_OscConfig+0x108>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d157      	bne.n	800301c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e242      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f78:	d106      	bne.n	8002f88 <HAL_RCC_OscConfig+0x74>
 8002f7a:	4b76      	ldr	r3, [pc, #472]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a75      	ldr	r2, [pc, #468]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e01d      	b.n	8002fc4 <HAL_RCC_OscConfig+0xb0>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0x98>
 8002f92:	4b70      	ldr	r3, [pc, #448]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a6f      	ldr	r2, [pc, #444]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	4b6d      	ldr	r3, [pc, #436]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a6c      	ldr	r2, [pc, #432]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e00b      	b.n	8002fc4 <HAL_RCC_OscConfig+0xb0>
 8002fac:	4b69      	ldr	r3, [pc, #420]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a68      	ldr	r2, [pc, #416]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	4b66      	ldr	r3, [pc, #408]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a65      	ldr	r2, [pc, #404]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d013      	beq.n	8002ff4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7ff fc90 	bl	80028f0 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd4:	f7ff fc8c 	bl	80028f0 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b64      	cmp	r3, #100	; 0x64
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e207      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	4b5b      	ldr	r3, [pc, #364]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0xc0>
 8002ff2:	e014      	b.n	800301e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7ff fc7c 	bl	80028f0 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ffc:	f7ff fc78 	bl	80028f0 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	; 0x64
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e1f3      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300e:	4b51      	ldr	r3, [pc, #324]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0xe8>
 800301a:	e000      	b.n	800301e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800301c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d063      	beq.n	80030f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800302a:	4b4a      	ldr	r3, [pc, #296]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003036:	4b47      	ldr	r3, [pc, #284]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800303e:	2b08      	cmp	r3, #8
 8003040:	d11c      	bne.n	800307c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003042:	4b44      	ldr	r3, [pc, #272]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d116      	bne.n	800307c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304e:	4b41      	ldr	r3, [pc, #260]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_RCC_OscConfig+0x152>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d001      	beq.n	8003066 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e1c7      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003066:	4b3b      	ldr	r3, [pc, #236]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4937      	ldr	r1, [pc, #220]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307a:	e03a      	b.n	80030f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003084:	4b34      	ldr	r3, [pc, #208]	; (8003158 <HAL_RCC_OscConfig+0x244>)
 8003086:	2201      	movs	r2, #1
 8003088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308a:	f7ff fc31 	bl	80028f0 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003092:	f7ff fc2d 	bl	80028f0 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e1a8      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	4b2b      	ldr	r3, [pc, #172]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b0:	4b28      	ldr	r3, [pc, #160]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4925      	ldr	r1, [pc, #148]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]
 80030c4:	e015      	b.n	80030f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c6:	4b24      	ldr	r3, [pc, #144]	; (8003158 <HAL_RCC_OscConfig+0x244>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7ff fc10 	bl	80028f0 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d4:	f7ff fc0c 	bl	80028f0 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e187      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d036      	beq.n	800316c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d016      	beq.n	8003134 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003106:	4b15      	ldr	r3, [pc, #84]	; (800315c <HAL_RCC_OscConfig+0x248>)
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310c:	f7ff fbf0 	bl	80028f0 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003114:	f7ff fbec 	bl	80028f0 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e167      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x200>
 8003132:	e01b      	b.n	800316c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003134:	4b09      	ldr	r3, [pc, #36]	; (800315c <HAL_RCC_OscConfig+0x248>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313a:	f7ff fbd9 	bl	80028f0 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003140:	e00e      	b.n	8003160 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003142:	f7ff fbd5 	bl	80028f0 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d907      	bls.n	8003160 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e150      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
 8003154:	40023800 	.word	0x40023800
 8003158:	42470000 	.word	0x42470000
 800315c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003160:	4b88      	ldr	r3, [pc, #544]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1ea      	bne.n	8003142 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 8097 	beq.w	80032a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317a:	2300      	movs	r3, #0
 800317c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317e:	4b81      	ldr	r3, [pc, #516]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10f      	bne.n	80031aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	4b7d      	ldr	r3, [pc, #500]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	4a7c      	ldr	r2, [pc, #496]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003198:	6413      	str	r3, [r2, #64]	; 0x40
 800319a:	4b7a      	ldr	r3, [pc, #488]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a6:	2301      	movs	r3, #1
 80031a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031aa:	4b77      	ldr	r3, [pc, #476]	; (8003388 <HAL_RCC_OscConfig+0x474>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d118      	bne.n	80031e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b6:	4b74      	ldr	r3, [pc, #464]	; (8003388 <HAL_RCC_OscConfig+0x474>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a73      	ldr	r2, [pc, #460]	; (8003388 <HAL_RCC_OscConfig+0x474>)
 80031bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c2:	f7ff fb95 	bl	80028f0 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ca:	f7ff fb91 	bl	80028f0 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e10c      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	4b6a      	ldr	r3, [pc, #424]	; (8003388 <HAL_RCC_OscConfig+0x474>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x2ea>
 80031f0:	4b64      	ldr	r3, [pc, #400]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	4a63      	ldr	r2, [pc, #396]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6713      	str	r3, [r2, #112]	; 0x70
 80031fc:	e01c      	b.n	8003238 <HAL_RCC_OscConfig+0x324>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2b05      	cmp	r3, #5
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x30c>
 8003206:	4b5f      	ldr	r3, [pc, #380]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320a:	4a5e      	ldr	r2, [pc, #376]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800320c:	f043 0304 	orr.w	r3, r3, #4
 8003210:	6713      	str	r3, [r2, #112]	; 0x70
 8003212:	4b5c      	ldr	r3, [pc, #368]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	4a5b      	ldr	r2, [pc, #364]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	6713      	str	r3, [r2, #112]	; 0x70
 800321e:	e00b      	b.n	8003238 <HAL_RCC_OscConfig+0x324>
 8003220:	4b58      	ldr	r3, [pc, #352]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003224:	4a57      	ldr	r2, [pc, #348]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003226:	f023 0301 	bic.w	r3, r3, #1
 800322a:	6713      	str	r3, [r2, #112]	; 0x70
 800322c:	4b55      	ldr	r3, [pc, #340]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800322e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003230:	4a54      	ldr	r2, [pc, #336]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003232:	f023 0304 	bic.w	r3, r3, #4
 8003236:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d015      	beq.n	800326c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7ff fb56 	bl	80028f0 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003246:	e00a      	b.n	800325e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003248:	f7ff fb52 	bl	80028f0 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e0cb      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325e:	4b49      	ldr	r3, [pc, #292]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0ee      	beq.n	8003248 <HAL_RCC_OscConfig+0x334>
 800326a:	e014      	b.n	8003296 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326c:	f7ff fb40 	bl	80028f0 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003272:	e00a      	b.n	800328a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003274:	f7ff fb3c 	bl	80028f0 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e0b5      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328a:	4b3e      	ldr	r3, [pc, #248]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1ee      	bne.n	8003274 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003296:	7dfb      	ldrb	r3, [r7, #23]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d105      	bne.n	80032a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329c:	4b39      	ldr	r3, [pc, #228]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	4a38      	ldr	r2, [pc, #224]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 80032a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80a1 	beq.w	80033f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032b2:	4b34      	ldr	r3, [pc, #208]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d05c      	beq.n	8003378 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d141      	bne.n	800334a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c6:	4b31      	ldr	r3, [pc, #196]	; (800338c <HAL_RCC_OscConfig+0x478>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7ff fb10 	bl	80028f0 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d4:	f7ff fb0c 	bl	80028f0 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e087      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	4b27      	ldr	r3, [pc, #156]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69da      	ldr	r2, [r3, #28]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	019b      	lsls	r3, r3, #6
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	3b01      	subs	r3, #1
 800330c:	041b      	lsls	r3, r3, #16
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	061b      	lsls	r3, r3, #24
 8003316:	491b      	ldr	r1, [pc, #108]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800331c:	4b1b      	ldr	r3, [pc, #108]	; (800338c <HAL_RCC_OscConfig+0x478>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003322:	f7ff fae5 	bl	80028f0 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332a:	f7ff fae1 	bl	80028f0 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e05c      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333c:	4b11      	ldr	r3, [pc, #68]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_OscConfig+0x416>
 8003348:	e054      	b.n	80033f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <HAL_RCC_OscConfig+0x478>)
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003350:	f7ff face 	bl	80028f0 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003358:	f7ff faca 	bl	80028f0 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e045      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	4b06      	ldr	r3, [pc, #24]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0x444>
 8003376:	e03d      	b.n	80033f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d107      	bne.n	8003390 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e038      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
 8003384:	40023800 	.word	0x40023800
 8003388:	40007000 	.word	0x40007000
 800338c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003390:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_RCC_OscConfig+0x4ec>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d028      	beq.n	80033f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d121      	bne.n	80033f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d11a      	bne.n	80033f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033c0:	4013      	ands	r3, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d111      	bne.n	80033f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	085b      	lsrs	r3, r3, #1
 80033d8:	3b01      	subs	r3, #1
 80033da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033dc:	429a      	cmp	r2, r3
 80033de:	d107      	bne.n	80033f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800

08003404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0cc      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003418:	4b68      	ldr	r3, [pc, #416]	; (80035bc <HAL_RCC_ClockConfig+0x1b8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d90c      	bls.n	8003440 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003426:	4b65      	ldr	r3, [pc, #404]	; (80035bc <HAL_RCC_ClockConfig+0x1b8>)
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800342e:	4b63      	ldr	r3, [pc, #396]	; (80035bc <HAL_RCC_ClockConfig+0x1b8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d001      	beq.n	8003440 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e0b8      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d020      	beq.n	800348e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003458:	4b59      	ldr	r3, [pc, #356]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	4a58      	ldr	r2, [pc, #352]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003462:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003470:	4b53      	ldr	r3, [pc, #332]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4a52      	ldr	r2, [pc, #328]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800347a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800347c:	4b50      	ldr	r3, [pc, #320]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	494d      	ldr	r1, [pc, #308]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	4313      	orrs	r3, r2
 800348c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d044      	beq.n	8003524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d107      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d119      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e07f      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d003      	beq.n	80034c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d107      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c2:	4b3f      	ldr	r3, [pc, #252]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d109      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e06f      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d2:	4b3b      	ldr	r3, [pc, #236]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e067      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034e2:	4b37      	ldr	r3, [pc, #220]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f023 0203 	bic.w	r2, r3, #3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4934      	ldr	r1, [pc, #208]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f4:	f7ff f9fc 	bl	80028f0 <HAL_GetTick>
 80034f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fc:	f7ff f9f8 	bl	80028f0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e04f      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003512:	4b2b      	ldr	r3, [pc, #172]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 020c 	and.w	r2, r3, #12
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	429a      	cmp	r2, r3
 8003522:	d1eb      	bne.n	80034fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003524:	4b25      	ldr	r3, [pc, #148]	; (80035bc <HAL_RCC_ClockConfig+0x1b8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d20c      	bcs.n	800354c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b22      	ldr	r3, [pc, #136]	; (80035bc <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	4b20      	ldr	r3, [pc, #128]	; (80035bc <HAL_RCC_ClockConfig+0x1b8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e032      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003558:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	4916      	ldr	r1, [pc, #88]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003576:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	490e      	ldr	r1, [pc, #56]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800358a:	f000 f821 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 800358e:	4602      	mov	r2, r0
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	490a      	ldr	r1, [pc, #40]	; (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 800359c:	5ccb      	ldrb	r3, [r1, r3]
 800359e:	fa22 f303 	lsr.w	r3, r2, r3
 80035a2:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 80035a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff f95c 	bl	8002868 <HAL_InitTick>

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40023c00 	.word	0x40023c00
 80035c0:	40023800 	.word	0x40023800
 80035c4:	08008850 	.word	0x08008850
 80035c8:	2000000c 	.word	0x2000000c
 80035cc:	20000010 	.word	0x20000010

080035d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035d4:	b094      	sub	sp, #80	; 0x50
 80035d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	647b      	str	r3, [r7, #68]	; 0x44
 80035dc:	2300      	movs	r3, #0
 80035de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035e0:	2300      	movs	r3, #0
 80035e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035e8:	4b79      	ldr	r3, [pc, #484]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d00d      	beq.n	8003610 <HAL_RCC_GetSysClockFreq+0x40>
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	f200 80e1 	bhi.w	80037bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x34>
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d003      	beq.n	800360a <HAL_RCC_GetSysClockFreq+0x3a>
 8003602:	e0db      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003604:	4b73      	ldr	r3, [pc, #460]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003606:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003608:	e0db      	b.n	80037c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800360a:	4b73      	ldr	r3, [pc, #460]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800360c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800360e:	e0d8      	b.n	80037c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003610:	4b6f      	ldr	r3, [pc, #444]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003618:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800361a:	4b6d      	ldr	r3, [pc, #436]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d063      	beq.n	80036ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003626:	4b6a      	ldr	r3, [pc, #424]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	099b      	lsrs	r3, r3, #6
 800362c:	2200      	movs	r2, #0
 800362e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003630:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003638:	633b      	str	r3, [r7, #48]	; 0x30
 800363a:	2300      	movs	r3, #0
 800363c:	637b      	str	r3, [r7, #52]	; 0x34
 800363e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003642:	4622      	mov	r2, r4
 8003644:	462b      	mov	r3, r5
 8003646:	f04f 0000 	mov.w	r0, #0
 800364a:	f04f 0100 	mov.w	r1, #0
 800364e:	0159      	lsls	r1, r3, #5
 8003650:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003654:	0150      	lsls	r0, r2, #5
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	4621      	mov	r1, r4
 800365c:	1a51      	subs	r1, r2, r1
 800365e:	6139      	str	r1, [r7, #16]
 8003660:	4629      	mov	r1, r5
 8003662:	eb63 0301 	sbc.w	r3, r3, r1
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003674:	4659      	mov	r1, fp
 8003676:	018b      	lsls	r3, r1, #6
 8003678:	4651      	mov	r1, sl
 800367a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800367e:	4651      	mov	r1, sl
 8003680:	018a      	lsls	r2, r1, #6
 8003682:	4651      	mov	r1, sl
 8003684:	ebb2 0801 	subs.w	r8, r2, r1
 8003688:	4659      	mov	r1, fp
 800368a:	eb63 0901 	sbc.w	r9, r3, r1
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800369a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800369e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036a2:	4690      	mov	r8, r2
 80036a4:	4699      	mov	r9, r3
 80036a6:	4623      	mov	r3, r4
 80036a8:	eb18 0303 	adds.w	r3, r8, r3
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	462b      	mov	r3, r5
 80036b0:	eb49 0303 	adc.w	r3, r9, r3
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036c2:	4629      	mov	r1, r5
 80036c4:	024b      	lsls	r3, r1, #9
 80036c6:	4621      	mov	r1, r4
 80036c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036cc:	4621      	mov	r1, r4
 80036ce:	024a      	lsls	r2, r1, #9
 80036d0:	4610      	mov	r0, r2
 80036d2:	4619      	mov	r1, r3
 80036d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d6:	2200      	movs	r2, #0
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036e0:	f7fc fdce 	bl	8000280 <__aeabi_uldivmod>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4613      	mov	r3, r2
 80036ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036ec:	e058      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ee:	4b38      	ldr	r3, [pc, #224]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	099b      	lsrs	r3, r3, #6
 80036f4:	2200      	movs	r2, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	4611      	mov	r1, r2
 80036fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036fe:	623b      	str	r3, [r7, #32]
 8003700:	2300      	movs	r3, #0
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
 8003704:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003708:	4642      	mov	r2, r8
 800370a:	464b      	mov	r3, r9
 800370c:	f04f 0000 	mov.w	r0, #0
 8003710:	f04f 0100 	mov.w	r1, #0
 8003714:	0159      	lsls	r1, r3, #5
 8003716:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800371a:	0150      	lsls	r0, r2, #5
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4641      	mov	r1, r8
 8003722:	ebb2 0a01 	subs.w	sl, r2, r1
 8003726:	4649      	mov	r1, r9
 8003728:	eb63 0b01 	sbc.w	fp, r3, r1
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003738:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800373c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003740:	ebb2 040a 	subs.w	r4, r2, sl
 8003744:	eb63 050b 	sbc.w	r5, r3, fp
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	00eb      	lsls	r3, r5, #3
 8003752:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003756:	00e2      	lsls	r2, r4, #3
 8003758:	4614      	mov	r4, r2
 800375a:	461d      	mov	r5, r3
 800375c:	4643      	mov	r3, r8
 800375e:	18e3      	adds	r3, r4, r3
 8003760:	603b      	str	r3, [r7, #0]
 8003762:	464b      	mov	r3, r9
 8003764:	eb45 0303 	adc.w	r3, r5, r3
 8003768:	607b      	str	r3, [r7, #4]
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003776:	4629      	mov	r1, r5
 8003778:	028b      	lsls	r3, r1, #10
 800377a:	4621      	mov	r1, r4
 800377c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003780:	4621      	mov	r1, r4
 8003782:	028a      	lsls	r2, r1, #10
 8003784:	4610      	mov	r0, r2
 8003786:	4619      	mov	r1, r3
 8003788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800378a:	2200      	movs	r2, #0
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	61fa      	str	r2, [r7, #28]
 8003790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003794:	f7fc fd74 	bl	8000280 <__aeabi_uldivmod>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4613      	mov	r3, r2
 800379e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	0c1b      	lsrs	r3, r3, #16
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	3301      	adds	r3, #1
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80037b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037ba:	e002      	b.n	80037c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80037be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3750      	adds	r7, #80	; 0x50
 80037c8:	46bd      	mov	sp, r7
 80037ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800
 80037d4:	00f42400 	.word	0x00f42400
 80037d8:	007a1200 	.word	0x007a1200

080037dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e07b      	b.n	80038e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d108      	bne.n	8003808 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037fe:	d009      	beq.n	8003814 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	61da      	str	r2, [r3, #28]
 8003806:	e005      	b.n	8003814 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fe fdfa 	bl	8002428 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800384a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003898:	ea42 0103 	orr.w	r1, r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	0c1b      	lsrs	r3, r3, #16
 80038b2:	f003 0104 	and.w	r1, r3, #4
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	f003 0210 	and.w	r2, r3, #16
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69da      	ldr	r2, [r3, #28]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b088      	sub	sp, #32
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	4613      	mov	r3, r2
 80038fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_SPI_Transmit+0x22>
 800390c:	2302      	movs	r3, #2
 800390e:	e126      	b.n	8003b5e <HAL_SPI_Transmit+0x270>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003918:	f7fe ffea 	bl	80028f0 <HAL_GetTick>
 800391c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800391e:	88fb      	ldrh	r3, [r7, #6]
 8003920:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b01      	cmp	r3, #1
 800392c:	d002      	beq.n	8003934 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800392e:	2302      	movs	r3, #2
 8003930:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003932:	e10b      	b.n	8003b4c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_SPI_Transmit+0x52>
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d102      	bne.n	8003946 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003944:	e102      	b.n	8003b4c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2203      	movs	r2, #3
 800394a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	88fa      	ldrh	r2, [r7, #6]
 800395e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	88fa      	ldrh	r2, [r7, #6]
 8003964:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800398c:	d10f      	bne.n	80039ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800399c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b8:	2b40      	cmp	r3, #64	; 0x40
 80039ba:	d007      	beq.n	80039cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d4:	d14b      	bne.n	8003a6e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_SPI_Transmit+0xf6>
 80039de:	8afb      	ldrh	r3, [r7, #22]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d13e      	bne.n	8003a62 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	881a      	ldrh	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f4:	1c9a      	adds	r2, r3, #2
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a08:	e02b      	b.n	8003a62 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d112      	bne.n	8003a3e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	881a      	ldrh	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	1c9a      	adds	r2, r3, #2
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a3c:	e011      	b.n	8003a62 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a3e:	f7fe ff57 	bl	80028f0 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d803      	bhi.n	8003a56 <HAL_SPI_Transmit+0x168>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d102      	bne.n	8003a5c <HAL_SPI_Transmit+0x16e>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d102      	bne.n	8003a62 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a60:	e074      	b.n	8003b4c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1ce      	bne.n	8003a0a <HAL_SPI_Transmit+0x11c>
 8003a6c:	e04c      	b.n	8003b08 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_SPI_Transmit+0x18e>
 8003a76:	8afb      	ldrh	r3, [r7, #22]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d140      	bne.n	8003afe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	330c      	adds	r3, #12
 8003a86:	7812      	ldrb	r2, [r2, #0]
 8003a88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003aa2:	e02c      	b.n	8003afe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d113      	bne.n	8003ada <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	330c      	adds	r3, #12
 8003abc:	7812      	ldrb	r2, [r2, #0]
 8003abe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ad8:	e011      	b.n	8003afe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ada:	f7fe ff09 	bl	80028f0 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d803      	bhi.n	8003af2 <HAL_SPI_Transmit+0x204>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af0:	d102      	bne.n	8003af8 <HAL_SPI_Transmit+0x20a>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d102      	bne.n	8003afe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003afc:	e026      	b.n	8003b4c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1cd      	bne.n	8003aa4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	6839      	ldr	r1, [r7, #0]
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 fbcb 	bl	80042a8 <SPI_EndRxTxTransaction>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	77fb      	strb	r3, [r7, #31]
 8003b48:	e000      	b.n	8003b4c <HAL_SPI_Transmit+0x25e>
  }

error:
 8003b4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b088      	sub	sp, #32
 8003b6a:	af02      	add	r7, sp, #8
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	603b      	str	r3, [r7, #0]
 8003b72:	4613      	mov	r3, r2
 8003b74:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b82:	d112      	bne.n	8003baa <HAL_SPI_Receive+0x44>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10e      	bne.n	8003baa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2204      	movs	r2, #4
 8003b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b94:	88fa      	ldrh	r2, [r7, #6]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f8f1 	bl	8003d88 <HAL_SPI_TransmitReceive>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	e0ea      	b.n	8003d80 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_SPI_Receive+0x52>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e0e3      	b.n	8003d80 <HAL_SPI_Receive+0x21a>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bc0:	f7fe fe96 	bl	80028f0 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d002      	beq.n	8003bd8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bd6:	e0ca      	b.n	8003d6e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_SPI_Receive+0x7e>
 8003bde:	88fb      	ldrh	r3, [r7, #6]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d102      	bne.n	8003bea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003be8:	e0c1      	b.n	8003d6e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2204      	movs	r2, #4
 8003bee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	88fa      	ldrh	r2, [r7, #6]
 8003c02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	88fa      	ldrh	r2, [r7, #6]
 8003c08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c30:	d10f      	bne.n	8003c52 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c50:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5c:	2b40      	cmp	r3, #64	; 0x40
 8003c5e:	d007      	beq.n	8003c70 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c6e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d162      	bne.n	8003d3e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c78:	e02e      	b.n	8003cd8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d115      	bne.n	8003cb4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f103 020c 	add.w	r2, r3, #12
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	7812      	ldrb	r2, [r2, #0]
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cb2:	e011      	b.n	8003cd8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cb4:	f7fe fe1c 	bl	80028f0 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d803      	bhi.n	8003ccc <HAL_SPI_Receive+0x166>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cca:	d102      	bne.n	8003cd2 <HAL_SPI_Receive+0x16c>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d102      	bne.n	8003cd8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003cd6:	e04a      	b.n	8003d6e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1cb      	bne.n	8003c7a <HAL_SPI_Receive+0x114>
 8003ce2:	e031      	b.n	8003d48 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d113      	bne.n	8003d1a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	b292      	uxth	r2, r2
 8003cfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	1c9a      	adds	r2, r3, #2
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d18:	e011      	b.n	8003d3e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d1a:	f7fe fde9 	bl	80028f0 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d803      	bhi.n	8003d32 <HAL_SPI_Receive+0x1cc>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d30:	d102      	bne.n	8003d38 <HAL_SPI_Receive+0x1d2>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d102      	bne.n	8003d3e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d3c:	e017      	b.n	8003d6e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1cd      	bne.n	8003ce4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	6839      	ldr	r1, [r7, #0]
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 fa45 	bl	80041dc <SPI_EndRxTransaction>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	75fb      	strb	r3, [r7, #23]
 8003d6a:	e000      	b.n	8003d6e <HAL_SPI_Receive+0x208>
  }

error :
 8003d6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08c      	sub	sp, #48	; 0x30
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d96:	2301      	movs	r3, #1
 8003d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_SPI_TransmitReceive+0x26>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e18a      	b.n	80040c4 <HAL_SPI_TransmitReceive+0x33c>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003db6:	f7fe fd9b 	bl	80028f0 <HAL_GetTick>
 8003dba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003dcc:	887b      	ldrh	r3, [r7, #2]
 8003dce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d00f      	beq.n	8003df8 <HAL_SPI_TransmitReceive+0x70>
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dde:	d107      	bne.n	8003df0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d103      	bne.n	8003df0 <HAL_SPI_TransmitReceive+0x68>
 8003de8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d003      	beq.n	8003df8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003df0:	2302      	movs	r3, #2
 8003df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003df6:	e15b      	b.n	80040b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d005      	beq.n	8003e0a <HAL_SPI_TransmitReceive+0x82>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <HAL_SPI_TransmitReceive+0x82>
 8003e04:	887b      	ldrh	r3, [r7, #2]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d103      	bne.n	8003e12 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e10:	e14e      	b.n	80040b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d003      	beq.n	8003e26 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2205      	movs	r2, #5
 8003e22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	887a      	ldrh	r2, [r7, #2]
 8003e36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	887a      	ldrh	r2, [r7, #2]
 8003e3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	887a      	ldrh	r2, [r7, #2]
 8003e48:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	887a      	ldrh	r2, [r7, #2]
 8003e4e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e66:	2b40      	cmp	r3, #64	; 0x40
 8003e68:	d007      	beq.n	8003e7a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e82:	d178      	bne.n	8003f76 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <HAL_SPI_TransmitReceive+0x10a>
 8003e8c:	8b7b      	ldrh	r3, [r7, #26]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d166      	bne.n	8003f60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	881a      	ldrh	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	1c9a      	adds	r2, r3, #2
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eb6:	e053      	b.n	8003f60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d11b      	bne.n	8003efe <HAL_SPI_TransmitReceive+0x176>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d016      	beq.n	8003efe <HAL_SPI_TransmitReceive+0x176>
 8003ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d113      	bne.n	8003efe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	881a      	ldrh	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	1c9a      	adds	r2, r3, #2
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d119      	bne.n	8003f40 <HAL_SPI_TransmitReceive+0x1b8>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d014      	beq.n	8003f40 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	b292      	uxth	r2, r2
 8003f22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	1c9a      	adds	r2, r3, #2
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f40:	f7fe fcd6 	bl	80028f0 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d807      	bhi.n	8003f60 <HAL_SPI_TransmitReceive+0x1d8>
 8003f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f56:	d003      	beq.n	8003f60 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f5e:	e0a7      	b.n	80040b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1a6      	bne.n	8003eb8 <HAL_SPI_TransmitReceive+0x130>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1a1      	bne.n	8003eb8 <HAL_SPI_TransmitReceive+0x130>
 8003f74:	e07c      	b.n	8004070 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_SPI_TransmitReceive+0x1fc>
 8003f7e:	8b7b      	ldrh	r3, [r7, #26]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d16b      	bne.n	800405c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	7812      	ldrb	r2, [r2, #0]
 8003f90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003faa:	e057      	b.n	800405c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d11c      	bne.n	8003ff4 <HAL_SPI_TransmitReceive+0x26c>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d017      	beq.n	8003ff4 <HAL_SPI_TransmitReceive+0x26c>
 8003fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d114      	bne.n	8003ff4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	330c      	adds	r3, #12
 8003fd4:	7812      	ldrb	r2, [r2, #0]
 8003fd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d119      	bne.n	8004036 <HAL_SPI_TransmitReceive+0x2ae>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d014      	beq.n	8004036 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004028:	b29b      	uxth	r3, r3
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004032:	2301      	movs	r3, #1
 8004034:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004036:	f7fe fc5b 	bl	80028f0 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004042:	429a      	cmp	r2, r3
 8004044:	d803      	bhi.n	800404e <HAL_SPI_TransmitReceive+0x2c6>
 8004046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404c:	d102      	bne.n	8004054 <HAL_SPI_TransmitReceive+0x2cc>
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004050:	2b00      	cmp	r3, #0
 8004052:	d103      	bne.n	800405c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800405a:	e029      	b.n	80040b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1a2      	bne.n	8003fac <HAL_SPI_TransmitReceive+0x224>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d19d      	bne.n	8003fac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004072:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f917 	bl	80042a8 <SPI_EndRxTxTransaction>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d006      	beq.n	800408e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800408c:	e010      	b.n	80040b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10b      	bne.n	80040ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	e000      	b.n	80040b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80040ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3730      	adds	r7, #48	; 0x30
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	4613      	mov	r3, r2
 80040da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040dc:	f7fe fc08 	bl	80028f0 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	4413      	add	r3, r2
 80040ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040ec:	f7fe fc00 	bl	80028f0 <HAL_GetTick>
 80040f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040f2:	4b39      	ldr	r3, [pc, #228]	; (80041d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	015b      	lsls	r3, r3, #5
 80040f8:	0d1b      	lsrs	r3, r3, #20
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	fb02 f303 	mul.w	r3, r2, r3
 8004100:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004102:	e054      	b.n	80041ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410a:	d050      	beq.n	80041ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800410c:	f7fe fbf0 	bl	80028f0 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	69fa      	ldr	r2, [r7, #28]
 8004118:	429a      	cmp	r2, r3
 800411a:	d902      	bls.n	8004122 <SPI_WaitFlagStateUntilTimeout+0x56>
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d13d      	bne.n	800419e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004130:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800413a:	d111      	bne.n	8004160 <SPI_WaitFlagStateUntilTimeout+0x94>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004144:	d004      	beq.n	8004150 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414e:	d107      	bne.n	8004160 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800415e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004168:	d10f      	bne.n	800418a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004188:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e017      	b.n	80041ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	4013      	ands	r3, r2
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	bf0c      	ite	eq
 80041be:	2301      	moveq	r3, #1
 80041c0:	2300      	movne	r3, #0
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	461a      	mov	r2, r3
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d19b      	bne.n	8004104 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	2000000c 	.word	0x2000000c

080041dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041f0:	d111      	bne.n	8004216 <SPI_EndRxTransaction+0x3a>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fa:	d004      	beq.n	8004206 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004204:	d107      	bne.n	8004216 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004214:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800421e:	d12a      	bne.n	8004276 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004228:	d012      	beq.n	8004250 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2200      	movs	r2, #0
 8004232:	2180      	movs	r1, #128	; 0x80
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f7ff ff49 	bl	80040cc <SPI_WaitFlagStateUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d02d      	beq.n	800429c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004244:	f043 0220 	orr.w	r2, r3, #32
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e026      	b.n	800429e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2200      	movs	r2, #0
 8004258:	2101      	movs	r1, #1
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f7ff ff36 	bl	80040cc <SPI_WaitFlagStateUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d01a      	beq.n	800429c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	f043 0220 	orr.w	r2, r3, #32
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e013      	b.n	800429e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2200      	movs	r2, #0
 800427e:	2101      	movs	r1, #1
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f7ff ff23 	bl	80040cc <SPI_WaitFlagStateUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d007      	beq.n	800429c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004290:	f043 0220 	orr.w	r2, r3, #32
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e000      	b.n	800429e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042b4:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <SPI_EndRxTxTransaction+0x7c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1b      	ldr	r2, [pc, #108]	; (8004328 <SPI_EndRxTxTransaction+0x80>)
 80042ba:	fba2 2303 	umull	r2, r3, r2, r3
 80042be:	0d5b      	lsrs	r3, r3, #21
 80042c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042c4:	fb02 f303 	mul.w	r3, r2, r3
 80042c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042d2:	d112      	bne.n	80042fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2200      	movs	r2, #0
 80042dc:	2180      	movs	r1, #128	; 0x80
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f7ff fef4 	bl	80040cc <SPI_WaitFlagStateUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d016      	beq.n	8004318 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ee:	f043 0220 	orr.w	r2, r3, #32
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e00f      	b.n	800431a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	3b01      	subs	r3, #1
 8004304:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004310:	2b80      	cmp	r3, #128	; 0x80
 8004312:	d0f2      	beq.n	80042fa <SPI_EndRxTxTransaction+0x52>
 8004314:	e000      	b.n	8004318 <SPI_EndRxTxTransaction+0x70>
        break;
 8004316:	bf00      	nop
  }

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	2000000c 	.word	0x2000000c
 8004328:	165e9f81 	.word	0x165e9f81

0800432c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e034      	b.n	80043ac <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f7fd f8a0 	bl	800149c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	3308      	adds	r3, #8
 8004364:	4619      	mov	r1, r3
 8004366:	4610      	mov	r0, r2
 8004368:	f000 fca6 	bl	8004cb8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	461a      	mov	r2, r3
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	f000 fcf0 	bl	8004d5c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6858      	ldr	r0, [r3, #4]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	f000 fd25 	bl	8004dd8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	6892      	ldr	r2, [r2, #8]
 8004396:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	6892      	ldr	r2, [r2, #8]
 80043a2:	f041 0101 	orr.w	r1, r1, #1
 80043a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e041      	b.n	800444a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d106      	bne.n	80043e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fe f9b4 	bl	8002748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3304      	adds	r3, #4
 80043f0:	4619      	mov	r1, r3
 80043f2:	4610      	mov	r0, r2
 80043f4:	f000 fa96 	bl	8004924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b01      	cmp	r3, #1
 8004466:	d001      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e04e      	b.n	800450a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a23      	ldr	r2, [pc, #140]	; (8004518 <HAL_TIM_Base_Start_IT+0xc4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d022      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x80>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004496:	d01d      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x80>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1f      	ldr	r2, [pc, #124]	; (800451c <HAL_TIM_Base_Start_IT+0xc8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d018      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x80>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1e      	ldr	r2, [pc, #120]	; (8004520 <HAL_TIM_Base_Start_IT+0xcc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d013      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x80>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1c      	ldr	r2, [pc, #112]	; (8004524 <HAL_TIM_Base_Start_IT+0xd0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00e      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x80>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1b      	ldr	r2, [pc, #108]	; (8004528 <HAL_TIM_Base_Start_IT+0xd4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d009      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x80>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a19      	ldr	r2, [pc, #100]	; (800452c <HAL_TIM_Base_Start_IT+0xd8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d004      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x80>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a18      	ldr	r2, [pc, #96]	; (8004530 <HAL_TIM_Base_Start_IT+0xdc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d111      	bne.n	80044f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b06      	cmp	r3, #6
 80044e4:	d010      	beq.n	8004508 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0201 	orr.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f6:	e007      	b.n	8004508 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40010000 	.word	0x40010000
 800451c:	40000400 	.word	0x40000400
 8004520:	40000800 	.word	0x40000800
 8004524:	40000c00 	.word	0x40000c00
 8004528:	40010400 	.word	0x40010400
 800452c:	40014000 	.word	0x40014000
 8004530:	40001800 	.word	0x40001800

08004534 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b02      	cmp	r3, #2
 8004548:	d122      	bne.n	8004590 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b02      	cmp	r3, #2
 8004556:	d11b      	bne.n	8004590 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0202 	mvn.w	r2, #2
 8004560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f9b5 	bl	80048e6 <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f9a7 	bl	80048d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f9b8 	bl	80048fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b04      	cmp	r3, #4
 800459c:	d122      	bne.n	80045e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d11b      	bne.n	80045e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0204 	mvn.w	r2, #4
 80045b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2202      	movs	r2, #2
 80045ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f98b 	bl	80048e6 <HAL_TIM_IC_CaptureCallback>
 80045d0:	e005      	b.n	80045de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f97d 	bl	80048d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f98e 	bl	80048fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d122      	bne.n	8004638 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d11b      	bne.n	8004638 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0208 	mvn.w	r2, #8
 8004608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2204      	movs	r2, #4
 800460e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f961 	bl	80048e6 <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f953 	bl	80048d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f964 	bl	80048fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	2b10      	cmp	r3, #16
 8004644:	d122      	bne.n	800468c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b10      	cmp	r3, #16
 8004652:	d11b      	bne.n	800468c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0210 	mvn.w	r2, #16
 800465c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2208      	movs	r2, #8
 8004662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f937 	bl	80048e6 <HAL_TIM_IC_CaptureCallback>
 8004678:	e005      	b.n	8004686 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f929 	bl	80048d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f93a 	bl	80048fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b01      	cmp	r3, #1
 8004698:	d10e      	bne.n	80046b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d107      	bne.n	80046b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0201 	mvn.w	r2, #1
 80046b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fd fe36 	bl	8002324 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c2:	2b80      	cmp	r3, #128	; 0x80
 80046c4:	d10e      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d0:	2b80      	cmp	r3, #128	; 0x80
 80046d2:	d107      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fae0 	bl	8004ca4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d10e      	bne.n	8004710 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b40      	cmp	r3, #64	; 0x40
 80046fe:	d107      	bne.n	8004710 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f8ff 	bl	800490e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b20      	cmp	r3, #32
 800471c:	d10e      	bne.n	800473c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 0320 	and.w	r3, r3, #32
 8004728:	2b20      	cmp	r3, #32
 800472a:	d107      	bne.n	800473c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0220 	mvn.w	r2, #32
 8004734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 faaa 	bl	8004c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800473c:	bf00      	nop
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_TIM_ConfigClockSource+0x1c>
 800475c:	2302      	movs	r3, #2
 800475e:	e0b4      	b.n	80048ca <HAL_TIM_ConfigClockSource+0x186>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800477e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004798:	d03e      	beq.n	8004818 <HAL_TIM_ConfigClockSource+0xd4>
 800479a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800479e:	f200 8087 	bhi.w	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a6:	f000 8086 	beq.w	80048b6 <HAL_TIM_ConfigClockSource+0x172>
 80047aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ae:	d87f      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047b0:	2b70      	cmp	r3, #112	; 0x70
 80047b2:	d01a      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0xa6>
 80047b4:	2b70      	cmp	r3, #112	; 0x70
 80047b6:	d87b      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047b8:	2b60      	cmp	r3, #96	; 0x60
 80047ba:	d050      	beq.n	800485e <HAL_TIM_ConfigClockSource+0x11a>
 80047bc:	2b60      	cmp	r3, #96	; 0x60
 80047be:	d877      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047c0:	2b50      	cmp	r3, #80	; 0x50
 80047c2:	d03c      	beq.n	800483e <HAL_TIM_ConfigClockSource+0xfa>
 80047c4:	2b50      	cmp	r3, #80	; 0x50
 80047c6:	d873      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d058      	beq.n	800487e <HAL_TIM_ConfigClockSource+0x13a>
 80047cc:	2b40      	cmp	r3, #64	; 0x40
 80047ce:	d86f      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047d0:	2b30      	cmp	r3, #48	; 0x30
 80047d2:	d064      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x15a>
 80047d4:	2b30      	cmp	r3, #48	; 0x30
 80047d6:	d86b      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d060      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x15a>
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d867      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d05c      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x15a>
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d05a      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x15a>
 80047e8:	e062      	b.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6899      	ldr	r1, [r3, #8]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f000 f9ad 	bl	8004b58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800480c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	609a      	str	r2, [r3, #8]
      break;
 8004816:	e04f      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	6899      	ldr	r1, [r3, #8]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f000 f996 	bl	8004b58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800483a:	609a      	str	r2, [r3, #8]
      break;
 800483c:	e03c      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	6859      	ldr	r1, [r3, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	461a      	mov	r2, r3
 800484c:	f000 f90a 	bl	8004a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2150      	movs	r1, #80	; 0x50
 8004856:	4618      	mov	r0, r3
 8004858:	f000 f963 	bl	8004b22 <TIM_ITRx_SetConfig>
      break;
 800485c:	e02c      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	6859      	ldr	r1, [r3, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	461a      	mov	r2, r3
 800486c:	f000 f929 	bl	8004ac2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2160      	movs	r1, #96	; 0x60
 8004876:	4618      	mov	r0, r3
 8004878:	f000 f953 	bl	8004b22 <TIM_ITRx_SetConfig>
      break;
 800487c:	e01c      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6859      	ldr	r1, [r3, #4]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	461a      	mov	r2, r3
 800488c:	f000 f8ea 	bl	8004a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2140      	movs	r1, #64	; 0x40
 8004896:	4618      	mov	r0, r3
 8004898:	f000 f943 	bl	8004b22 <TIM_ITRx_SetConfig>
      break;
 800489c:	e00c      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4619      	mov	r1, r3
 80048a8:	4610      	mov	r0, r2
 80048aa:	f000 f93a 	bl	8004b22 <TIM_ITRx_SetConfig>
      break;
 80048ae:	e003      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
      break;
 80048b4:	e000      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
	...

08004924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a40      	ldr	r2, [pc, #256]	; (8004a38 <TIM_Base_SetConfig+0x114>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d013      	beq.n	8004964 <TIM_Base_SetConfig+0x40>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004942:	d00f      	beq.n	8004964 <TIM_Base_SetConfig+0x40>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a3d      	ldr	r2, [pc, #244]	; (8004a3c <TIM_Base_SetConfig+0x118>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00b      	beq.n	8004964 <TIM_Base_SetConfig+0x40>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a3c      	ldr	r2, [pc, #240]	; (8004a40 <TIM_Base_SetConfig+0x11c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d007      	beq.n	8004964 <TIM_Base_SetConfig+0x40>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a3b      	ldr	r2, [pc, #236]	; (8004a44 <TIM_Base_SetConfig+0x120>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d003      	beq.n	8004964 <TIM_Base_SetConfig+0x40>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a3a      	ldr	r2, [pc, #232]	; (8004a48 <TIM_Base_SetConfig+0x124>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d108      	bne.n	8004976 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a2f      	ldr	r2, [pc, #188]	; (8004a38 <TIM_Base_SetConfig+0x114>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d02b      	beq.n	80049d6 <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004984:	d027      	beq.n	80049d6 <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a2c      	ldr	r2, [pc, #176]	; (8004a3c <TIM_Base_SetConfig+0x118>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d023      	beq.n	80049d6 <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a2b      	ldr	r2, [pc, #172]	; (8004a40 <TIM_Base_SetConfig+0x11c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d01f      	beq.n	80049d6 <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a2a      	ldr	r2, [pc, #168]	; (8004a44 <TIM_Base_SetConfig+0x120>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d01b      	beq.n	80049d6 <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a29      	ldr	r2, [pc, #164]	; (8004a48 <TIM_Base_SetConfig+0x124>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d017      	beq.n	80049d6 <TIM_Base_SetConfig+0xb2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a28      	ldr	r2, [pc, #160]	; (8004a4c <TIM_Base_SetConfig+0x128>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a27      	ldr	r2, [pc, #156]	; (8004a50 <TIM_Base_SetConfig+0x12c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d00f      	beq.n	80049d6 <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a26      	ldr	r2, [pc, #152]	; (8004a54 <TIM_Base_SetConfig+0x130>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00b      	beq.n	80049d6 <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a25      	ldr	r2, [pc, #148]	; (8004a58 <TIM_Base_SetConfig+0x134>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d007      	beq.n	80049d6 <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a24      	ldr	r2, [pc, #144]	; (8004a5c <TIM_Base_SetConfig+0x138>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d003      	beq.n	80049d6 <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a23      	ldr	r2, [pc, #140]	; (8004a60 <TIM_Base_SetConfig+0x13c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d108      	bne.n	80049e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a0a      	ldr	r2, [pc, #40]	; (8004a38 <TIM_Base_SetConfig+0x114>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d003      	beq.n	8004a1c <TIM_Base_SetConfig+0xf8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a0c      	ldr	r2, [pc, #48]	; (8004a48 <TIM_Base_SetConfig+0x124>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d103      	bne.n	8004a24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	615a      	str	r2, [r3, #20]
}
 8004a2a:	bf00      	nop
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40010000 	.word	0x40010000
 8004a3c:	40000400 	.word	0x40000400
 8004a40:	40000800 	.word	0x40000800
 8004a44:	40000c00 	.word	0x40000c00
 8004a48:	40010400 	.word	0x40010400
 8004a4c:	40014000 	.word	0x40014000
 8004a50:	40014400 	.word	0x40014400
 8004a54:	40014800 	.word	0x40014800
 8004a58:	40001800 	.word	0x40001800
 8004a5c:	40001c00 	.word	0x40001c00
 8004a60:	40002000 	.word	0x40002000

08004a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	f023 0201 	bic.w	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f023 030a 	bic.w	r3, r3, #10
 8004aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	621a      	str	r2, [r3, #32]
}
 8004ab6:	bf00      	nop
 8004ab8:	371c      	adds	r7, #28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b087      	sub	sp, #28
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	f023 0210 	bic.w	r2, r3, #16
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004aec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	031b      	lsls	r3, r3, #12
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004afe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	621a      	str	r2, [r3, #32]
}
 8004b16:	bf00      	nop
 8004b18:	371c      	adds	r7, #28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b085      	sub	sp, #20
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f043 0307 	orr.w	r3, r3, #7
 8004b44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	609a      	str	r2, [r3, #8]
}
 8004b4c:	bf00      	nop
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	021a      	lsls	r2, r3, #8
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	609a      	str	r2, [r3, #8]
}
 8004b8c:	bf00      	nop
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e05a      	b.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a21      	ldr	r2, [pc, #132]	; (8004c74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d022      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfc:	d01d      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1d      	ldr	r2, [pc, #116]	; (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d018      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1b      	ldr	r2, [pc, #108]	; (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d013      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1a      	ldr	r2, [pc, #104]	; (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d00e      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a18      	ldr	r2, [pc, #96]	; (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d009      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a17      	ldr	r2, [pc, #92]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d004      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d10c      	bne.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40010000 	.word	0x40010000
 8004c78:	40000400 	.word	0x40000400
 8004c7c:	40000800 	.word	0x40000800
 8004c80:	40000c00 	.word	0x40000c00
 8004c84:	40010400 	.word	0x40010400
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	40001800 	.word	0x40001800

08004c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cd0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4b20      	ldr	r3, [pc, #128]	; (8004d58 <FSMC_NORSRAM_Init+0xa0>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004ce2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004ce8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8004cee:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004cf4:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8004cfa:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8004d00:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8004d06:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8004d0c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8004d12:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8004d18:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8004d1e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8004d24:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d103      	bne.n	8004d3c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d3a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68f9      	ldr	r1, [r7, #12]
 8004d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	fff00080 	.word	0xfff00080

08004d5c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d76:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004d7e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004d8a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004d92:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004d9a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004da4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	3b02      	subs	r3, #2
 8004dac:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004dae:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004db4:	4313      	orrs	r3, r2
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6979      	ldr	r1, [r7, #20]
 8004dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004df0:	d122      	bne.n	8004e38 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dfa:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	4b15      	ldr	r3, [pc, #84]	; (8004e54 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004e0e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004e16:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8004e1e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004e24:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6979      	ldr	r1, [r7, #20]
 8004e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004e36:	e005      	b.n	8004e44 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	cff00000 	.word	0xcff00000

08004e58 <sniprintf>:
 8004e58:	b40c      	push	{r2, r3}
 8004e5a:	b530      	push	{r4, r5, lr}
 8004e5c:	4b17      	ldr	r3, [pc, #92]	; (8004ebc <sniprintf+0x64>)
 8004e5e:	1e0c      	subs	r4, r1, #0
 8004e60:	681d      	ldr	r5, [r3, #0]
 8004e62:	b09d      	sub	sp, #116	; 0x74
 8004e64:	da08      	bge.n	8004e78 <sniprintf+0x20>
 8004e66:	238b      	movs	r3, #139	; 0x8b
 8004e68:	602b      	str	r3, [r5, #0]
 8004e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6e:	b01d      	add	sp, #116	; 0x74
 8004e70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e74:	b002      	add	sp, #8
 8004e76:	4770      	bx	lr
 8004e78:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004e7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004e80:	bf14      	ite	ne
 8004e82:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004e86:	4623      	moveq	r3, r4
 8004e88:	9304      	str	r3, [sp, #16]
 8004e8a:	9307      	str	r3, [sp, #28]
 8004e8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e90:	9002      	str	r0, [sp, #8]
 8004e92:	9006      	str	r0, [sp, #24]
 8004e94:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004e98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004e9a:	ab21      	add	r3, sp, #132	; 0x84
 8004e9c:	a902      	add	r1, sp, #8
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	f000 f993 	bl	80051cc <_svfiprintf_r>
 8004ea6:	1c43      	adds	r3, r0, #1
 8004ea8:	bfbc      	itt	lt
 8004eaa:	238b      	movlt	r3, #139	; 0x8b
 8004eac:	602b      	strlt	r3, [r5, #0]
 8004eae:	2c00      	cmp	r4, #0
 8004eb0:	d0dd      	beq.n	8004e6e <sniprintf+0x16>
 8004eb2:	9b02      	ldr	r3, [sp, #8]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	e7d9      	b.n	8004e6e <sniprintf+0x16>
 8004eba:	bf00      	nop
 8004ebc:	20000064 	.word	0x20000064

08004ec0 <memset>:
 8004ec0:	4402      	add	r2, r0
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d100      	bne.n	8004eca <memset+0xa>
 8004ec8:	4770      	bx	lr
 8004eca:	f803 1b01 	strb.w	r1, [r3], #1
 8004ece:	e7f9      	b.n	8004ec4 <memset+0x4>

08004ed0 <__errno>:
 8004ed0:	4b01      	ldr	r3, [pc, #4]	; (8004ed8 <__errno+0x8>)
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	20000064 	.word	0x20000064

08004edc <__libc_init_array>:
 8004edc:	b570      	push	{r4, r5, r6, lr}
 8004ede:	4d0d      	ldr	r5, [pc, #52]	; (8004f14 <__libc_init_array+0x38>)
 8004ee0:	4c0d      	ldr	r4, [pc, #52]	; (8004f18 <__libc_init_array+0x3c>)
 8004ee2:	1b64      	subs	r4, r4, r5
 8004ee4:	10a4      	asrs	r4, r4, #2
 8004ee6:	2600      	movs	r6, #0
 8004ee8:	42a6      	cmp	r6, r4
 8004eea:	d109      	bne.n	8004f00 <__libc_init_array+0x24>
 8004eec:	4d0b      	ldr	r5, [pc, #44]	; (8004f1c <__libc_init_array+0x40>)
 8004eee:	4c0c      	ldr	r4, [pc, #48]	; (8004f20 <__libc_init_array+0x44>)
 8004ef0:	f000 fc6a 	bl	80057c8 <_init>
 8004ef4:	1b64      	subs	r4, r4, r5
 8004ef6:	10a4      	asrs	r4, r4, #2
 8004ef8:	2600      	movs	r6, #0
 8004efa:	42a6      	cmp	r6, r4
 8004efc:	d105      	bne.n	8004f0a <__libc_init_array+0x2e>
 8004efe:	bd70      	pop	{r4, r5, r6, pc}
 8004f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f04:	4798      	blx	r3
 8004f06:	3601      	adds	r6, #1
 8004f08:	e7ee      	b.n	8004ee8 <__libc_init_array+0xc>
 8004f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f0e:	4798      	blx	r3
 8004f10:	3601      	adds	r6, #1
 8004f12:	e7f2      	b.n	8004efa <__libc_init_array+0x1e>
 8004f14:	0800889c 	.word	0x0800889c
 8004f18:	0800889c 	.word	0x0800889c
 8004f1c:	0800889c 	.word	0x0800889c
 8004f20:	080088a0 	.word	0x080088a0

08004f24 <__retarget_lock_acquire_recursive>:
 8004f24:	4770      	bx	lr

08004f26 <__retarget_lock_release_recursive>:
 8004f26:	4770      	bx	lr

08004f28 <_free_r>:
 8004f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f2a:	2900      	cmp	r1, #0
 8004f2c:	d044      	beq.n	8004fb8 <_free_r+0x90>
 8004f2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f32:	9001      	str	r0, [sp, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f1a1 0404 	sub.w	r4, r1, #4
 8004f3a:	bfb8      	it	lt
 8004f3c:	18e4      	addlt	r4, r4, r3
 8004f3e:	f000 f8df 	bl	8005100 <__malloc_lock>
 8004f42:	4a1e      	ldr	r2, [pc, #120]	; (8004fbc <_free_r+0x94>)
 8004f44:	9801      	ldr	r0, [sp, #4]
 8004f46:	6813      	ldr	r3, [r2, #0]
 8004f48:	b933      	cbnz	r3, 8004f58 <_free_r+0x30>
 8004f4a:	6063      	str	r3, [r4, #4]
 8004f4c:	6014      	str	r4, [r2, #0]
 8004f4e:	b003      	add	sp, #12
 8004f50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f54:	f000 b8da 	b.w	800510c <__malloc_unlock>
 8004f58:	42a3      	cmp	r3, r4
 8004f5a:	d908      	bls.n	8004f6e <_free_r+0x46>
 8004f5c:	6825      	ldr	r5, [r4, #0]
 8004f5e:	1961      	adds	r1, r4, r5
 8004f60:	428b      	cmp	r3, r1
 8004f62:	bf01      	itttt	eq
 8004f64:	6819      	ldreq	r1, [r3, #0]
 8004f66:	685b      	ldreq	r3, [r3, #4]
 8004f68:	1949      	addeq	r1, r1, r5
 8004f6a:	6021      	streq	r1, [r4, #0]
 8004f6c:	e7ed      	b.n	8004f4a <_free_r+0x22>
 8004f6e:	461a      	mov	r2, r3
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	b10b      	cbz	r3, 8004f78 <_free_r+0x50>
 8004f74:	42a3      	cmp	r3, r4
 8004f76:	d9fa      	bls.n	8004f6e <_free_r+0x46>
 8004f78:	6811      	ldr	r1, [r2, #0]
 8004f7a:	1855      	adds	r5, r2, r1
 8004f7c:	42a5      	cmp	r5, r4
 8004f7e:	d10b      	bne.n	8004f98 <_free_r+0x70>
 8004f80:	6824      	ldr	r4, [r4, #0]
 8004f82:	4421      	add	r1, r4
 8004f84:	1854      	adds	r4, r2, r1
 8004f86:	42a3      	cmp	r3, r4
 8004f88:	6011      	str	r1, [r2, #0]
 8004f8a:	d1e0      	bne.n	8004f4e <_free_r+0x26>
 8004f8c:	681c      	ldr	r4, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	6053      	str	r3, [r2, #4]
 8004f92:	440c      	add	r4, r1
 8004f94:	6014      	str	r4, [r2, #0]
 8004f96:	e7da      	b.n	8004f4e <_free_r+0x26>
 8004f98:	d902      	bls.n	8004fa0 <_free_r+0x78>
 8004f9a:	230c      	movs	r3, #12
 8004f9c:	6003      	str	r3, [r0, #0]
 8004f9e:	e7d6      	b.n	8004f4e <_free_r+0x26>
 8004fa0:	6825      	ldr	r5, [r4, #0]
 8004fa2:	1961      	adds	r1, r4, r5
 8004fa4:	428b      	cmp	r3, r1
 8004fa6:	bf04      	itt	eq
 8004fa8:	6819      	ldreq	r1, [r3, #0]
 8004faa:	685b      	ldreq	r3, [r3, #4]
 8004fac:	6063      	str	r3, [r4, #4]
 8004fae:	bf04      	itt	eq
 8004fb0:	1949      	addeq	r1, r1, r5
 8004fb2:	6021      	streq	r1, [r4, #0]
 8004fb4:	6054      	str	r4, [r2, #4]
 8004fb6:	e7ca      	b.n	8004f4e <_free_r+0x26>
 8004fb8:	b003      	add	sp, #12
 8004fba:	bd30      	pop	{r4, r5, pc}
 8004fbc:	2000034c 	.word	0x2000034c

08004fc0 <sbrk_aligned>:
 8004fc0:	b570      	push	{r4, r5, r6, lr}
 8004fc2:	4e0e      	ldr	r6, [pc, #56]	; (8004ffc <sbrk_aligned+0x3c>)
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	6831      	ldr	r1, [r6, #0]
 8004fc8:	4605      	mov	r5, r0
 8004fca:	b911      	cbnz	r1, 8004fd2 <sbrk_aligned+0x12>
 8004fcc:	f000 fba6 	bl	800571c <_sbrk_r>
 8004fd0:	6030      	str	r0, [r6, #0]
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	f000 fba1 	bl	800571c <_sbrk_r>
 8004fda:	1c43      	adds	r3, r0, #1
 8004fdc:	d00a      	beq.n	8004ff4 <sbrk_aligned+0x34>
 8004fde:	1cc4      	adds	r4, r0, #3
 8004fe0:	f024 0403 	bic.w	r4, r4, #3
 8004fe4:	42a0      	cmp	r0, r4
 8004fe6:	d007      	beq.n	8004ff8 <sbrk_aligned+0x38>
 8004fe8:	1a21      	subs	r1, r4, r0
 8004fea:	4628      	mov	r0, r5
 8004fec:	f000 fb96 	bl	800571c <_sbrk_r>
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	d101      	bne.n	8004ff8 <sbrk_aligned+0x38>
 8004ff4:	f04f 34ff 	mov.w	r4, #4294967295
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
 8004ffc:	20000350 	.word	0x20000350

08005000 <_malloc_r>:
 8005000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005004:	1ccd      	adds	r5, r1, #3
 8005006:	f025 0503 	bic.w	r5, r5, #3
 800500a:	3508      	adds	r5, #8
 800500c:	2d0c      	cmp	r5, #12
 800500e:	bf38      	it	cc
 8005010:	250c      	movcc	r5, #12
 8005012:	2d00      	cmp	r5, #0
 8005014:	4607      	mov	r7, r0
 8005016:	db01      	blt.n	800501c <_malloc_r+0x1c>
 8005018:	42a9      	cmp	r1, r5
 800501a:	d905      	bls.n	8005028 <_malloc_r+0x28>
 800501c:	230c      	movs	r3, #12
 800501e:	603b      	str	r3, [r7, #0]
 8005020:	2600      	movs	r6, #0
 8005022:	4630      	mov	r0, r6
 8005024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005028:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80050fc <_malloc_r+0xfc>
 800502c:	f000 f868 	bl	8005100 <__malloc_lock>
 8005030:	f8d8 3000 	ldr.w	r3, [r8]
 8005034:	461c      	mov	r4, r3
 8005036:	bb5c      	cbnz	r4, 8005090 <_malloc_r+0x90>
 8005038:	4629      	mov	r1, r5
 800503a:	4638      	mov	r0, r7
 800503c:	f7ff ffc0 	bl	8004fc0 <sbrk_aligned>
 8005040:	1c43      	adds	r3, r0, #1
 8005042:	4604      	mov	r4, r0
 8005044:	d155      	bne.n	80050f2 <_malloc_r+0xf2>
 8005046:	f8d8 4000 	ldr.w	r4, [r8]
 800504a:	4626      	mov	r6, r4
 800504c:	2e00      	cmp	r6, #0
 800504e:	d145      	bne.n	80050dc <_malloc_r+0xdc>
 8005050:	2c00      	cmp	r4, #0
 8005052:	d048      	beq.n	80050e6 <_malloc_r+0xe6>
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	4631      	mov	r1, r6
 8005058:	4638      	mov	r0, r7
 800505a:	eb04 0903 	add.w	r9, r4, r3
 800505e:	f000 fb5d 	bl	800571c <_sbrk_r>
 8005062:	4581      	cmp	r9, r0
 8005064:	d13f      	bne.n	80050e6 <_malloc_r+0xe6>
 8005066:	6821      	ldr	r1, [r4, #0]
 8005068:	1a6d      	subs	r5, r5, r1
 800506a:	4629      	mov	r1, r5
 800506c:	4638      	mov	r0, r7
 800506e:	f7ff ffa7 	bl	8004fc0 <sbrk_aligned>
 8005072:	3001      	adds	r0, #1
 8005074:	d037      	beq.n	80050e6 <_malloc_r+0xe6>
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	442b      	add	r3, r5
 800507a:	6023      	str	r3, [r4, #0]
 800507c:	f8d8 3000 	ldr.w	r3, [r8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d038      	beq.n	80050f6 <_malloc_r+0xf6>
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	42a2      	cmp	r2, r4
 8005088:	d12b      	bne.n	80050e2 <_malloc_r+0xe2>
 800508a:	2200      	movs	r2, #0
 800508c:	605a      	str	r2, [r3, #4]
 800508e:	e00f      	b.n	80050b0 <_malloc_r+0xb0>
 8005090:	6822      	ldr	r2, [r4, #0]
 8005092:	1b52      	subs	r2, r2, r5
 8005094:	d41f      	bmi.n	80050d6 <_malloc_r+0xd6>
 8005096:	2a0b      	cmp	r2, #11
 8005098:	d917      	bls.n	80050ca <_malloc_r+0xca>
 800509a:	1961      	adds	r1, r4, r5
 800509c:	42a3      	cmp	r3, r4
 800509e:	6025      	str	r5, [r4, #0]
 80050a0:	bf18      	it	ne
 80050a2:	6059      	strne	r1, [r3, #4]
 80050a4:	6863      	ldr	r3, [r4, #4]
 80050a6:	bf08      	it	eq
 80050a8:	f8c8 1000 	streq.w	r1, [r8]
 80050ac:	5162      	str	r2, [r4, r5]
 80050ae:	604b      	str	r3, [r1, #4]
 80050b0:	4638      	mov	r0, r7
 80050b2:	f104 060b 	add.w	r6, r4, #11
 80050b6:	f000 f829 	bl	800510c <__malloc_unlock>
 80050ba:	f026 0607 	bic.w	r6, r6, #7
 80050be:	1d23      	adds	r3, r4, #4
 80050c0:	1af2      	subs	r2, r6, r3
 80050c2:	d0ae      	beq.n	8005022 <_malloc_r+0x22>
 80050c4:	1b9b      	subs	r3, r3, r6
 80050c6:	50a3      	str	r3, [r4, r2]
 80050c8:	e7ab      	b.n	8005022 <_malloc_r+0x22>
 80050ca:	42a3      	cmp	r3, r4
 80050cc:	6862      	ldr	r2, [r4, #4]
 80050ce:	d1dd      	bne.n	800508c <_malloc_r+0x8c>
 80050d0:	f8c8 2000 	str.w	r2, [r8]
 80050d4:	e7ec      	b.n	80050b0 <_malloc_r+0xb0>
 80050d6:	4623      	mov	r3, r4
 80050d8:	6864      	ldr	r4, [r4, #4]
 80050da:	e7ac      	b.n	8005036 <_malloc_r+0x36>
 80050dc:	4634      	mov	r4, r6
 80050de:	6876      	ldr	r6, [r6, #4]
 80050e0:	e7b4      	b.n	800504c <_malloc_r+0x4c>
 80050e2:	4613      	mov	r3, r2
 80050e4:	e7cc      	b.n	8005080 <_malloc_r+0x80>
 80050e6:	230c      	movs	r3, #12
 80050e8:	603b      	str	r3, [r7, #0]
 80050ea:	4638      	mov	r0, r7
 80050ec:	f000 f80e 	bl	800510c <__malloc_unlock>
 80050f0:	e797      	b.n	8005022 <_malloc_r+0x22>
 80050f2:	6025      	str	r5, [r4, #0]
 80050f4:	e7dc      	b.n	80050b0 <_malloc_r+0xb0>
 80050f6:	605b      	str	r3, [r3, #4]
 80050f8:	deff      	udf	#255	; 0xff
 80050fa:	bf00      	nop
 80050fc:	2000034c 	.word	0x2000034c

08005100 <__malloc_lock>:
 8005100:	4801      	ldr	r0, [pc, #4]	; (8005108 <__malloc_lock+0x8>)
 8005102:	f7ff bf0f 	b.w	8004f24 <__retarget_lock_acquire_recursive>
 8005106:	bf00      	nop
 8005108:	20000348 	.word	0x20000348

0800510c <__malloc_unlock>:
 800510c:	4801      	ldr	r0, [pc, #4]	; (8005114 <__malloc_unlock+0x8>)
 800510e:	f7ff bf0a 	b.w	8004f26 <__retarget_lock_release_recursive>
 8005112:	bf00      	nop
 8005114:	20000348 	.word	0x20000348

08005118 <__ssputs_r>:
 8005118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800511c:	688e      	ldr	r6, [r1, #8]
 800511e:	461f      	mov	r7, r3
 8005120:	42be      	cmp	r6, r7
 8005122:	680b      	ldr	r3, [r1, #0]
 8005124:	4682      	mov	sl, r0
 8005126:	460c      	mov	r4, r1
 8005128:	4690      	mov	r8, r2
 800512a:	d82c      	bhi.n	8005186 <__ssputs_r+0x6e>
 800512c:	898a      	ldrh	r2, [r1, #12]
 800512e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005132:	d026      	beq.n	8005182 <__ssputs_r+0x6a>
 8005134:	6965      	ldr	r5, [r4, #20]
 8005136:	6909      	ldr	r1, [r1, #16]
 8005138:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800513c:	eba3 0901 	sub.w	r9, r3, r1
 8005140:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005144:	1c7b      	adds	r3, r7, #1
 8005146:	444b      	add	r3, r9
 8005148:	106d      	asrs	r5, r5, #1
 800514a:	429d      	cmp	r5, r3
 800514c:	bf38      	it	cc
 800514e:	461d      	movcc	r5, r3
 8005150:	0553      	lsls	r3, r2, #21
 8005152:	d527      	bpl.n	80051a4 <__ssputs_r+0x8c>
 8005154:	4629      	mov	r1, r5
 8005156:	f7ff ff53 	bl	8005000 <_malloc_r>
 800515a:	4606      	mov	r6, r0
 800515c:	b360      	cbz	r0, 80051b8 <__ssputs_r+0xa0>
 800515e:	6921      	ldr	r1, [r4, #16]
 8005160:	464a      	mov	r2, r9
 8005162:	f000 faeb 	bl	800573c <memcpy>
 8005166:	89a3      	ldrh	r3, [r4, #12]
 8005168:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800516c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005170:	81a3      	strh	r3, [r4, #12]
 8005172:	6126      	str	r6, [r4, #16]
 8005174:	6165      	str	r5, [r4, #20]
 8005176:	444e      	add	r6, r9
 8005178:	eba5 0509 	sub.w	r5, r5, r9
 800517c:	6026      	str	r6, [r4, #0]
 800517e:	60a5      	str	r5, [r4, #8]
 8005180:	463e      	mov	r6, r7
 8005182:	42be      	cmp	r6, r7
 8005184:	d900      	bls.n	8005188 <__ssputs_r+0x70>
 8005186:	463e      	mov	r6, r7
 8005188:	6820      	ldr	r0, [r4, #0]
 800518a:	4632      	mov	r2, r6
 800518c:	4641      	mov	r1, r8
 800518e:	f000 faab 	bl	80056e8 <memmove>
 8005192:	68a3      	ldr	r3, [r4, #8]
 8005194:	1b9b      	subs	r3, r3, r6
 8005196:	60a3      	str	r3, [r4, #8]
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	4433      	add	r3, r6
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	2000      	movs	r0, #0
 80051a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a4:	462a      	mov	r2, r5
 80051a6:	f000 fad7 	bl	8005758 <_realloc_r>
 80051aa:	4606      	mov	r6, r0
 80051ac:	2800      	cmp	r0, #0
 80051ae:	d1e0      	bne.n	8005172 <__ssputs_r+0x5a>
 80051b0:	6921      	ldr	r1, [r4, #16]
 80051b2:	4650      	mov	r0, sl
 80051b4:	f7ff feb8 	bl	8004f28 <_free_r>
 80051b8:	230c      	movs	r3, #12
 80051ba:	f8ca 3000 	str.w	r3, [sl]
 80051be:	89a3      	ldrh	r3, [r4, #12]
 80051c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051c4:	81a3      	strh	r3, [r4, #12]
 80051c6:	f04f 30ff 	mov.w	r0, #4294967295
 80051ca:	e7e9      	b.n	80051a0 <__ssputs_r+0x88>

080051cc <_svfiprintf_r>:
 80051cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d0:	4698      	mov	r8, r3
 80051d2:	898b      	ldrh	r3, [r1, #12]
 80051d4:	061b      	lsls	r3, r3, #24
 80051d6:	b09d      	sub	sp, #116	; 0x74
 80051d8:	4607      	mov	r7, r0
 80051da:	460d      	mov	r5, r1
 80051dc:	4614      	mov	r4, r2
 80051de:	d50e      	bpl.n	80051fe <_svfiprintf_r+0x32>
 80051e0:	690b      	ldr	r3, [r1, #16]
 80051e2:	b963      	cbnz	r3, 80051fe <_svfiprintf_r+0x32>
 80051e4:	2140      	movs	r1, #64	; 0x40
 80051e6:	f7ff ff0b 	bl	8005000 <_malloc_r>
 80051ea:	6028      	str	r0, [r5, #0]
 80051ec:	6128      	str	r0, [r5, #16]
 80051ee:	b920      	cbnz	r0, 80051fa <_svfiprintf_r+0x2e>
 80051f0:	230c      	movs	r3, #12
 80051f2:	603b      	str	r3, [r7, #0]
 80051f4:	f04f 30ff 	mov.w	r0, #4294967295
 80051f8:	e0d0      	b.n	800539c <_svfiprintf_r+0x1d0>
 80051fa:	2340      	movs	r3, #64	; 0x40
 80051fc:	616b      	str	r3, [r5, #20]
 80051fe:	2300      	movs	r3, #0
 8005200:	9309      	str	r3, [sp, #36]	; 0x24
 8005202:	2320      	movs	r3, #32
 8005204:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005208:	f8cd 800c 	str.w	r8, [sp, #12]
 800520c:	2330      	movs	r3, #48	; 0x30
 800520e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80053b4 <_svfiprintf_r+0x1e8>
 8005212:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005216:	f04f 0901 	mov.w	r9, #1
 800521a:	4623      	mov	r3, r4
 800521c:	469a      	mov	sl, r3
 800521e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005222:	b10a      	cbz	r2, 8005228 <_svfiprintf_r+0x5c>
 8005224:	2a25      	cmp	r2, #37	; 0x25
 8005226:	d1f9      	bne.n	800521c <_svfiprintf_r+0x50>
 8005228:	ebba 0b04 	subs.w	fp, sl, r4
 800522c:	d00b      	beq.n	8005246 <_svfiprintf_r+0x7a>
 800522e:	465b      	mov	r3, fp
 8005230:	4622      	mov	r2, r4
 8005232:	4629      	mov	r1, r5
 8005234:	4638      	mov	r0, r7
 8005236:	f7ff ff6f 	bl	8005118 <__ssputs_r>
 800523a:	3001      	adds	r0, #1
 800523c:	f000 80a9 	beq.w	8005392 <_svfiprintf_r+0x1c6>
 8005240:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005242:	445a      	add	r2, fp
 8005244:	9209      	str	r2, [sp, #36]	; 0x24
 8005246:	f89a 3000 	ldrb.w	r3, [sl]
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 80a1 	beq.w	8005392 <_svfiprintf_r+0x1c6>
 8005250:	2300      	movs	r3, #0
 8005252:	f04f 32ff 	mov.w	r2, #4294967295
 8005256:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800525a:	f10a 0a01 	add.w	sl, sl, #1
 800525e:	9304      	str	r3, [sp, #16]
 8005260:	9307      	str	r3, [sp, #28]
 8005262:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005266:	931a      	str	r3, [sp, #104]	; 0x68
 8005268:	4654      	mov	r4, sl
 800526a:	2205      	movs	r2, #5
 800526c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005270:	4850      	ldr	r0, [pc, #320]	; (80053b4 <_svfiprintf_r+0x1e8>)
 8005272:	f7fa ffb5 	bl	80001e0 <memchr>
 8005276:	9a04      	ldr	r2, [sp, #16]
 8005278:	b9d8      	cbnz	r0, 80052b2 <_svfiprintf_r+0xe6>
 800527a:	06d0      	lsls	r0, r2, #27
 800527c:	bf44      	itt	mi
 800527e:	2320      	movmi	r3, #32
 8005280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005284:	0711      	lsls	r1, r2, #28
 8005286:	bf44      	itt	mi
 8005288:	232b      	movmi	r3, #43	; 0x2b
 800528a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800528e:	f89a 3000 	ldrb.w	r3, [sl]
 8005292:	2b2a      	cmp	r3, #42	; 0x2a
 8005294:	d015      	beq.n	80052c2 <_svfiprintf_r+0xf6>
 8005296:	9a07      	ldr	r2, [sp, #28]
 8005298:	4654      	mov	r4, sl
 800529a:	2000      	movs	r0, #0
 800529c:	f04f 0c0a 	mov.w	ip, #10
 80052a0:	4621      	mov	r1, r4
 80052a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052a6:	3b30      	subs	r3, #48	; 0x30
 80052a8:	2b09      	cmp	r3, #9
 80052aa:	d94d      	bls.n	8005348 <_svfiprintf_r+0x17c>
 80052ac:	b1b0      	cbz	r0, 80052dc <_svfiprintf_r+0x110>
 80052ae:	9207      	str	r2, [sp, #28]
 80052b0:	e014      	b.n	80052dc <_svfiprintf_r+0x110>
 80052b2:	eba0 0308 	sub.w	r3, r0, r8
 80052b6:	fa09 f303 	lsl.w	r3, r9, r3
 80052ba:	4313      	orrs	r3, r2
 80052bc:	9304      	str	r3, [sp, #16]
 80052be:	46a2      	mov	sl, r4
 80052c0:	e7d2      	b.n	8005268 <_svfiprintf_r+0x9c>
 80052c2:	9b03      	ldr	r3, [sp, #12]
 80052c4:	1d19      	adds	r1, r3, #4
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	9103      	str	r1, [sp, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	bfbb      	ittet	lt
 80052ce:	425b      	neglt	r3, r3
 80052d0:	f042 0202 	orrlt.w	r2, r2, #2
 80052d4:	9307      	strge	r3, [sp, #28]
 80052d6:	9307      	strlt	r3, [sp, #28]
 80052d8:	bfb8      	it	lt
 80052da:	9204      	strlt	r2, [sp, #16]
 80052dc:	7823      	ldrb	r3, [r4, #0]
 80052de:	2b2e      	cmp	r3, #46	; 0x2e
 80052e0:	d10c      	bne.n	80052fc <_svfiprintf_r+0x130>
 80052e2:	7863      	ldrb	r3, [r4, #1]
 80052e4:	2b2a      	cmp	r3, #42	; 0x2a
 80052e6:	d134      	bne.n	8005352 <_svfiprintf_r+0x186>
 80052e8:	9b03      	ldr	r3, [sp, #12]
 80052ea:	1d1a      	adds	r2, r3, #4
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	9203      	str	r2, [sp, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	bfb8      	it	lt
 80052f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80052f8:	3402      	adds	r4, #2
 80052fa:	9305      	str	r3, [sp, #20]
 80052fc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80053c4 <_svfiprintf_r+0x1f8>
 8005300:	7821      	ldrb	r1, [r4, #0]
 8005302:	2203      	movs	r2, #3
 8005304:	4650      	mov	r0, sl
 8005306:	f7fa ff6b 	bl	80001e0 <memchr>
 800530a:	b138      	cbz	r0, 800531c <_svfiprintf_r+0x150>
 800530c:	9b04      	ldr	r3, [sp, #16]
 800530e:	eba0 000a 	sub.w	r0, r0, sl
 8005312:	2240      	movs	r2, #64	; 0x40
 8005314:	4082      	lsls	r2, r0
 8005316:	4313      	orrs	r3, r2
 8005318:	3401      	adds	r4, #1
 800531a:	9304      	str	r3, [sp, #16]
 800531c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005320:	4825      	ldr	r0, [pc, #148]	; (80053b8 <_svfiprintf_r+0x1ec>)
 8005322:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005326:	2206      	movs	r2, #6
 8005328:	f7fa ff5a 	bl	80001e0 <memchr>
 800532c:	2800      	cmp	r0, #0
 800532e:	d038      	beq.n	80053a2 <_svfiprintf_r+0x1d6>
 8005330:	4b22      	ldr	r3, [pc, #136]	; (80053bc <_svfiprintf_r+0x1f0>)
 8005332:	bb1b      	cbnz	r3, 800537c <_svfiprintf_r+0x1b0>
 8005334:	9b03      	ldr	r3, [sp, #12]
 8005336:	3307      	adds	r3, #7
 8005338:	f023 0307 	bic.w	r3, r3, #7
 800533c:	3308      	adds	r3, #8
 800533e:	9303      	str	r3, [sp, #12]
 8005340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005342:	4433      	add	r3, r6
 8005344:	9309      	str	r3, [sp, #36]	; 0x24
 8005346:	e768      	b.n	800521a <_svfiprintf_r+0x4e>
 8005348:	fb0c 3202 	mla	r2, ip, r2, r3
 800534c:	460c      	mov	r4, r1
 800534e:	2001      	movs	r0, #1
 8005350:	e7a6      	b.n	80052a0 <_svfiprintf_r+0xd4>
 8005352:	2300      	movs	r3, #0
 8005354:	3401      	adds	r4, #1
 8005356:	9305      	str	r3, [sp, #20]
 8005358:	4619      	mov	r1, r3
 800535a:	f04f 0c0a 	mov.w	ip, #10
 800535e:	4620      	mov	r0, r4
 8005360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005364:	3a30      	subs	r2, #48	; 0x30
 8005366:	2a09      	cmp	r2, #9
 8005368:	d903      	bls.n	8005372 <_svfiprintf_r+0x1a6>
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0c6      	beq.n	80052fc <_svfiprintf_r+0x130>
 800536e:	9105      	str	r1, [sp, #20]
 8005370:	e7c4      	b.n	80052fc <_svfiprintf_r+0x130>
 8005372:	fb0c 2101 	mla	r1, ip, r1, r2
 8005376:	4604      	mov	r4, r0
 8005378:	2301      	movs	r3, #1
 800537a:	e7f0      	b.n	800535e <_svfiprintf_r+0x192>
 800537c:	ab03      	add	r3, sp, #12
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	462a      	mov	r2, r5
 8005382:	4b0f      	ldr	r3, [pc, #60]	; (80053c0 <_svfiprintf_r+0x1f4>)
 8005384:	a904      	add	r1, sp, #16
 8005386:	4638      	mov	r0, r7
 8005388:	f3af 8000 	nop.w
 800538c:	1c42      	adds	r2, r0, #1
 800538e:	4606      	mov	r6, r0
 8005390:	d1d6      	bne.n	8005340 <_svfiprintf_r+0x174>
 8005392:	89ab      	ldrh	r3, [r5, #12]
 8005394:	065b      	lsls	r3, r3, #25
 8005396:	f53f af2d 	bmi.w	80051f4 <_svfiprintf_r+0x28>
 800539a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800539c:	b01d      	add	sp, #116	; 0x74
 800539e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a2:	ab03      	add	r3, sp, #12
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	462a      	mov	r2, r5
 80053a8:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <_svfiprintf_r+0x1f4>)
 80053aa:	a904      	add	r1, sp, #16
 80053ac:	4638      	mov	r0, r7
 80053ae:	f000 f879 	bl	80054a4 <_printf_i>
 80053b2:	e7eb      	b.n	800538c <_svfiprintf_r+0x1c0>
 80053b4:	08008860 	.word	0x08008860
 80053b8:	0800886a 	.word	0x0800886a
 80053bc:	00000000 	.word	0x00000000
 80053c0:	08005119 	.word	0x08005119
 80053c4:	08008866 	.word	0x08008866

080053c8 <_printf_common>:
 80053c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053cc:	4616      	mov	r6, r2
 80053ce:	4699      	mov	r9, r3
 80053d0:	688a      	ldr	r2, [r1, #8]
 80053d2:	690b      	ldr	r3, [r1, #16]
 80053d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053d8:	4293      	cmp	r3, r2
 80053da:	bfb8      	it	lt
 80053dc:	4613      	movlt	r3, r2
 80053de:	6033      	str	r3, [r6, #0]
 80053e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053e4:	4607      	mov	r7, r0
 80053e6:	460c      	mov	r4, r1
 80053e8:	b10a      	cbz	r2, 80053ee <_printf_common+0x26>
 80053ea:	3301      	adds	r3, #1
 80053ec:	6033      	str	r3, [r6, #0]
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	0699      	lsls	r1, r3, #26
 80053f2:	bf42      	ittt	mi
 80053f4:	6833      	ldrmi	r3, [r6, #0]
 80053f6:	3302      	addmi	r3, #2
 80053f8:	6033      	strmi	r3, [r6, #0]
 80053fa:	6825      	ldr	r5, [r4, #0]
 80053fc:	f015 0506 	ands.w	r5, r5, #6
 8005400:	d106      	bne.n	8005410 <_printf_common+0x48>
 8005402:	f104 0a19 	add.w	sl, r4, #25
 8005406:	68e3      	ldr	r3, [r4, #12]
 8005408:	6832      	ldr	r2, [r6, #0]
 800540a:	1a9b      	subs	r3, r3, r2
 800540c:	42ab      	cmp	r3, r5
 800540e:	dc26      	bgt.n	800545e <_printf_common+0x96>
 8005410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005414:	1e13      	subs	r3, r2, #0
 8005416:	6822      	ldr	r2, [r4, #0]
 8005418:	bf18      	it	ne
 800541a:	2301      	movne	r3, #1
 800541c:	0692      	lsls	r2, r2, #26
 800541e:	d42b      	bmi.n	8005478 <_printf_common+0xb0>
 8005420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005424:	4649      	mov	r1, r9
 8005426:	4638      	mov	r0, r7
 8005428:	47c0      	blx	r8
 800542a:	3001      	adds	r0, #1
 800542c:	d01e      	beq.n	800546c <_printf_common+0xa4>
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	6922      	ldr	r2, [r4, #16]
 8005432:	f003 0306 	and.w	r3, r3, #6
 8005436:	2b04      	cmp	r3, #4
 8005438:	bf02      	ittt	eq
 800543a:	68e5      	ldreq	r5, [r4, #12]
 800543c:	6833      	ldreq	r3, [r6, #0]
 800543e:	1aed      	subeq	r5, r5, r3
 8005440:	68a3      	ldr	r3, [r4, #8]
 8005442:	bf0c      	ite	eq
 8005444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005448:	2500      	movne	r5, #0
 800544a:	4293      	cmp	r3, r2
 800544c:	bfc4      	itt	gt
 800544e:	1a9b      	subgt	r3, r3, r2
 8005450:	18ed      	addgt	r5, r5, r3
 8005452:	2600      	movs	r6, #0
 8005454:	341a      	adds	r4, #26
 8005456:	42b5      	cmp	r5, r6
 8005458:	d11a      	bne.n	8005490 <_printf_common+0xc8>
 800545a:	2000      	movs	r0, #0
 800545c:	e008      	b.n	8005470 <_printf_common+0xa8>
 800545e:	2301      	movs	r3, #1
 8005460:	4652      	mov	r2, sl
 8005462:	4649      	mov	r1, r9
 8005464:	4638      	mov	r0, r7
 8005466:	47c0      	blx	r8
 8005468:	3001      	adds	r0, #1
 800546a:	d103      	bne.n	8005474 <_printf_common+0xac>
 800546c:	f04f 30ff 	mov.w	r0, #4294967295
 8005470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005474:	3501      	adds	r5, #1
 8005476:	e7c6      	b.n	8005406 <_printf_common+0x3e>
 8005478:	18e1      	adds	r1, r4, r3
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	2030      	movs	r0, #48	; 0x30
 800547e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005482:	4422      	add	r2, r4
 8005484:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800548c:	3302      	adds	r3, #2
 800548e:	e7c7      	b.n	8005420 <_printf_common+0x58>
 8005490:	2301      	movs	r3, #1
 8005492:	4622      	mov	r2, r4
 8005494:	4649      	mov	r1, r9
 8005496:	4638      	mov	r0, r7
 8005498:	47c0      	blx	r8
 800549a:	3001      	adds	r0, #1
 800549c:	d0e6      	beq.n	800546c <_printf_common+0xa4>
 800549e:	3601      	adds	r6, #1
 80054a0:	e7d9      	b.n	8005456 <_printf_common+0x8e>
	...

080054a4 <_printf_i>:
 80054a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054a8:	7e0f      	ldrb	r7, [r1, #24]
 80054aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054ac:	2f78      	cmp	r7, #120	; 0x78
 80054ae:	4691      	mov	r9, r2
 80054b0:	4680      	mov	r8, r0
 80054b2:	460c      	mov	r4, r1
 80054b4:	469a      	mov	sl, r3
 80054b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054ba:	d807      	bhi.n	80054cc <_printf_i+0x28>
 80054bc:	2f62      	cmp	r7, #98	; 0x62
 80054be:	d80a      	bhi.n	80054d6 <_printf_i+0x32>
 80054c0:	2f00      	cmp	r7, #0
 80054c2:	f000 80d4 	beq.w	800566e <_printf_i+0x1ca>
 80054c6:	2f58      	cmp	r7, #88	; 0x58
 80054c8:	f000 80c0 	beq.w	800564c <_printf_i+0x1a8>
 80054cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054d4:	e03a      	b.n	800554c <_printf_i+0xa8>
 80054d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054da:	2b15      	cmp	r3, #21
 80054dc:	d8f6      	bhi.n	80054cc <_printf_i+0x28>
 80054de:	a101      	add	r1, pc, #4	; (adr r1, 80054e4 <_printf_i+0x40>)
 80054e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054e4:	0800553d 	.word	0x0800553d
 80054e8:	08005551 	.word	0x08005551
 80054ec:	080054cd 	.word	0x080054cd
 80054f0:	080054cd 	.word	0x080054cd
 80054f4:	080054cd 	.word	0x080054cd
 80054f8:	080054cd 	.word	0x080054cd
 80054fc:	08005551 	.word	0x08005551
 8005500:	080054cd 	.word	0x080054cd
 8005504:	080054cd 	.word	0x080054cd
 8005508:	080054cd 	.word	0x080054cd
 800550c:	080054cd 	.word	0x080054cd
 8005510:	08005655 	.word	0x08005655
 8005514:	0800557d 	.word	0x0800557d
 8005518:	0800560f 	.word	0x0800560f
 800551c:	080054cd 	.word	0x080054cd
 8005520:	080054cd 	.word	0x080054cd
 8005524:	08005677 	.word	0x08005677
 8005528:	080054cd 	.word	0x080054cd
 800552c:	0800557d 	.word	0x0800557d
 8005530:	080054cd 	.word	0x080054cd
 8005534:	080054cd 	.word	0x080054cd
 8005538:	08005617 	.word	0x08005617
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	1d1a      	adds	r2, r3, #4
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	602a      	str	r2, [r5, #0]
 8005544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800554c:	2301      	movs	r3, #1
 800554e:	e09f      	b.n	8005690 <_printf_i+0x1ec>
 8005550:	6820      	ldr	r0, [r4, #0]
 8005552:	682b      	ldr	r3, [r5, #0]
 8005554:	0607      	lsls	r7, r0, #24
 8005556:	f103 0104 	add.w	r1, r3, #4
 800555a:	6029      	str	r1, [r5, #0]
 800555c:	d501      	bpl.n	8005562 <_printf_i+0xbe>
 800555e:	681e      	ldr	r6, [r3, #0]
 8005560:	e003      	b.n	800556a <_printf_i+0xc6>
 8005562:	0646      	lsls	r6, r0, #25
 8005564:	d5fb      	bpl.n	800555e <_printf_i+0xba>
 8005566:	f9b3 6000 	ldrsh.w	r6, [r3]
 800556a:	2e00      	cmp	r6, #0
 800556c:	da03      	bge.n	8005576 <_printf_i+0xd2>
 800556e:	232d      	movs	r3, #45	; 0x2d
 8005570:	4276      	negs	r6, r6
 8005572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005576:	485a      	ldr	r0, [pc, #360]	; (80056e0 <_printf_i+0x23c>)
 8005578:	230a      	movs	r3, #10
 800557a:	e012      	b.n	80055a2 <_printf_i+0xfe>
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	6820      	ldr	r0, [r4, #0]
 8005580:	1d19      	adds	r1, r3, #4
 8005582:	6029      	str	r1, [r5, #0]
 8005584:	0605      	lsls	r5, r0, #24
 8005586:	d501      	bpl.n	800558c <_printf_i+0xe8>
 8005588:	681e      	ldr	r6, [r3, #0]
 800558a:	e002      	b.n	8005592 <_printf_i+0xee>
 800558c:	0641      	lsls	r1, r0, #25
 800558e:	d5fb      	bpl.n	8005588 <_printf_i+0xe4>
 8005590:	881e      	ldrh	r6, [r3, #0]
 8005592:	4853      	ldr	r0, [pc, #332]	; (80056e0 <_printf_i+0x23c>)
 8005594:	2f6f      	cmp	r7, #111	; 0x6f
 8005596:	bf0c      	ite	eq
 8005598:	2308      	moveq	r3, #8
 800559a:	230a      	movne	r3, #10
 800559c:	2100      	movs	r1, #0
 800559e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055a2:	6865      	ldr	r5, [r4, #4]
 80055a4:	60a5      	str	r5, [r4, #8]
 80055a6:	2d00      	cmp	r5, #0
 80055a8:	bfa2      	ittt	ge
 80055aa:	6821      	ldrge	r1, [r4, #0]
 80055ac:	f021 0104 	bicge.w	r1, r1, #4
 80055b0:	6021      	strge	r1, [r4, #0]
 80055b2:	b90e      	cbnz	r6, 80055b8 <_printf_i+0x114>
 80055b4:	2d00      	cmp	r5, #0
 80055b6:	d04b      	beq.n	8005650 <_printf_i+0x1ac>
 80055b8:	4615      	mov	r5, r2
 80055ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80055be:	fb03 6711 	mls	r7, r3, r1, r6
 80055c2:	5dc7      	ldrb	r7, [r0, r7]
 80055c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055c8:	4637      	mov	r7, r6
 80055ca:	42bb      	cmp	r3, r7
 80055cc:	460e      	mov	r6, r1
 80055ce:	d9f4      	bls.n	80055ba <_printf_i+0x116>
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d10b      	bne.n	80055ec <_printf_i+0x148>
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	07de      	lsls	r6, r3, #31
 80055d8:	d508      	bpl.n	80055ec <_printf_i+0x148>
 80055da:	6923      	ldr	r3, [r4, #16]
 80055dc:	6861      	ldr	r1, [r4, #4]
 80055de:	4299      	cmp	r1, r3
 80055e0:	bfde      	ittt	le
 80055e2:	2330      	movle	r3, #48	; 0x30
 80055e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055ec:	1b52      	subs	r2, r2, r5
 80055ee:	6122      	str	r2, [r4, #16]
 80055f0:	f8cd a000 	str.w	sl, [sp]
 80055f4:	464b      	mov	r3, r9
 80055f6:	aa03      	add	r2, sp, #12
 80055f8:	4621      	mov	r1, r4
 80055fa:	4640      	mov	r0, r8
 80055fc:	f7ff fee4 	bl	80053c8 <_printf_common>
 8005600:	3001      	adds	r0, #1
 8005602:	d14a      	bne.n	800569a <_printf_i+0x1f6>
 8005604:	f04f 30ff 	mov.w	r0, #4294967295
 8005608:	b004      	add	sp, #16
 800560a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	f043 0320 	orr.w	r3, r3, #32
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	4833      	ldr	r0, [pc, #204]	; (80056e4 <_printf_i+0x240>)
 8005618:	2778      	movs	r7, #120	; 0x78
 800561a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	6829      	ldr	r1, [r5, #0]
 8005622:	061f      	lsls	r7, r3, #24
 8005624:	f851 6b04 	ldr.w	r6, [r1], #4
 8005628:	d402      	bmi.n	8005630 <_printf_i+0x18c>
 800562a:	065f      	lsls	r7, r3, #25
 800562c:	bf48      	it	mi
 800562e:	b2b6      	uxthmi	r6, r6
 8005630:	07df      	lsls	r7, r3, #31
 8005632:	bf48      	it	mi
 8005634:	f043 0320 	orrmi.w	r3, r3, #32
 8005638:	6029      	str	r1, [r5, #0]
 800563a:	bf48      	it	mi
 800563c:	6023      	strmi	r3, [r4, #0]
 800563e:	b91e      	cbnz	r6, 8005648 <_printf_i+0x1a4>
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	f023 0320 	bic.w	r3, r3, #32
 8005646:	6023      	str	r3, [r4, #0]
 8005648:	2310      	movs	r3, #16
 800564a:	e7a7      	b.n	800559c <_printf_i+0xf8>
 800564c:	4824      	ldr	r0, [pc, #144]	; (80056e0 <_printf_i+0x23c>)
 800564e:	e7e4      	b.n	800561a <_printf_i+0x176>
 8005650:	4615      	mov	r5, r2
 8005652:	e7bd      	b.n	80055d0 <_printf_i+0x12c>
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	6826      	ldr	r6, [r4, #0]
 8005658:	6961      	ldr	r1, [r4, #20]
 800565a:	1d18      	adds	r0, r3, #4
 800565c:	6028      	str	r0, [r5, #0]
 800565e:	0635      	lsls	r5, r6, #24
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	d501      	bpl.n	8005668 <_printf_i+0x1c4>
 8005664:	6019      	str	r1, [r3, #0]
 8005666:	e002      	b.n	800566e <_printf_i+0x1ca>
 8005668:	0670      	lsls	r0, r6, #25
 800566a:	d5fb      	bpl.n	8005664 <_printf_i+0x1c0>
 800566c:	8019      	strh	r1, [r3, #0]
 800566e:	2300      	movs	r3, #0
 8005670:	6123      	str	r3, [r4, #16]
 8005672:	4615      	mov	r5, r2
 8005674:	e7bc      	b.n	80055f0 <_printf_i+0x14c>
 8005676:	682b      	ldr	r3, [r5, #0]
 8005678:	1d1a      	adds	r2, r3, #4
 800567a:	602a      	str	r2, [r5, #0]
 800567c:	681d      	ldr	r5, [r3, #0]
 800567e:	6862      	ldr	r2, [r4, #4]
 8005680:	2100      	movs	r1, #0
 8005682:	4628      	mov	r0, r5
 8005684:	f7fa fdac 	bl	80001e0 <memchr>
 8005688:	b108      	cbz	r0, 800568e <_printf_i+0x1ea>
 800568a:	1b40      	subs	r0, r0, r5
 800568c:	6060      	str	r0, [r4, #4]
 800568e:	6863      	ldr	r3, [r4, #4]
 8005690:	6123      	str	r3, [r4, #16]
 8005692:	2300      	movs	r3, #0
 8005694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005698:	e7aa      	b.n	80055f0 <_printf_i+0x14c>
 800569a:	6923      	ldr	r3, [r4, #16]
 800569c:	462a      	mov	r2, r5
 800569e:	4649      	mov	r1, r9
 80056a0:	4640      	mov	r0, r8
 80056a2:	47d0      	blx	sl
 80056a4:	3001      	adds	r0, #1
 80056a6:	d0ad      	beq.n	8005604 <_printf_i+0x160>
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	079b      	lsls	r3, r3, #30
 80056ac:	d413      	bmi.n	80056d6 <_printf_i+0x232>
 80056ae:	68e0      	ldr	r0, [r4, #12]
 80056b0:	9b03      	ldr	r3, [sp, #12]
 80056b2:	4298      	cmp	r0, r3
 80056b4:	bfb8      	it	lt
 80056b6:	4618      	movlt	r0, r3
 80056b8:	e7a6      	b.n	8005608 <_printf_i+0x164>
 80056ba:	2301      	movs	r3, #1
 80056bc:	4632      	mov	r2, r6
 80056be:	4649      	mov	r1, r9
 80056c0:	4640      	mov	r0, r8
 80056c2:	47d0      	blx	sl
 80056c4:	3001      	adds	r0, #1
 80056c6:	d09d      	beq.n	8005604 <_printf_i+0x160>
 80056c8:	3501      	adds	r5, #1
 80056ca:	68e3      	ldr	r3, [r4, #12]
 80056cc:	9903      	ldr	r1, [sp, #12]
 80056ce:	1a5b      	subs	r3, r3, r1
 80056d0:	42ab      	cmp	r3, r5
 80056d2:	dcf2      	bgt.n	80056ba <_printf_i+0x216>
 80056d4:	e7eb      	b.n	80056ae <_printf_i+0x20a>
 80056d6:	2500      	movs	r5, #0
 80056d8:	f104 0619 	add.w	r6, r4, #25
 80056dc:	e7f5      	b.n	80056ca <_printf_i+0x226>
 80056de:	bf00      	nop
 80056e0:	08008871 	.word	0x08008871
 80056e4:	08008882 	.word	0x08008882

080056e8 <memmove>:
 80056e8:	4288      	cmp	r0, r1
 80056ea:	b510      	push	{r4, lr}
 80056ec:	eb01 0402 	add.w	r4, r1, r2
 80056f0:	d902      	bls.n	80056f8 <memmove+0x10>
 80056f2:	4284      	cmp	r4, r0
 80056f4:	4623      	mov	r3, r4
 80056f6:	d807      	bhi.n	8005708 <memmove+0x20>
 80056f8:	1e43      	subs	r3, r0, #1
 80056fa:	42a1      	cmp	r1, r4
 80056fc:	d008      	beq.n	8005710 <memmove+0x28>
 80056fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005702:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005706:	e7f8      	b.n	80056fa <memmove+0x12>
 8005708:	4402      	add	r2, r0
 800570a:	4601      	mov	r1, r0
 800570c:	428a      	cmp	r2, r1
 800570e:	d100      	bne.n	8005712 <memmove+0x2a>
 8005710:	bd10      	pop	{r4, pc}
 8005712:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005716:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800571a:	e7f7      	b.n	800570c <memmove+0x24>

0800571c <_sbrk_r>:
 800571c:	b538      	push	{r3, r4, r5, lr}
 800571e:	4d06      	ldr	r5, [pc, #24]	; (8005738 <_sbrk_r+0x1c>)
 8005720:	2300      	movs	r3, #0
 8005722:	4604      	mov	r4, r0
 8005724:	4608      	mov	r0, r1
 8005726:	602b      	str	r3, [r5, #0]
 8005728:	f7fc ff2c 	bl	8002584 <_sbrk>
 800572c:	1c43      	adds	r3, r0, #1
 800572e:	d102      	bne.n	8005736 <_sbrk_r+0x1a>
 8005730:	682b      	ldr	r3, [r5, #0]
 8005732:	b103      	cbz	r3, 8005736 <_sbrk_r+0x1a>
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	bd38      	pop	{r3, r4, r5, pc}
 8005738:	20000344 	.word	0x20000344

0800573c <memcpy>:
 800573c:	440a      	add	r2, r1
 800573e:	4291      	cmp	r1, r2
 8005740:	f100 33ff 	add.w	r3, r0, #4294967295
 8005744:	d100      	bne.n	8005748 <memcpy+0xc>
 8005746:	4770      	bx	lr
 8005748:	b510      	push	{r4, lr}
 800574a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800574e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005752:	4291      	cmp	r1, r2
 8005754:	d1f9      	bne.n	800574a <memcpy+0xe>
 8005756:	bd10      	pop	{r4, pc}

08005758 <_realloc_r>:
 8005758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800575c:	4680      	mov	r8, r0
 800575e:	4614      	mov	r4, r2
 8005760:	460e      	mov	r6, r1
 8005762:	b921      	cbnz	r1, 800576e <_realloc_r+0x16>
 8005764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005768:	4611      	mov	r1, r2
 800576a:	f7ff bc49 	b.w	8005000 <_malloc_r>
 800576e:	b92a      	cbnz	r2, 800577c <_realloc_r+0x24>
 8005770:	f7ff fbda 	bl	8004f28 <_free_r>
 8005774:	4625      	mov	r5, r4
 8005776:	4628      	mov	r0, r5
 8005778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800577c:	f000 f81b 	bl	80057b6 <_malloc_usable_size_r>
 8005780:	4284      	cmp	r4, r0
 8005782:	4607      	mov	r7, r0
 8005784:	d802      	bhi.n	800578c <_realloc_r+0x34>
 8005786:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800578a:	d812      	bhi.n	80057b2 <_realloc_r+0x5a>
 800578c:	4621      	mov	r1, r4
 800578e:	4640      	mov	r0, r8
 8005790:	f7ff fc36 	bl	8005000 <_malloc_r>
 8005794:	4605      	mov	r5, r0
 8005796:	2800      	cmp	r0, #0
 8005798:	d0ed      	beq.n	8005776 <_realloc_r+0x1e>
 800579a:	42bc      	cmp	r4, r7
 800579c:	4622      	mov	r2, r4
 800579e:	4631      	mov	r1, r6
 80057a0:	bf28      	it	cs
 80057a2:	463a      	movcs	r2, r7
 80057a4:	f7ff ffca 	bl	800573c <memcpy>
 80057a8:	4631      	mov	r1, r6
 80057aa:	4640      	mov	r0, r8
 80057ac:	f7ff fbbc 	bl	8004f28 <_free_r>
 80057b0:	e7e1      	b.n	8005776 <_realloc_r+0x1e>
 80057b2:	4635      	mov	r5, r6
 80057b4:	e7df      	b.n	8005776 <_realloc_r+0x1e>

080057b6 <_malloc_usable_size_r>:
 80057b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ba:	1f18      	subs	r0, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	bfbc      	itt	lt
 80057c0:	580b      	ldrlt	r3, [r1, r0]
 80057c2:	18c0      	addlt	r0, r0, r3
 80057c4:	4770      	bx	lr
	...

080057c8 <_init>:
 80057c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ca:	bf00      	nop
 80057cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ce:	bc08      	pop	{r3}
 80057d0:	469e      	mov	lr, r3
 80057d2:	4770      	bx	lr

080057d4 <_fini>:
 80057d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d6:	bf00      	nop
 80057d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057da:	bc08      	pop	{r3}
 80057dc:	469e      	mov	lr, r3
 80057de:	4770      	bx	lr
